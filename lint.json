[{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/.eslintrs.cjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): .eslintrs.cjs"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  // ...\n  plugins: [\"unused-imports\"],\n  rules: {\n    // 1) Shrink no-unused-expressions by allowing common idioms\n    \"@typescript-eslint/no-unused-expressions\": [\"error\", {\n      allowShortCircuit: true,       // cond && doThing()\n      allowTernary: true,            // cond ? a() : b()\n      allowTaggedTemplates: true\n    }],\n\n    // 2) ESM migration staged (we‚Äôll codemod next)\n    \"@typescript-eslint/no-require-imports\": \"warn\",\n\n    // 3) Make 'any' fixable to unknown automatically\n    \"@typescript-eslint/no-explicit-any\": [\"warn\", {\n      fixToUnknown: true,\n      ignoreRestArgs: true\n    }],\n\n    // 4) Auto-remove unused imports; keep unused vars as warn\n    \"unused-imports/no-unused-imports\": \"error\",\n    \"unused-imports/no-unused-vars\": [\"warn\", {\n      args: \"after-used\",\n      argsIgnorePattern: \"^_\",\n      varsIgnorePattern: \"^_\"\n    }],\n\n    \"@typescript-eslint/no-unsafe-function-type\": \"warn\",\n    \"@typescript-eslint/no-empty-object-type\": \"warn\",\n    \"@typescript-eslint/no-this-alias\": [\"warn\", { allowDestructuring: true }]\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/LanguageSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/components/NeonPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/eslint.config.mjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): eslint.config.mjs"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// eslint.config.mjs\nimport js from \"@eslint/js\"\nimport tseslint from \"typescript-eslint\"\nimport reactPlugin from \"eslint-plugin-react\"\nimport reactHooks from \"eslint-plugin-react-hooks\"\nimport unusedImports from \"eslint-plugin-unused-imports\"\n\nexport default tseslint.config(\n  // 1) Ignore build artifacts\n  {\n    ignores: [\n      \"node_modules/**\",\n      \".next/**\",\n      \"dist/**\",\n      \"build/**\",\n      \"coverage/**\",\n      \"public/**\",\n      \".turbo/**\",\n      \".cache/**\",\n    ],\n  },\n\n  // 2) Base JS + strict TS (type-aware)\n  js.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n\n  // 3) Project rules\n  {\n    languageOptions: {\n      parserOptions: {\n        project: [\"./tsconfig.json\"], // make sure this exists\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n        ecmaFeatures: { jsx: true },\n      },\n    },\n    plugins: {\n      react: reactPlugin,\n      \"react-hooks\": reactHooks,\n      \"unused-imports\": unusedImports,\n    },\n    settings: { react: { version: \"detect\" } },\n    rules: {\n      /* --- noise reducers that still keep you safe --- */\n      // Use TS-aware version; allow common patterns like cond && do()\n      \"no-unused-expressions\": \"off\",\n      \"@typescript-eslint/no-unused-expressions\": [\"error\", {\n        allowShortCircuit: true,\n        allowTernary: true,\n        allowTaggedTemplates: true,\n      }],\n\n      // Main pain-point: don‚Äôt flag JSX/event handlers for returning Promise\n      \"@typescript-eslint/no-misused-promises\": [\"error\", {\n        checksVoidReturn: { attributes: false },\n        checksConditionals: true,\n        checksSpreads: true,\n      }],\n\n      // Auto-remove unused imports; keep unused vars as warn (prefix _ to silence)\n      \"unused-imports/no-unused-imports\": \"error\",\n      \"unused-imports/no-unused-vars\": [\"warn\", {\n        args: \"after-used\",\n        argsIgnorePattern: \"^_\",\n        varsIgnorePattern: \"^_\",\n      }],\n\n      // Keep these as warnings while you migrate\n      \"@typescript-eslint/no-require-imports\": \"warn\",\n      \"@typescript-eslint/no-explicit-any\": [\"warn\", { fixToUnknown: true, ignoreRestArgs: true }],\n      \"@typescript-eslint/no-unsafe-function-type\": \"warn\",\n      \"@typescript-eslint/no-empty-object-type\": \"warn\",\n      \"@typescript-eslint/no-this-alias\": [\"warn\", { allowDestructuring: true }],\n\n      // React/hooks essentials\n      \"react/react-in-jsx-scope\": \"off\",\n      \"react/jsx-uses-react\": \"off\",\n      \"react-hooks/rules-of-hooks\": \"error\",\n      \"react-hooks/exhaustive-deps\": \"warn\",\n    },\n  }\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/postcss.config.mjs","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): postcss.config.mjs"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// filepath: /Users/bigmak/Documents/Naranja 4.2/postcss.config.mjs\nconst config = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n\nexport default config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/backfill-auth-users.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":42},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":84,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":84,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2280,2280],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2280,2280],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as dotenv from \"dotenv\";\ndotenv.config({ path: \".env.local\" }); // Load your Supabase credentials\n\nimport { createClient } from \"@supabase/supabase-js\";\n\n// Supabase environment variables\nconst supabaseUrl = process.env.SUPABASE_URL!;\nconst serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;\n\nif (!supabaseUrl || !serviceRoleKey) {\n  console.error(\n    \"‚ùå Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY in .env.local\",\n  );\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, serviceRoleKey);\n\nasync function backfillAuthUsers() {\n  console.log(\"üîç Fetching users without auth_id...\");\n\n  const { data: users, error } = await supabase\n    .from(\"users\")\n    .select(\n      \"id, email, first_name, last_name, department_id, role_id, access_level\",\n    )\n    .is(\"auth_id\", null);\n\n  if (error) {\n    console.error(\"‚ùå Error fetching users:\", error.message);\n    return;\n  }\n\n  if (!users || users.length === 0) {\n    console.log(\"‚úÖ All users have auth_id. Nothing to do.\");\n    return;\n  }\n\n  for (const user of users) {\n    const password = \"Temp1234!\"; // Default password ‚Äî update logic as needed\n\n    const { data: authData, error: authError } =\n      await supabase.auth.admin.createUser({\n        email: user.email,\n        password,\n        email_confirm: true,\n        user_metadata: {\n          first_name: user.first_name,\n          last_name: user.last_name,\n          department_id: user.department_id,\n          role_id: user.role_id,\n          access_level: user.access_level,\n        },\n      });\n\n    if (authError || !authData?.user?.id) {\n      console.error(\n        `‚ùå Failed to create auth user for ${user.email}:`,\n        authError?.message,\n      );\n      continue;\n    }\n\n    const auth_id = authData.user.id;\n\n    const { error: updateError } = await supabase\n      .from(\"users\")\n      .update({ auth_id })\n      .eq(\"id\", user.id); // This is correct: 'id' is the PK in your users table, but use 'auth_id' everywhere else for joins/queries\n\n    if (updateError) {\n      console.error(\n        `Could not update user ${user.email} with auth_id:`,\n        updateError.message,\n      );\n    } else {\n      console.log(`‚úÖ User ${user.email} linked to auth_id ${auth_id}`);\n    }\n  }\n\n  console.log(\"üéØ Backfill complete.\");\n}\n\nbackfillAuthUsers();\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/backfill-users.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":22,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":22,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[570,570],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[570,570],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"../src/lib/supabase-client\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { parse } from \"csv-parse/sync\";\n\nconst csvPath = path.join(__dirname, \"../users_rows.csv\");\nconst csvContent = fs.readFileSync(csvPath, \"utf8\");\nconst records = parse(csvContent, {\n  columns: true,\n  skip_empty_lines: true,\n});\n\nasync function backfillUsers() {\n  const { data, error } = await supabase.from(\"users\").insert(records);\n  if (error) {\n    console.error(\"Error inserting users:\", error);\n  } else {\n    console.log(\"Inserted users:\", data);\n  }\n}\n\nbackfillUsers();\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/for-each-async-to-for-of.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): scripts/for-each-async-to-for-of.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default function transformer(file, api) {\n  const j = api.jscodeshift\n  const root = j(file.source)\n\n  root.find(j.CallExpression, {\n    callee: { type: 'MemberExpression', property: { name: 'forEach' } },\n    arguments: (args) =>\n      args.length === 1 &&\n      args[0].type === 'ArrowFunctionExpression' &&\n      args[0].async,\n  }).forEach((p) => {\n    const call = p.node\n    const arrayExpr = call.callee.object\n    const cb = call.arguments[0] // ArrowFunctionExpression\n    if (cb.params.length !== 1) return\n    const param = cb.params[0]\n    const body =\n      cb.body.type === 'BlockStatement'\n        ? cb.body.body\n        : [j.expressionStatement(cb.body)]\n\n    const forOf = j.forOfStatement(\n      j.variableDeclaration('const', [j.variableDeclarator(param)]),\n      arrayExpr,\n      j.blockStatement(body),\n    )\n    j(p).replaceWith(forOf)\n  })\n\n  return root.toSource({ quote: 'single' })\n}","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/jsx-async-handlers.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): scripts/jsx-async-handlers.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default function transformer(file, api) {\n  const j = api.jscodeshift\n  const root = j(file.source)\n\n  root.find(j.JSXAttribute).forEach(p => {\n    const attr = p.node\n    if (!attr.value || attr.value.type !== 'JSXExpressionContainer') return\n    const exp = attr.value.expression\n    if (!exp || exp.type !== 'ArrowFunctionExpression' || !exp.async) return\n\n    // Build: () => { void (async () => { /* original body */ })() }\n    const asyncIife = j.callExpression(\n      j.arrowFunctionExpression(exp.params, exp.body, true),\n      []\n    )\n    asyncIife.callee.async = true\n    const voidStmt = j.expressionStatement(j.unaryExpression('void', asyncIife))\n    const wrapped = j.arrowFunctionExpression(exp.params, j.blockStatement([voidStmt]), false)\n\n    attr.value = j.jsxExpressionContainer(wrapped)\n  })\n\n  return root.toSource({ quote: 'single' })\n}","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/runAutoScheduler.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":32,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":30,"column":26,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":30,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":33,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":33,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":50,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":73,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":79,"column":25,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":79,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":84,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":84,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":85,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":113,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":122,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":122,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":122,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":134,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":138,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":74},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":149,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":149,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4385,4385],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4385,4385],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { config } from \"dotenv\";\nconfig({ path: \".env.scheduler\" }); // ‚úÖ Use dedicated env file\n\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nasync function runAutoScheduler() {\n  const today = new Date().toISOString().split(\"T\")[0];\n  const day = new Date().getDay();\n  const isWeekday = day >= 1 && day <= 5;\n  const shifts = [\"teal\", \"Green\"];\n  if (isWeekday) shifts.push(\"Mon‚ÄìFri\");\n\n  const { data: templates, error: templateErr } = await supabase\n    .from(\"citracheck_templates\")\n    .select(\"id, name, frequency, shifts\");\n\n  if (templateErr) {\n    console.error(\"Error fetching templates:\", templateErr);\n    return;\n  }\n\n  for (const template of templates || []) {\n    if (template.frequency !== \"daily\") continue;\n\n    const activeShifts = (template.shifts || []).filter((s: string) =>\n      shifts.includes(s),\n    );\n    if (activeShifts.length === 0) continue;\n\n    // Get department assigned to template\n    const { data: templateRow, error: templateFetchErr } = await supabase\n      .from(\"citracheck_templates\")\n      .select(\"department_id\")\n      .eq(\"id\", template.id)\n      .single();\n\n    if (templateFetchErr || !templateRow?.department_id) {\n      console.error(\n        `Error getting department for template ${template.name}`,\n        templateFetchErr,\n      );\n      continue;\n    }\n\n    const department_id = templateRow.department_id;\n\n    // Get users in that department\n    const { data: users, error: userErr } = await supabase\n      .from(\"users\")\n      .select(\"auth_id\")\n      .eq(\"department_id\", department_id);\n\n    if (userErr || !users || users.length === 0) {\n      console.error(`No users found for department ${department_id}`, userErr);\n      continue;\n    }\n\n    for (const shift of activeShifts) {\n      for (const user of users) {\n        // Check if a check already exists for this combo\n        const { data: existing } = await supabase\n          .from(\"citracheck_checks\")\n          .select(\"id\")\n          .match({\n            template_id: template.id,\n            department_id,\n            auth_id: user.auth_id,\n            shift,\n            scheduled_date: today,\n          });\n\n        if (!existing || existing.length === 0) {\n          // Insert new check\n          const { data: inserted, error: insertErr } = await supabase\n            .from(\"citracheck_checks\")\n            .insert({\n              template_id: template.id,\n              department_id,\n              auth_id: user.auth_id,\n              shift,\n              scheduled_date: today,\n              status: \"not_started\",\n            })\n            .select()\n            .single();\n\n          if (insertErr) {\n            console.error(\n              `Insert failed for ${template.name} ‚Äì ${shift}`,\n              insertErr,\n            );\n            continue;\n          }\n\n          console.log(\n            `‚úÖ Check created: ${template.name} ‚Äì ${shift} ‚Äì User ${user.auth_id}`,\n          );\n\n          // Now insert check items\n          const { data: templateItems, error: itemErr } = await supabase\n            .from(\"citracheck_template_items\")\n            .select(\"id\")\n            .eq(\"template_id\", template.id)\n            .order(\"position\", { ascending: true }); // ‚úÖ Corrected here\n\n          if (itemErr) {\n            console.error(\n              `Failed to fetch template items for ${inserted.id}`,\n              itemErr,\n            );\n            continue;\n          }\n\n          if (templateItems && templateItems.length > 0) {\n            type TemplateItem = { id: number };\n            const checkItems = templateItems.map((item: TemplateItem) => ({\n              check_id: inserted.id,\n              template_item_id: item.id,\n              status: null,\n              notes: null,\n            }));\n\n            const { error: itemInsertErr } = await supabase\n              .from(\"citracheck_check_items\")\n              .insert(checkItems);\n\n            if (itemInsertErr) {\n              console.error(\n                `Failed to insert check items for ${inserted.id}`,\n                itemInsertErr,\n              );\n            } else {\n              console.log(`‚ûï Check items inserted for check ${inserted.id}`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  console.log(\"üéØ Scheduler run complete.\");\n}\n\nrunAutoScheduler();\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/sync-documents.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): scripts/sync-documents.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"require(\"dotenv\").config();\nrequire(\"dotenv\").config({ path: \".env.local\" });\n\nconsole.log(\"‚úÖ DEBUG: ENV LOADED\");\nconsole.log(\"SUPABASE_URL:\", process.env.SUPABASE_URL);\nconsole.log(\n  \"SUPABASE_SERVICE_ROLE_KEY:\",\n  process.env.SUPABASE_SERVICE_ROLE_KEY ? \"Loaded ‚úÖ\" : \"‚ùå Missing\",\n);\n\nconst { createClient } = require(\"@supabase/supabase-js\");\nconst { parse } = require(\"path\");\n\n// üîê Use environment variables from .env.local\nconst supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n);\n\nconst BUCKET_NAME = \"documents\";\nconst STORAGE_URL = `${process.env.SUPABASE_URL}/storage/v1/object/public/${BUCKET_NAME}/`;\nconst CREATED_BY = \"c423758d-cf76-4119-b4be-8514cdd40135\"; // your user ID\n\nasync function syncDocuments() {\n  const { data: files, error } = await supabase.storage\n    .from(BUCKET_NAME)\n    .list(\"\", { limit: 1000 });\n\n  if (error) {\n    console.error(\"‚ùå Error listing files:\", error.message);\n    return;\n  }\n\n  for (const file of files) {\n    const filename = file.name;\n    const url = `${STORAGE_URL}${filename}`;\n\n    const baseName = parse(filename).name; // remove file extension\n    const parts = baseName.split(\"_\");\n\n    let reference_code = null;\n    let title = baseName;\n\n    if (/^\\d+(\\.\\d+)*$/.test(parts[0])) {\n      reference_code = parts[0];\n      title = parts.slice(1).join(\" \").replace(/_/g, \" \");\n    } else {\n      title = parts.join(\" \").replace(/_/g, \" \");\n    }\n\n    const insertData = {\n      reference_code,\n      title,\n      document_type: \"policy\",\n      file_url: url,\n      created_by: CREATED_BY,\n      last_reviewed_at: new Date().toISOString().slice(0, 10),\n      review_period_months: 12,\n      version: 1,\n      current_version: 1,\n    };\n\n    const { error: insertError } = await supabase\n      .from(\"documents\")\n      .insert([insertData]);\n\n    if (insertError) {\n      console.error(\n        `‚ùå Failed to insert for ${filename}:`,\n        insertError.message,\n      );\n    } else {\n      console.log(`‚úÖ Inserted: ${title}`);\n    }\n  }\n}\n\nsyncDocuments();\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/scripts/wrap-async-callbacks.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): scripts/wrap-async-callbacks.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export default function transformer(file, api) {\n  const j = api.jscodeshift\n  const root = j(file.source)\n\n  function wrapAsyncArrow(arrow) {\n    if (!arrow || arrow.type !== 'ArrowFunctionExpression' || !arrow.async) return null\n    const asyncIife = j.callExpression(\n      j.arrowFunctionExpression(arrow.params, arrow.body, true),\n      []\n    )\n    asyncIife.callee.async = true\n    const voidStmt = j.expressionStatement(j.unaryExpression('void', asyncIife))\n    return j.arrowFunctionExpression(arrow.params, j.blockStatement([voidStmt]), false)\n  }\n\n  // setTimeout / setInterval\n  root.find(j.CallExpression, {\n    callee: { type: 'Identifier', name: (n) => n === 'setTimeout' || n === 'setInterval' }\n  }).forEach(p => {\n    const args = p.node.arguments\n    const wrapped = wrapAsyncArrow(args[0])\n    if (wrapped) args[0] = wrapped\n  })\n\n  // ...addEventListener(...)\n  root.find(j.CallExpression, {\n    callee: { type: 'MemberExpression', property: { type: 'Identifier', name: 'addEventListener' } }\n  }).forEach(p => {\n    const args = p.node.arguments\n    if (args.length < 2) return\n    const wrapped = wrapAsyncArrow(args[1])\n    if (wrapped) args[1] = wrapped\n  })\n\n  return root.toSource({ quote: 'single' })\n}","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/AuthListener.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":7,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":7,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[165,165],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[165,165],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport default function AuthListener() {\n  useEffect(() => {\n    supabase.auth.getUser();\n    const { data: listener } = supabase.auth.onAuthStateChange(() => {\n      // No-op: user state is not used\n    });\n    return () => {\n      listener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/compliance/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":54,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [m.id] resolves to an `any` value.","line":54,"column":19,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":54,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":59,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":68,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":70,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":70,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .module_id on an `any` value.","line":70,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":72,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [a.module_id] resolves to an `any` value.","line":73,"column":29,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":73,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .module_id on an `any` value.","line":73,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":75,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":75,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":76,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [a.auth_id] on an `any` value.","line":76,"column":27,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":76,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [a.auth_id] resolves to an `any` value.","line":76,"column":27,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":76,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":76,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":36},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":99,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":99,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3087,3087],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3087,3087],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// admin/compliance/page.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport ContentHeader from \"@/components/headersandfooters/ContentHeader\";\n\ninterface Assignment {\n  auth_id: string;\n  name: string;\n  type: \"module\" | \"document\" | \"behaviour\";\n  completed_at?: string;\n  user?: {\n    first_name: string;\n    last_name: string;\n    department?: { name: string };\n    role?: { title: string };\n  };\n}\n\nexport default function CompliancePage() {\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [departments, setDepartments] = useState<string[]>([]);\n  const [roles, setRoles] = useState<string[]>([]);\n  const [modules, setModules] = useState<string[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const [selectedDept, setSelectedDept] = useState(\"All\");\n  const [selectedRole, setSelectedRole] = useState(\"All\");\n  const [selectedModule, setSelectedModule] = useState(\"All\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [assignmentsRaw, completionsRaw, usersRaw] = await Promise.all([\n        supabase.from(\"user_training_assignments\").select(\"*\"),\n        supabase\n          .from(\"module_completions\")\n          .select(\"auth_id, module_id, completed_at\"),\n        supabase\n          .from(\"users\")\n          .select(\n            \"auth_id, first_name, last_name, department:departments(name), role:roles(title)\",\n          ),\n      ]);\n\n      const moduleMap: Record<string, string> = {};\n      const { data: modulesList } = await supabase\n        .from(\"modules\")\n        .select(\"id, name\");\n      modulesList?.forEach((m) => {\n        moduleMap[m.id] = m.name;\n      });\n\n      const userMap = Object.fromEntries(\n        (usersRaw.data || []).map((u) => [u.auth_id, u]),\n      );\n      const completionMap = Object.fromEntries(\n        (completionsRaw.data || []).map((c) => [\n          `${c.auth_id}_${c.module_id}`,\n          c.completed_at,\n        ]),\n      );\n\n      const result: Assignment[] = (assignmentsRaw.data || [])\n        .filter((a) => a.type === \"module\")\n        .map((a) => {\n          const completed_at = completionMap[`${a.auth_id}_${a.module_id}`];\n          return {\n            auth_id: a.auth_id,\n            name: moduleMap[a.module_id] || \"Unknown Module\",\n            type: \"module\",\n            completed_at,\n            user: userMap[a.auth_id] || undefined,\n          };\n        });\n\n      setAssignments(result);\n      setDepartments([\n        ...new Set(\n          result\n            .map((r) => r.user?.department?.name)\n            .filter((x): x is string => !!x),\n        ),\n      ]);\n      setRoles([\n        ...new Set(\n          result\n            .map((r) => r.user?.role?.title)\n            .filter((x): x is string => !!x),\n        ),\n      ]);\n      setModules([\n        ...new Set(result.map((r) => r.name).filter((x): x is string => !!x)),\n      ]);\n    };\n    fetchData();\n  }, []);\n\n  const filtered = assignments\n    .filter(\n      (a) =>\n        selectedDept === \"All\" || a.user?.department?.name === selectedDept,\n    )\n    .filter(\n      (a) => selectedRole === \"All\" || a.user?.role?.title === selectedRole,\n    )\n    .filter((a) => selectedModule === \"All\" || a.name === selectedModule)\n    .filter((a) => {\n      const name =\n        `${a.user?.first_name ?? \"\"} ${a.user?.last_name ?? \"\"}`.toLowerCase();\n      return name.includes(search.toLowerCase());\n    });\n\n  const completionRate =\n    assignments.length > 0\n      ? Math.round(\n          (assignments.filter((a) => !!a.completed_at).length /\n            assignments.length) *\n            100,\n        )\n      : 0;\n\n  return (\n    <>\n      <ContentHeader title=\"Compliance Dashboard\">\n        <h1>Compliance Dashboard</h1>\n        <p>\n          Completion Rate: <strong>{completionRate}%</strong>\n        </p>\n      </ContentHeader>\n      <NeonPanel>\n        <NeonForm\n          title=\"Compliance Filters\"\n          onSubmit={(e) => e.preventDefault()}\n          submitLabel={undefined}\n        >\n          <div className=\"neon-form-actions\" style={{ flexWrap: \"wrap\" }}>\n            <div>\n              <label>Department</label>\n              <select\n                value={selectedDept}\n                onChange={(e) => setSelectedDept(e.target.value)}\n                className=\"neon-input\"\n              >\n                <option value=\"All\">All</option>\n                {departments.map((d) => (\n                  <option key={d} value={d}>\n                    {d}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label>Role</label>\n              <select\n                value={selectedRole}\n                onChange={(e) => setSelectedRole(e.target.value)}\n                className=\"neon-input\"\n              >\n                <option value=\"All\">All</option>\n                {roles.map((r) => (\n                  <option key={r} value={r}>\n                    {r}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label>Module</label>\n              <select\n                value={selectedModule}\n                onChange={(e) => setSelectedModule(e.target.value)}\n                className=\"neon-input\"\n              >\n                <option value=\"All\">All</option>\n                {modules.map((m) => (\n                  <option key={m} value={m}>\n                    {m}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label>Search User</label>\n              <input\n                type=\"text\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder=\"Enter name...\"\n                className=\"neon-input\"\n              />\n            </div>\n          </div>\n        </NeonForm>\n\n        <NeonTable\n          columns={[\n            { header: \"User\", accessor: \"user\" },\n            { header: \"Department\", accessor: \"department\" },\n            { header: \"Role\", accessor: \"role\" },\n            { header: \"Module\", accessor: \"module\" },\n            { header: \"Status\", accessor: \"status\" },\n          ]}\n          data={filtered.map((a) => ({\n            user: `${a.user?.first_name ?? \"\"} ${a.user?.last_name ?? \"\"}`,\n            department: a.user?.department?.name || \"‚Äî\",\n            role: a.user?.role?.title || \"‚Äî\",\n            module: a.name,\n            status: a.completed_at\n              ? new Date(a.completed_at).toLocaleDateString()\n              : \"Incomplete\",\n          }))}\n        />\n      </NeonPanel>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/create-auth-user/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":23,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":26,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":30,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":41}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport NeonForm from \"@/components/NeonForm\";\n\nexport default function CreateAuthUserPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [status, setStatus] = useState<null | string>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setStatus(\"Creating user...\");\n    setLoading(true);\n\n    const res = await fetch(\"/api/create-auth-user\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const result = await res.json();\n\n    if (res.ok) {\n      setStatus(`‚úÖ Created user: ${result.user.email}`);\n      setEmail(\"\");\n      setPassword(\"\");\n    } else {\n      setStatus(`‚ùå Error: ${result.error}`);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-12 p-6 border rounded shadow\">\n      <h1 className=\"text-2xl font-bold mb-4\">Create Auth User</h1>\n      <NeonForm\n        title=\"Create Auth User\"\n        submitLabel=\"Create User\"\n        onSubmit={handleSubmit}\n      >\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          className=\"neon-input\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          className=\"neon-input\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button\n          type=\"submit\"\n          className=\"neon-btn neon-btn-save w-full\"\n          data-variant=\"save\"\n          disabled={loading}\n        >\n          {loading ? (\n            <>\n              <span style={{ marginRight: \"0.5em\" }}>Creating...</span>\n            </>\n          ) : (\n            \"Create User\"\n          )}\n        </button>\n        {status && <p className=\"mt-4 text-sm\">{status}</p>}\n      </NeonForm>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_items on an `any` value.","line":54,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completed_items on an `any` value.","line":55,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .total_items on an `any` value.","line":55,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":59},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":64,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":64,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1454,1454],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1454,1454],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":403,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":403,"endColumn":53}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiUsers,\n  FiPlus,\n  FiGrid,\n  FiClipboard,\n  FiPieChart,\n  FiAlertTriangle,\n  FiFileText,\n  FiBookOpen,\n  FiShield,\n  FiActivity,\n  FiSettings,\n  FiHome,\n  FiCheckCircle,\n  FiBarChart2,\n  FiDatabase,\n  FiLayers,\n  FiUserCheck,\n  FiClock,\n} from \"react-icons/fi\";\nimport NeonFeatureCard from \"@/components/NeonFeatureCard\";\n\ninterface DashboardLink {\n  href: string;\n  label: React.ReactNode;\n  className?: string;\n}\n\ninterface DashboardCard {\n  title: React.ReactNode;\n  links: DashboardLink[];\n}\n\nexport default function DashboardPage() {\n  const [avgCompliance, setAvgCompliance] = useState<number | null>(null);\n  const [lowComplianceCount, setLowComplianceCount] = useState<number>(0);\n\n  useEffect(() => {\n    const fetchCompliance = async () => {\n      const { data, error } = await supabase\n        .from(\"user_compliance_dashboard\")\n        .select(\"*\");\n      if (error) return;\n\n      let total = 0,\n        percent = 0,\n        low = 0;\n      data?.forEach((row) => {\n        if (row.total_items > 0) {\n          const p = (row.completed_items / row.total_items) * 100;\n          percent += p;\n          total++;\n          if (p < 70) low++;\n        }\n      });\n      setAvgCompliance(total ? Number((percent / total).toFixed(1)) : null);\n      setLowComplianceCount(low);\n    };\n    fetchCompliance();\n  }, []);\n\n  const iconSize = 18;\n\n  const cards: DashboardCard[] = [\n    {\n      title: (\n        <>\n          <FiUsers size={20} /> People\n        </>\n      ),\n      links: [\n        {\n          href: \"/hr/people\",\n          label: (\n            <>\n              <FiUsers size={iconSize} /> People\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiLayers size={20} /> Modules\n        </>\n      ),\n      links: [\n        {\n          href: \"/admin/modules\",\n          label: (\n            <>\n              <FiLayers size={iconSize} /> Modules\n            </>\n          ),\n        },\n        {\n          href: \"/admin/modules/add\",\n          label: (\n            <>\n              <FiPlus size={iconSize} /> Add Module\n            </>\n          ),\n        },\n        {\n          href: \"/admin/modules/assign\",\n          label: (\n            <>\n              <FiUserCheck size={iconSize} /> Assign Module\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiShield size={20} /> Compliance\n        </>\n      ),\n      links: [\n        {\n          href: \"/admin/compliance\",\n          label: (\n            <>\n              <FiShield size={iconSize} /> Compliance\n            </>\n          ),\n        },\n        {\n          href: \"/admin/incomplete\",\n          label: (\n            <>\n              <FiAlertTriangle size={iconSize} /> Incomplete\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiFileText size={20} /> Documents\n        </>\n      ),\n      links: [\n        {\n          href: \"/admin/documents\",\n          label: (\n            <>\n              <FiFileText size={iconSize} /> Documents\n            </>\n          ),\n        },\n        {\n          href: \"/admin/documents/add\",\n          label: (\n            <>\n              <FiPlus size={iconSize} /> Add Document\n            </>\n          ),\n        },\n        {\n          href: \"/admin/documents/versions\",\n          label: (\n            <>\n              <FiClock size={iconSize} /> Versions\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiUsers size={20} /> Org Chart\n        </>\n      ),\n      links: [\n        {\n          href: \"/admin/org-chart\",\n          label: (\n            <>\n              <FiUsers size={iconSize} /> Org Chart\n            </>\n          ),\n        },\n        {\n          href: \"/admin/roles/add\",\n          label: (\n            <>\n              <FiPlus size={iconSize} /> Add Role\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiUserCheck size={20} /> Role Profiles\n        </>\n      ),\n      links: [\n        {\n          href: \"/admin/role-profiles\",\n          label: (\n            <>\n              <FiUserCheck size={iconSize} /> Role Profiles\n            </>\n          ),\n        },\n        {\n          href: \"/admin/role-profiles/add\",\n          label: (\n            <>\n              <FiPlus size={iconSize} /> Add Profile\n            </>\n          ),\n        },\n        {\n          href: \"/admin/role-profiles/manage\",\n          label: (\n            <>\n              <FiSettings size={iconSize} /> Manage Profiles\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiShield size={iconSize} /> Health & Safety\n        </>\n      ),\n      links: [\n        {\n          href: \"/turkus/health-safety\",\n          label: (\n            <>\n              <FiShield size={iconSize} /> H&S Home\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/health-safety/policies\",\n          label: (\n            <>\n              <FiFileText size={iconSize} /> Policies\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/health-safety/assessments\",\n          label: (\n            <>\n              <FiActivity size={iconSize} /> Risk Assessments\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/health-safety/incidents\",\n          label: (\n            <>\n              <FiAlertTriangle size={iconSize} /> Incidents\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/health-safety/resources\",\n          label: (\n            <>\n              <FiBookOpen size={iconSize} /> Resources\n            </>\n          ),\n        },\n      ],\n    },\n    {\n      title: (\n        <>\n          <FiHome size={20} /> Turkus\n        </>\n      ),\n      links: [\n        {\n          href: \"/turkus\",\n          label: (\n            <>\n              <FiHome size={iconSize} /> Turkus Home\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/tasks/dashboard\",\n          label: (\n            <>\n              <FiBarChart2 size={iconSize} /> Dashboard\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/tasks\",\n          label: (\n            <>\n              <FiGrid size={iconSize} /> Tasks\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/reports\",\n          label: (\n            <>\n              <FiPieChart size={iconSize} /> Reports\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/assignments\",\n          label: (\n            <>\n              <FiSettings size={iconSize} /> Assignments\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/taskmanager\",\n          label: (\n            <>\n              <FiClipboard size={iconSize} /> Task Manager\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/audit\",\n          label: (\n            <>\n              <FiDatabase size={iconSize} /> Audit\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/documents\",\n          label: (\n            <>\n              <FiFileText size={iconSize} /> Document Manager\n            </>\n          ),\n        },\n        {\n          href: \"/turkus/issues\",\n          label: (\n            <>\n              <FiAlertTriangle size={iconSize} /> Issues\n            </>\n          ),\n        },\n      ],\n    },\n  ];\n\n  return (\n    <>\n      <main className=\"dashboard-panel\">\n        <section className=\"dashboard-overview\">\n          <div className=\"overview-info\">\n            <p className=\"overview-title\">\n              <FiPieChart size={iconSize} /> Compliance Overview\n            </p>\n            <p className=\"overview-desc\">Live summary of completion status</p>\n          </div>\n          <div className=\"overview-stats\">\n            <p className=\"overview-stat\">\n              <FiCheckCircle size={iconSize} /> <strong>Avg Compliance:</strong>{\" \"}\n              {avgCompliance ?? \"Loading...\"}%\n            </p>\n            <p className=\"overview-stat\">\n              <FiAlertTriangle size={iconSize} className=\"icon-warning\" />{\" \"}\n              <strong>Users &lt; 70%:</strong> {lowComplianceCount}\n            </p>\n            <Link href=\"/admin/compliance\" className=\"dashboard-btn\">\n              <FiPieChart size={iconSize} /> View Full ‚Üí\n            </Link>\n          </div>\n        </section>\n\n        <section className=\"dashboard-grid\">\n          {cards.map((card, idx) => {\n            let icon = <FiActivity />;\n            let title = \"Feature\";\n            if (React.isValidElement(card.title)) {\n              const element = card.title as React.ReactElement<{\n                children?: React.ReactNode;\n              }>;\n              const children = element.props?.children;\n              if (Array.isArray(children)) {\n                icon = children[0] || <FiActivity />;\n                title =\n                  typeof children[1] === \"string\" ? children[1] : \"Feature\";\n              } else {\n                title = typeof children === \"string\" ? children : \"Feature\";\n              }\n            } else if (typeof card.title === \"string\") {\n              title = card.title;\n            }\n            const firstLabel =\n              typeof card.links[0]?.label === \"string\"\n                ? card.links[0].label\n                : \"\";\n            return (\n              <div key={idx} className=\"dashboard-card\">\n                <NeonFeatureCard\n                  icon={icon}\n                  title={title}\n                  text={firstLabel}\n                  href={card.links[0]?.href || \"#\"}\n                >\n                  <div className=\"dashboard-links\">\n                    {card.links.map((link, i) => (\n                      <Link key={i} href={link.href} className=\"dashboard-link\">\n                        {link.label}\n                      </Link>\n                    ))}\n                  </div>\n                </NeonFeatureCard>\n              </div>\n            );\n          })}\n        </section>\n      </main>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/departments/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":32,"column":44,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":32,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":32,"column":44,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":32,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .localeCompare on an `any` value.","line":32,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":32,"endColumn":64},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1073,1073],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1073,1073],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter } from \"next/navigation\";\n\ninterface Department {\n  id: string;\n  name: string;\n  parent_id: string | null;\n}\n\nexport default function AddDepartmentPage() {\n  const [name, setName] = useState(\"\");\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [selectedParent, setSelectedParent] = useState<string | null>(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchDepartments = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"departments\")\n        .select(\"id, name, parent_id\");\n\n      if (error) {\n        console.error(\"Error fetching departments:\", error.message);\n      } else {\n        setDepartments(data.sort((a, b) => a.name.localeCompare(b.name)));\n      }\n      setLoading(false);\n    };\n\n    fetchDepartments();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setError(\"\");\n\n    const { error } = await supabase.from(\"departments\").insert([\n      {\n        name,\n        parent_id: selectedParent || null,\n      },\n    ]);\n\n    if (error) {\n      setError(error.message);\n    } else {\n      router.push(\"/admin/org-chart\");\n    }\n    setSubmitting(false);\n  };\n\n  return (\n    <>\n      <main className=\"after-hero\">\n        <div className=\"global-content\">\n          <h1 className=\"add-department-title\">Add Department</h1>\n          <form onSubmit={handleSubmit} className=\"add-department-form\">\n            <input\n              type=\"text\"\n              placeholder=\"Department Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              required\n              className=\"add-department-input\"\n            />\n            <div>\n              <label className=\"add-department-label\">\n                Parent Department (optional)\n              </label>\n              <select\n                className=\"add-department-select\"\n                value={selectedParent || \"\"}\n                onChange={(e) => setSelectedParent(e.target.value || null)}\n              >\n                <option value=\"\">None (Top-level)</option>\n                {loading ? (\n                  <option disabled>Loading...</option>\n                ) : (\n                  departments.map((dept) => (\n                    <option key={dept.id} value={dept.id}>\n                      {dept.name}\n                    </option>\n                  ))\n                )}\n              </select>\n            </div>\n            {error && <p className=\"add-department-error\">{error}</p>}\n            <button\n              type=\"submit\"\n              disabled={submitting}\n              className=\"neon-btn neon-btn-save\"\n              data-variant=\"save\"\n            >\n              {submitting ? (\n                <>\n                  <span style={{ marginRight: \"0.5em\" }}>Saving...</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"feather feather-save\"\n                  >\n                    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                    <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                    <polyline points=\"7 3 7 8 15 8\"></polyline>\n                  </svg>\n                </>\n              ) : (\n                <>\n                  <span style={{ marginRight: \"0.5em\" }}>Save Department</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"feather feather-save\"\n                  >\n                    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                    <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                    <polyline points=\"7 3 7 8 15 8\"></polyline>\n                  </svg>\n                </>\n              )}\n            </button>\n          </form>\n        </div>\n      </main>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/departments/manage/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":26,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":26,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[639,639],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[639,639],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport DepartmentTree from \"@/components/DepartmentTree\";\n\ninterface Department {\n  id: string;\n  name: string;\n  parent_id: string | null;\n}\n\ninterface Role {\n  id: string;\n  title: string;\n  department_id: string;\n}\n\nexport default function ManageDepartmentsPage() {\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [updatingId, setUpdatingId] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    const { data: deptData, error: deptErr } = await supabase\n      .from(\"departments\")\n      .select(\"*\");\n    const { data: roleData, error: roleErr } = await supabase\n      .from(\"roles\")\n      .select(\"*\");\n\n    if (deptErr || roleErr) {\n      console.error(deptErr || roleErr);\n    } else {\n      setDepartments(deptData || []);\n      setRoles(roleData || []);\n    }\n\n    setLoading(false);\n  };\n\n  const updateParent = async (deptId: string, newParentId: string) => {\n    setUpdatingId(deptId);\n    await supabase\n      .from(\"departments\")\n      .update({ parent_id: newParentId || null })\n      .eq(\"id\", deptId);\n    await fetchData();\n    setUpdatingId(null);\n  };\n\n  const getRolesForDept = (deptId: string) => {\n    return roles.filter((role) => role.department_id === deptId);\n  };\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <section className=\"departments-manage-section flex-grow\">\n          <h1 className=\"departments-manage-title\">Manage Departments</h1>\n\n          {loading ? (\n            <div className=\"text-center text-gray-600\">\n              Loading departments...\n            </div>\n          ) : (\n            <>\n              <div className=\"overflow-x-auto mb-12\">\n                <table className=\"departments-manage-table\">\n                  <thead>\n                    <tr>\n                      <th className=\"departments-manage-th\">Department</th>\n                      <th className=\"departments-manage-th\">\n                        Parent Department\n                      </th>\n                      <th className=\"departments-manage-th\">\n                        Associated Roles\n                      </th>\n                      <th className=\"departments-manage-th\">Change Parent</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {departments.map((dept) => (\n                      <tr key={dept.id} className=\"departments-manage-tr\">\n                        <td className=\"departments-manage-td departments-manage-td-name\">\n                          {dept.name}\n                        </td>\n                        <td className=\"departments-manage-td\">\n                          {departments.find((d) => d.id === dept.parent_id)\n                            ?.name || \"‚Äî\"}\n                        </td>\n                        <td className=\"departments-manage-td departments-manage-td-roles\">\n                          {getRolesForDept(dept.id)\n                            .map((role) => role.title)\n                            .join(\", \") || \"‚Äî\"}\n                        </td>\n                        <td className=\"departments-manage-td\">\n                          <select\n                            value={dept.parent_id || \"\"}\n                            onChange={(e) =>\n                              updateParent(dept.id, e.target.value)\n                            }\n                            className=\"departments-manage-parent-select\"\n                            disabled={updatingId === dept.id}\n                          >\n                            <option value=\"\">‚Äî No Parent ‚Äî</option>\n                            {departments\n                              .filter((d) => d.id !== dept.id)\n                              .map((d) => (\n                                <option key={d.id} value={d.id}>\n                                  {d.name}\n                                </option>\n                              ))}\n                          </select>\n                          {updatingId === dept.id && (\n                            <p className=\"departments-manage-updating-msg\">\n                              Updating...\n                            </p>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              <h2 className=\"departments-manage-hierarchy-title\">\n                üìÇ Department Hierarchy\n              </h2>\n              <div className=\"departments-manage-hierarchy-panel\">\n                <DepartmentTree departments={departments} roles={roles} />\n              </div>\n            </>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/departments/profile/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":38,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":38,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":49,"column":63,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":49,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":60,"column":62,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":60,"endColumn":75},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":65,"column":23,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":65,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2087,2087],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2087,2087],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { toast } from \"react-hot-toast\";\n\ntype Module = { id: string; name: string };\ntype Document = {\n  id: string;\n  title?: string;\n  name?: string;\n  document_type?: string;\n};\n\nexport default function DepartmentProfilePage() {\n  const { id } = useParams();\n  const departmentId = id as string;\n\n  const [departmentName, setDepartmentName] = useState(\"\");\n  const [modules, setModules] = useState<Module[]>([]);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [selectedModuleIds, setSelectedModuleIds] = useState<string[]>([]);\n  const [selectedDocumentIds, setSelectedDocumentIds] = useState<string[]>([]);\n  const [docTypeFilter, setDocTypeFilter] = useState(\"All\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      // Department name\n      const { data: deptData } = await supabase\n        .from(\"departments\")\n        .select(\"name\")\n        .eq(\"id\", departmentId)\n        .single();\n      setDepartmentName(deptData?.name || \"\");\n\n      // Modules\n      const { data: allModules } = await supabase\n        .from(\"modules\")\n        .select(\"id, name\");\n      const { data: assignedModules } = await supabase\n        .from(\"department_modules\")\n        .select(\"module_id\")\n        .eq(\"department_id\", departmentId);\n      setModules(allModules || []);\n      setSelectedModuleIds((assignedModules || []).map((m) => m.module_id));\n\n      // Documents\n      const { data: allDocuments } = await supabase\n        .from(\"documents\")\n        .select(\"id, title, document_type\");\n      const { data: assignedDocs } = await supabase\n        .from(\"department_documents\")\n        .select(\"document_id\")\n        .eq(\"department_id\", departmentId);\n      setDocuments(allDocuments || []);\n      setSelectedDocumentIds((assignedDocs || []).map((d) => d.document_id));\n\n      setLoading(false);\n    };\n\n    if (departmentId) fetchData();\n  }, [departmentId]);\n\n  const handleModuleToggle = (id: string) => {\n    setSelectedModuleIds((prev) =>\n      prev.includes(id) ? prev.filter((m) => m !== id) : [...prev, id],\n    );\n  };\n\n  const handleDocumentToggle = (id: string) => {\n    setSelectedDocumentIds((prev) =>\n      prev.includes(id) ? prev.filter((d) => d !== id) : [...prev, id],\n    );\n  };\n\n  const handleSave = async () => {\n    setLoading(true);\n\n    // Modules\n    await supabase\n      .from(\"department_modules\")\n      .delete()\n      .eq(\"department_id\", departmentId);\n    if (selectedModuleIds.length > 0) {\n      await supabase\n        .from(\"department_modules\")\n        .insert(\n          selectedModuleIds.map((module_id) => ({\n            department_id: departmentId,\n            module_id,\n          })),\n        );\n    }\n\n    // Documents\n    await supabase\n      .from(\"department_documents\")\n      .delete()\n      .eq(\"department_id\", departmentId);\n    if (selectedDocumentIds.length > 0) {\n      await supabase\n        .from(\"department_documents\")\n        .insert(\n          selectedDocumentIds.map((document_id) => ({\n            department_id: departmentId,\n            document_id,\n          })),\n        );\n    }\n\n    toast.success(\"Department profile updated successfully.\");\n    setLoading(false);\n  };\n\n  const filteredDocuments =\n    docTypeFilter === \"All\"\n      ? documents\n      : documents.filter((d) => d.document_type === docTypeFilter);\n\n  const documentTypes = [\n    \"All\",\n    ...Array.from(new Set(documents.map((d) => d.document_type))),\n  ];\n\n  return (\n    <>\n      <div className=\"after-hero\">\n        <div className=\"global-content\">\n          <div className=\"neon-panel department-profile-panel\">\n            <h1 className=\"neon-form-title mb-4\">\n              Department Profile: {departmentName}\n            </h1>\n\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <>\n                {/* MODULES */}\n                <div className=\"mb-6\">\n                  <h2 className=\"neon-form-section-title mb-2\">Modules</h2>\n                  <ul className=\"department-profile-list\">\n                    {modules.map((mod) => (\n                      <li key={mod.id}>\n                        <label className=\"department-profile-checkbox-label\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedModuleIds.includes(mod.id)}\n                            onChange={() => handleModuleToggle(mod.id)}\n                          />\n                          {mod.name}\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                {/* DOCUMENTS */}\n                <div className=\"mb-6\">\n                  <h2 className=\"neon-form-section-title mb-2\">Documents</h2>\n                  <select\n                    value={docTypeFilter}\n                    onChange={(e) => setDocTypeFilter(e.target.value)}\n                    className=\"department-profile-select\"\n                  >\n                    {documentTypes.map((type) => (\n                      <option key={type} value={type}>\n                        {type === \"All\" ? \"All Types\" : type}\n                      </option>\n                    ))}\n                  </select>\n                  <ul className=\"department-profile-list\">\n                    {filteredDocuments.map((doc) => (\n                      <li key={doc.id}>\n                        <label className=\"department-profile-checkbox-label\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedDocumentIds.includes(doc.id)}\n                            onChange={() => handleDocumentToggle(doc.id)}\n                          />\n                          {doc.title || \"Untitled\"}{\" \"}\n                          <span className=\"department-profile-doc-type\">\n                            ({doc.document_type || \"Unknown Type\"})\n                          </span>\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                <button\n                  onClick={handleSave}\n                  className=\"neon-btn neon-btn-save\"\n                  data-variant=\"save\"\n                  disabled={loading}\n                  type=\"button\"\n                >\n                  <span style={{ marginRight: \"0.5em\" }}>Save Changes</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"feather feather-save\"\n                  >\n                    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                    <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                    <polyline points=\"7 3 7 8 15 8\"></polyline>\n                  </svg>\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/documents/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":47,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1584,1584],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1584,1584],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":61,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":68,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2019,2019],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2019,2019],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":145,"column":23,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":145,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":170,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":170,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":170,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":180,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":180,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":180,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":180,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":437,"column":43,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":437,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":449,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":449,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":449,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":449,"endColumn":53}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter } from \"next/navigation\";\nimport NeonForm from \"@/components/NeonForm\";\nimport Modal from \"@/components/modal\";\n\ntype Std = { id: string; name: string };\ntype Sec = { id: string; code: string; title: string };\ntype Mod = { id: string; name: string };\n\nexport default function AddDocumentPage() {\n  const [title, setTitle] = useState(\"\");\n  const [referenceCode, setReferenceCode] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [standardId, setStandardId] = useState(\"\");\n  const [sectionId, setSectionId] = useState(\"\");\n  const [documentType, setDocumentType] = useState<\n    \"policy\" | \"ssow\" | \"work_instruction\" | \"\"\n  >(\"policy\");\n  const [file, setFile] = useState<File | null>(null);\n\n  const [standards, setStandards] = useState<Std[]>([]);\n  const [sections, setSections] = useState<Sec[]>([]);\n\n  const [showModuleAttach, setShowModuleAttach] = useState(false);\n  const [showModuleSelector, setShowModuleSelector] = useState(false);\n  const [modulesList, setModulesList] = useState<Mod[]>([]);\n  const [selectedModuleId, setSelectedModuleId] = useState(\"\");\n  const [addingNewModule, setAddingNewModule] = useState(false);\n  const [newModuleName, setNewModuleName] = useState(\"\");\n  const [createdDocId, setCreatedDocId] = useState<string | null>(null);\n\n  const [submitting, setSubmitting] = useState(false);\n\n  const router = useRouter();\n\n  // Load Standards\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      const { data, error } = await supabase\n        .from(\"document_standard\")\n        .select(\"id, name\");\n      if (!cancelled && !error) setStandards(data || []);\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  // Load Sections for selected standard\n  useEffect(() => {\n    if (!standardId) {\n      setSections([]);\n      setSectionId(\"\");\n      return;\n    }\n    let cancelled = false;\n    (async () => {\n      const { data, error } = await supabase\n        .from(\"standard_sections\")\n        .select(\"id, code, title\")\n        .eq(\"standard_id\", standardId)\n        .order(\"code\", { ascending: true });\n      if (!cancelled && !error) setSections(data || []);\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [standardId]);\n\n  const handleFileChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const selected = e.target.files?.[0] || null;\n      if (!selected) {\n        setFile(null);\n        return;\n      }\n      // Stricter PDF guard: type & extension\n      const isPdfType = selected.type === \"application/pdf\";\n      const isPdfExt = selected.name.toLowerCase().endsWith(\".pdf\");\n      if (!isPdfType || !isPdfExt) {\n        alert(\"Only PDF files are allowed.\");\n        e.target.value = \"\";\n        setFile(null);\n        return;\n      }\n      setFile(selected);\n    },\n    [],\n  );\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      if (submitting) return;\n      setSubmitting(true);\n\n      try {\n        // Required fields\n        if (!file || !title || !documentType) {\n          alert(\"Title, file, and document type are required.\");\n          return;\n        }\n\n        // Optional: check unique reference code\n        if (referenceCode.trim()) {\n          const { data: existing, error: checkError } = await supabase\n            .from(\"documents\")\n            .select(\"id\")\n            .eq(\"reference_code\", referenceCode.trim());\n          if (checkError) {\n            alert(\"Error checking reference code.\");\n            return;\n          }\n          if (existing && existing.length > 0) {\n            alert(\"A document with this reference code already exists.\");\n            return;\n          }\n        }\n\n        // Upload file\n        const safeName = file.name.replace(/\\s+/g, \"_\");\n        const filePath = `${Date.now()}_${safeName}`;\n        const { error: uploadError } = await supabase.storage\n          .from(\"documents\")\n          .upload(filePath, file);\n        if (uploadError) {\n          alert(\"File upload failed.\");\n          return;\n        }\n\n        const urlResult = supabase.storage\n          .from(\"documents\")\n          .getPublicUrl(filePath);\n        const publicUrl = urlResult.data.publicUrl;\n        if (!publicUrl) {\n          alert(\"Failed to get public URL for uploaded file.\");\n          return;\n        }\n\n        // Create document\n        const { data: newDoc, error: docError } = await supabase\n          .from(\"documents\")\n          .insert({\n            title,\n            reference_code: referenceCode || null,\n            file_url: publicUrl,\n            document_type: documentType,\n            section_id: sectionId || null,\n            current_version: 1,\n            review_period_months: 12,\n            last_reviewed_at: new Date().toISOString(),\n            created_by: null,\n          })\n          .select()\n          .single();\n\n        if (docError || !newDoc) {\n          alert(\"Failed to create document.\");\n          return;\n        }\n\n        // Create version 1\n        const { error: versionError } = await supabase\n          .from(\"document_versions\")\n          .insert({\n            document_id: newDoc.id,\n            version_number: 1,\n            file_url: publicUrl,\n            notes: notes || null,\n          });\n        if (versionError) {\n          alert(\"Failed to save version 1.\");\n          return;\n        }\n\n        setCreatedDocId(newDoc.id);\n\n        // Stage 2: attach to a training module?\n        const { data: modules } = await supabase\n          .from(\"modules\")\n          .select(\"id, name\");\n        setModulesList(modules || []);\n        setShowModuleAttach(true);\n      } catch {\n        alert(\"Unexpected error while saving the document.\");\n      } finally {\n        setSubmitting(false);\n      }\n    },\n    [documentType, file, notes, referenceCode, sectionId, submitting, title],\n  );\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <main className=\"add-document-main\">\n          <div className=\"add-document-header\">\n            <span className=\"add-document-title\">Title: {title || \"‚Äî\"}</span>\n            <span className=\"add-document-ref\">\n              Ref Code: {referenceCode || \"‚Äî\"}\n            </span>\n          </div>\n\n          <div className=\"add-document-header-spacer\" />\n\n          {!showModuleAttach ? (\n            <NeonForm\n              title=\"Add New Document\"\n              onSubmit={handleSubmit}\n              submitLabel={submitting ? \"Saving‚Ä¶\" : \"Save Document\"}\n            >\n              {/* Title */}\n              <div className=\"neon-form-row\">\n                <label htmlFor=\"doc-title\" className=\"neon-label\">\n                  Title *\n                </label>\n                <input\n                  id=\"doc-title\"\n                  type=\"text\"\n                  className=\"neon-input\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                />\n              </div>\n              {/* Reference Code */}\n              <div className=\"neon-form-row\">\n                <label htmlFor=\"doc-ref\" className=\"neon-label\">\n                  Reference Code\n                </label>\n                <input\n                  id=\"doc-ref\"\n                  type=\"text\"\n                  className=\"neon-input\"\n                  value={referenceCode}\n                  onChange={(e) => setReferenceCode(e.target.value)}\n                />\n              </div>\n              {/* Document Type */}\n              <div className=\"neon-form-row\">\n                <label htmlFor=\"doc-type\" className=\"neon-label\">\n                  Document Type *\n                </label>\n                <select\n                  id=\"doc-type\"\n                  value={documentType}\n                  onChange={(e) =>\n                    setDocumentType(e.target.value as typeof documentType)\n                  }\n                  className=\"neon-input\"\n                  required\n                >\n                  <option value=\"\">Select document type</option>\n                  <option value=\"policy\">Policy</option>\n                  <option value=\"ssow\">Safe System of Work (SSOW)</option>\n                  <option value=\"work_instruction\">Work Instruction</option>\n                </select>\n              </div>\n              {/* Standard + Section */}\n              <div className=\"neon-form-row\">\n                <div className=\"neon-form-col\">\n                  <label htmlFor=\"doc-standard\" className=\"neon-label\">\n                    Standard *\n                  </label>\n                  <select\n                    id=\"doc-standard\"\n                    value={standardId}\n                    onChange={(e) => {\n                      setStandardId(e.target.value);\n                      setSectionId(\"\");\n                    }}\n                    className=\"neon-input\"\n                    required\n                  >\n                    <option value=\"\">Select standard</option>\n                    {standards.map((s) => (\n                      <option key={s.id} value={s.id}>\n                        {s.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className=\"neon-form-col\">\n                  <label htmlFor=\"doc-section\" className=\"neon-label\">\n                    Section\n                  </label>\n                  <select\n                    id=\"doc-section\"\n                    value={sectionId}\n                    onChange={(e) => setSectionId(e.target.value)}\n                    className=\"neon-input\"\n                    disabled={!standardId}\n                  >\n                    <option value=\"\">Select section</option>\n                    {sections.map((sec) => (\n                      <option key={sec.id} value={sec.id}>\n                        {sec.code} ‚Äì {sec.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n              {/* File Upload */}\n              <div className=\"neon-form-row\">\n                <label htmlFor=\"doc-file\" className=\"neon-label\">\n                  Upload File (PDF) *\n                </label>\n                <input\n                  id=\"doc-file\"\n                  type=\"file\"\n                  accept=\"application/pdf,.pdf\"\n                  className=\"neon-input\"\n                  onChange={handleFileChange}\n                  required\n                />\n              </div>\n              {/* Version Notes */}\n              <div className=\"neon-form-row\">\n                <label htmlFor=\"doc-notes\" className=\"neon-label\">\n                  Version Notes\n                </label>\n                <textarea\n                  id=\"doc-notes\"\n                  className=\"neon-input\"\n                  rows={3}\n                  value={notes}\n                  onChange={(e) => setNotes(e.target.value)}\n                />\n              </div>\n            </NeonForm>\n          ) : (\n            <Modal\n              open={showModuleAttach}\n              onClose={() => {\n                setShowModuleAttach(false);\n                setShowModuleSelector(false);\n                router.push(\"/admin/documents\");\n              }}\n            >\n              <NeonForm\n                title=\"Attach Document to Training Module\"\n                onSubmit={(e) => e.preventDefault()}\n                submitLabel=\"Finish\"\n              >\n                <h2 className=\"neon-form-title\">\n                  Would you like to attach this document to a training module?\n                </h2>\n                <div className=\"flex gap-3 mt-4\">\n                  <button\n                    className=\"neon-btn neon-btn-danger\"\n                    type=\"button\"\n                    onClick={() => {\n                      setShowModuleAttach(false);\n                      setShowModuleSelector(false);\n                      router.push(\"/admin/documents\");\n                    }}\n                  >\n                    No, finish\n                  </button>\n                  <button\n                    className=\"neon-btn neon-btn-accent\"\n                    type=\"button\"\n                    onClick={() => setShowModuleSelector(true)}\n                  >\n                    Yes, attach\n                  </button>\n                </div>\n                {showModuleSelector &&\n                  (!addingNewModule ? (\n                    <div className=\"mt-6\">\n                      <label className=\"neon-label\">\n                        Select Existing Module\n                      </label>\n                      <select\n                        className=\"neon-input\"\n                        value={selectedModuleId}\n                        onChange={(e) => setSelectedModuleId(e.target.value)}\n                      >\n                        <option value=\"\">Choose a module...</option>\n                        {modulesList.map((m) => (\n                          <option key={m.id} value={m.id}>\n                            {m.name}\n                          </option>\n                        ))}\n                      </select>\n                      <div className=\"flex gap-3 mt-4\">\n                        <button\n                          className=\"neon-btn neon-btn-add\"\n                          type=\"button\"\n                          onClick={() => setAddingNewModule(true)}\n                        >\n                          Add New Module\n                        </button>\n                        <button\n                          className=\"neon-btn neon-btn-save\"\n                          type=\"button\"\n                          onClick={async () => {\n                            if (!selectedModuleId)\n                              return alert(\"Select a module first.\");\n                            if (!createdDocId)\n                              return alert(\"Document not found.\");\n                            await supabase\n                              .from(\"module_documents\")\n                              .insert({\n                                module_id: selectedModuleId,\n                                document_id: createdDocId,\n                              });\n                            router.push(\"/admin/documents\");\n                          }}\n                        >\n                          Attach to Selected Module\n                        </button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"mt-6\">\n                      <label className=\"neon-label\">New Module Name</label>\n                      <input\n                        type=\"text\"\n                        className=\"neon-input\"\n                        value={newModuleName}\n                        onChange={(e) => setNewModuleName(e.target.value)}\n                      />\n                      <div className=\"flex gap-3 mt-4\">\n                        <button\n                          className=\"neon-btn neon-btn-save\"\n                          type=\"button\"\n                          onClick={async () => {\n                            if (!newModuleName.trim())\n                              return alert(\"Enter a module name.\");\n                            if (!createdDocId)\n                              return alert(\"Document not found.\");\n                            const { data: module, error } = await supabase\n                              .from(\"modules\")\n                              .insert({ name: newModuleName })\n                              .select()\n                              .single();\n                            if (error || !module) {\n                              alert(\"Failed to create module.\");\n                              return;\n                            }\n                            await supabase\n                              .from(\"module_documents\")\n                              .insert({\n                                module_id: module.id,\n                                document_id: createdDocId,\n                              });\n                            router.push(\"/admin/documents\");\n                          }}\n                        >\n                          Create & Attach\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n              </NeonForm>\n            </Modal>\n          )}\n\n          <div className=\"add-document-footer-spacer\" />\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/documents/archived/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1090,1090],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1090,1090],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport { FiFileText, FiClipboard, FiBookOpen } from \"react-icons/fi\";\n\ntype ArchivedDocument = {\n  id: string;\n  document_id: string;\n  title: string;\n  archived_version: string;\n  file_url: string;\n  document_type: string;\n  change_date: string;\n  archived_by_auth_id: string;\n};\n\nexport default function ArchivedDocumentsPage() {\n  const [archivedDocs, setArchivedDocs] = useState<ArchivedDocument[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchArchived = async () => {\n      const { data, error } = await supabase\n        .from(\"document_archive\")\n        .select(\n          \"id, document_id, title, archived_version, file_url, document_type, change_date, archived_by_auth_id\",\n        )\n        .order(\"change_date\", { ascending: false });\n      if (error) {\n        setArchivedDocs([]);\n      } else {\n        setArchivedDocs(data || []);\n      }\n      setLoading(false);\n    };\n    fetchArchived();\n  }, []);\n\n  return (\n    <main className=\"archived-documents-main\">\n      <div className=\"archived-documents-header\">\n        <h1 className=\"archived-documents-title\">Archived Documents</h1>\n        <p className=\"archived-documents-subtitle\">\n          View all archived document versions\n        </p>\n      </div>\n      <div className=\"archived-documents-header-spacer\" />\n      <div className=\"archived-documents-content\">\n        <button\n          onClick={() => window.history.back()}\n          className=\"archived-documents-back-btn\"\n        >\n          {/* Use a semantic/global class for the icon if needed */}\n          <span className=\"archived-documents-back-icon\" />\n          <span>Back</span>\n        </button>\n        {loading ? (\n          <p className=\"archived-documents-loading\">Loading...</p>\n        ) : (\n          <NeonTable\n            columns={[\n              { header: \"Title\", accessor: \"title\" },\n              { header: \"Type\", accessor: \"document_type\" },\n              { header: \"Version\", accessor: \"archived_version\" },\n              { header: \"Date Archived\", accessor: \"change_date\" },\n              { header: \"Archived By\", accessor: \"archived_by_auth_id\" },\n              { header: \"File\", accessor: \"file_url\" },\n            ]}\n            data={archivedDocs.map((doc) => {\n              let typeIcon = null;\n              if (doc.document_type === \"policy\")\n                typeIcon = <FiFileText title=\"Policy\" size={18} />;\n              else if (doc.document_type === \"ssow\")\n                typeIcon = <FiClipboard title=\"SSOW\" size={18} />;\n              else if (doc.document_type === \"work_instruction\")\n                typeIcon = <FiBookOpen title=\"Work Instruction\" size={18} />;\n              return {\n                title: doc.title,\n                document_type: (\n                  <div className=\"archived-documents-type-cell\">{typeIcon}</div>\n                ),\n                archived_version: doc.archived_version,\n                change_date: doc.change_date\n                  ? new Date(doc.change_date).toLocaleString(\"en-GB\")\n                  : \"‚Äî\",\n                archived_by_auth_id: doc.archived_by_auth_id || \"‚Äî\",\n                file_url: doc.file_url ? (\n                  <a\n                    href={doc.file_url}\n                    rel=\"noopener noreferrer\"\n                    className=\"archived-documents-file-link\"\n                  >\n                    View PDF\n                  </a>\n                ) : (\n                  \"‚Äî\"\n                ),\n              };\n            })}\n          />\n        )}\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/documents/edit/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":52,"column":21,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":52,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<DocumentType | null>`.","line":62,"column":19,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":62,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":63,"column":16,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":63,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":64,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":64,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reference_code on an `any` value.","line":64,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":65,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":65,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .document_type on an `any` value.","line":65,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .section_id on an `any` value.","line":80,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":83,"column":24,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":83,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":84,"column":25,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":84,"endColumn":51},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":91,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":91,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2858,2858],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2858,2858],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":203,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":203,"endColumn":36,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6435,6435],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6435,6435],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonForm from \"@/components/NeonForm\";\nimport { useUser } from \"@/lib/useUser\";\nimport Modal from \"@/components/modal\";\n\ntype Standard = { id: string; name: string };\ntype Section = { id: string; code: string; title: string; standard_id: string };\ntype DocumentType = {\n  id: string;\n  title: string;\n  reference_code?: string;\n  document_type: string;\n  section_id?: string;\n  file_url?: string;\n  notes?: string;\n  standard_id?: string;\n  current_version?: number;\n};\n\nexport default function EditDocumentPage() {\n  const { id } = useParams<{ id: string }>();\n  const router = useRouter();\n  const { user } = useUser();\n\n  const [loading, setLoading] = useState(true);\n  const [document, setDocument] = useState<DocumentType | null>(null);\n  const [title, setTitle] = useState(\"\");\n  const [referenceCode, setReferenceCode] = useState(\"\");\n  const [documentType, setDocumentType] = useState(\"\");\n  const [standardId, setStandardId] = useState(\"\");\n  const [sectionId, setSectionId] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [file, setFile] = useState<File | null>(null);\n\n  const [standards, setStandards] = useState<Standard[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n\n  // Add state for version confirmation modal\n  const [showVersionModal, setShowVersionModal] = useState(false);\n  const [pendingVersion, setPendingVersion] = useState<number | null>(null);\n  const [pendingEditData, setPendingEditData] = useState<DocumentType | null>(\n    null,\n  );\n  const [versionErrorMsg, setVersionErrorMsg] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: doc, error } = await supabase\n        .from(\"documents\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n      if (error) {\n        console.error(\"Error fetching document:\", error);\n        return;\n      }\n\n      setDocument(doc);\n      setTitle(doc.title);\n      setReferenceCode(doc.reference_code || \"\");\n      setDocumentType(doc.document_type || \"\");\n\n      const { data: stds } = await supabase\n        .from(\"document_standard\")\n        .select(\"id, name\");\n      setStandards(stds || []);\n\n      const { data: sectionData, error: secErr } = await supabase\n        .from(\"standard_sections\")\n        .select(\"id, code, title, standard_id\");\n\n      if (secErr) console.error(secErr);\n      else {\n        setSections(sectionData || []);\n        const currentSection = sectionData?.find(\n          (s) => s.id === doc.section_id,\n        );\n        if (currentSection) {\n          setSectionId(currentSection.id);\n          setStandardId(currentSection.standard_id);\n        }\n      }\n\n      setLoading(false);\n    };\n\n    fetchData();\n  }, [id]);\n\n  // Function to handle edit submit\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title || !documentType) {\n      alert(\"Title and type are required.\");\n      return;\n    }\n    // Prepare edit data\n    const editData: DocumentType = {\n      id: document?.id || \"\",\n      title,\n      reference_code: referenceCode || \"\",\n      document_type: documentType,\n      section_id: sectionId || \"\",\n      file_url: document?.file_url || \"\",\n      notes,\n      standard_id: standardId || \"\",\n      // current_version will be set in confirmVersionChange\n    };\n    // Use latest current_version from state\n    const currentVersion = document?.current_version ?? 0;\n    const nextVersion = currentVersion + 1;\n    setPendingVersion(nextVersion);\n    setPendingEditData({ ...editData, current_version: currentVersion });\n    setShowVersionModal(true);\n    setVersionErrorMsg(\"\");\n  };\n\n  const confirmVersionChange = async () => {\n    if (!pendingEditData) return;\n    let fileUrl = pendingEditData.file_url;\n    const newVersion = pendingVersion;\n    // Handle file upload if needed\n    if (file) {\n      if (!user?.auth_id) {\n        alert(\"Cannot archive: user not loaded. Please refresh and try again.\");\n        return;\n      }\n      const filePath = `${Date.now()}_${file.name}`;\n      const { error: uploadError } = await supabase.storage\n        .from(\"documents\")\n        .upload(filePath, file);\n      if (uploadError) {\n        alert(\"File upload failed.\");\n        console.error(\"Upload error:\", uploadError);\n        return;\n      }\n      fileUrl = supabase.storage.from(\"documents\").getPublicUrl(filePath)\n        .data.publicUrl;\n      // Archive current version\n      const { error: archiveError } = await supabase\n        .from(\"document_archive\")\n        .insert({\n          document_id: document?.id,\n          archived_version: document?.current_version,\n          title: document?.title,\n          reference_code: document?.reference_code,\n          file_url: document?.file_url,\n          document_type: document?.document_type,\n          notes: notes || null,\n          change_summary: \"Manual update via edit form\",\n          change_date: new Date().toISOString(),\n          archived_by_auth_id: user.auth_id,\n        });\n      if (archiveError) {\n        alert(\"Failed to archive current document.\");\n        console.error(\"Archive insert error:\", archiveError);\n        return;\n      }\n    }\n    const now = new Date().toISOString();\n    const { error: updateError } = await supabase\n      .from(\"documents\")\n      .update({\n        ...pendingEditData,\n        file_url: fileUrl,\n        current_version: newVersion,\n        last_updated_at: now,\n        last_reviewed_at: now,\n      })\n      .eq(\"id\", document?.id);\n    if (updateError) {\n      setVersionErrorMsg(\"Failed to update document: \" + updateError.message);\n      return;\n    }\n    setShowVersionModal(false);\n    setPendingVersion(null);\n    setPendingEditData(null);\n    alert(\"Document updated to version \" + newVersion);\n    router.push(\"/admin/documents\");\n  };\n\n  if (loading) return <p className=\"text-gray-600 m-0 p-0\">Loading...</p>;\n\n  return (\n    <>\n      {/* Version Confirmation Modal */}\n      <Modal\n        open={showVersionModal}\n        onClose={() => {\n          setShowVersionModal(false);\n          setPendingVersion(null);\n          setPendingEditData(null);\n        }}\n      >\n        <NeonForm\n          title={`Confirm Version Change`}\n          onSubmit={(e) => {\n            e.preventDefault();\n            confirmVersionChange();\n          }}\n          submitLabel=\"Confirm\"\n          onCancel={() => {\n            setShowVersionModal(false);\n            setPendingVersion(null);\n            setPendingEditData(null);\n          }}\n        >\n          <p className=\"neon-form-message\">\n            You are about to update this document to version{\" \"}\n            <span className=\"neon-form-number\">{pendingVersion}</span>.\n            Continue?\n          </p>\n          {versionErrorMsg && (\n            <p className=\"danger-text mb-2\">{versionErrorMsg}</p>\n          )}\n        </NeonForm>\n      </Modal>\n      <main className=\"edit-document-main\">\n        <NeonForm\n          title=\"Edit Document\"\n          onSubmit={handleEditSubmit}\n          submitLabel=\"Save Changes\"\n        >\n          <div>\n            <label className=\"neon-label\">Title *</label>\n            <input\n              type=\"text\"\n              className=\"neon-input\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n          </div>\n          <div>\n            <label className=\"neon-label\">Reference Code</label>\n            <input\n              type=\"text\"\n              className=\"neon-input\"\n              value={referenceCode}\n              onChange={(e) => setReferenceCode(e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"neon-label\">Document Type *</label>\n            <select\n              className=\"neon-input\"\n              value={documentType}\n              onChange={(e) => setDocumentType(e.target.value)}\n              required\n            >\n              <option value=\"\">Select type</option>\n              <option value=\"policy\">Policy</option>\n              <option value=\"ssow\">Safe System of Work (SSOW)</option>\n              <option value=\"work_instruction\">Work Instruction</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"neon-label\">Version Number</label>\n            <input\n              type=\"number\"\n              className=\"neon-input\"\n              value={document?.current_version ?? \"\"}\n              readOnly\n            />\n          </div>\n          <div className=\"neon-form-row\">\n            <div className=\"neon-form-col\">\n              <label className=\"neon-label\">Standard *</label>\n              <select\n                className=\"neon-input\"\n                value={standardId}\n                onChange={(e) => {\n                  setStandardId(e.target.value);\n                  setSectionId(\"\");\n                }}\n                required\n              >\n                <option value=\"\">Select standard</option>\n                {standards.map((std) => (\n                  <option key={std.id} value={std.id}>\n                    {std.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"neon-form-col\">\n              <label className=\"neon-label\">Section</label>\n              <select\n                className=\"neon-input\"\n                value={sectionId}\n                onChange={(e) => setSectionId(e.target.value)}\n                disabled={!standardId}\n              >\n                <option value=\"\">Select section</option>\n                {sections\n                  .filter((s) => s.standard_id === standardId)\n                  .map((s) => (\n                    <option key={s.id} value={s.id}>\n                      {s.code} ‚Äì {s.title}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          </div>\n          <div>\n            <label className=\"neon-label\">Upload New File (optional)</label>\n            <input\n              type=\"file\"\n              accept=\".pdf\"\n              className=\"neon-input\"\n              onChange={(e) => setFile(e.target.files?.[0] || null)}\n            />\n          </div>\n          {file && (\n            <div>\n              <label className=\"neon-label\">Version Notes</label>\n              <textarea\n                className=\"neon-input\"\n                rows={3}\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n              />\n            </div>\n          )}\n        </NeonForm>\n      </main>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/documents/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/incomplete/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":47,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":167,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1313,1313],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1313,1313],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":87,"column":67,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":87,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":92,"column":69,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":92,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":135,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":137,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":138,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":142,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .departments on an `any` value.","line":138,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .departments on an `any` value.","line":139,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .departments on an `any` value.","line":140,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .departments on an `any` value.","line":141,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":143,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role on an `any` value.","line":143,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .first_name on an `any` value.","line":155,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":156,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":156,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .last_name on an `any` value.","line":156,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":157,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":157,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":158,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":158,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":158,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":158,"endColumn":30}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport { FiSearch, FiUsers, FiLayers, FiBookOpen } from \"react-icons/fi\";\n\ninterface IncompleteRecord {\n  auth_id: string;\n  first_name: string;\n  last_name: string;\n  department: string;\n  role: string;\n  module: string;\n  document: string;\n}\n\ntype Module = { id: string; name: string };\ntype Document = { id: string; title?: string; name?: string };\ntype IncompleteRow = {\n  auth_id: string;\n  item_id: string;\n  item_type: string;\n  completed_at?: string;\n  users?: {\n    first_name?: string;\n    last_name?: string;\n    department_id?: string;\n    departments?: { name?: string }[];\n    role_id?: string;\n    role?: { title?: string }[];\n  };\n};\n\nexport default function IncompleteTrainingPage() {\n  const [data, setData] = useState<IncompleteRecord[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [selectedDept, setSelectedDept] = useState(\"All\");\n  const [selectedRole, setSelectedRole] = useState(\"All\");\n  const [selectedModule, setSelectedModule] = useState(\"All\");\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    (async () => {\n      setLoading(true);\n      setError(null);\n\n      // 1) Incomplete assignments\n      const { data: ua, error: uaErr } = await supabase\n        .from(\"user_assignments\")\n        .select(\n          `\n          auth_id,\n          item_id,\n          item_type,\n          completed_at,\n          users:users!inner(\n            first_name,\n            last_name,\n            department_id,\n            departments(name),\n            role_id,\n            role:roles!users_role_id_fkey(title)\n          )\n        `,\n        )\n        .in(\"item_type\", [\"module\", \"document\"])\n        .is(\"completed_at\", null);\n\n      if (!isMounted) return;\n\n      if (uaErr) {\n        console.error(\"Error fetching incomplete training:\", uaErr);\n        setError(uaErr.message);\n        setLoading(false);\n        return;\n      }\n\n      const rows = ua ?? [];\n\n      // 2) Collect IDs for name lookups\n      const moduleIds = Array.from(\n        new Set(\n          rows.filter((r) => r.item_type === \"module\").map((r) => r.item_id),\n        ),\n      );\n      const documentIds = Array.from(\n        new Set(\n          rows.filter((r) => r.item_type === \"document\").map((r) => r.item_id),\n        ),\n      );\n\n      // 3) Fetch module/document names\n      const [modsRes, docsRes] = await Promise.all([\n        moduleIds.length\n          ? supabase.from(\"modules\").select(\"id, name\").in(\"id\", moduleIds)\n          : Promise.resolve({ data: [], error: null } as {\n              data: Module[];\n              error: null;\n            }),\n        documentIds.length\n          ? supabase\n              .from(\"documents\")\n              .select(\"id, title, name\")\n              .in(\"id\", documentIds)\n          : Promise.resolve({ data: [], error: null } as {\n              data: Document[];\n              error: null;\n            }),\n      ]);\n\n      const modNameById = new Map<string, string>(\n        (modsRes.data ?? []).map((m: Module) => [m.id, m.name]),\n      );\n      const docNameById = new Map<string, string>(\n        (docsRes.data ?? []).map(\n          (d: Document) =>\n            [\n              d.id,\n              typeof d.title === \"string\"\n                ? d.title\n                : typeof d.name === \"string\"\n                  ? d.name\n                  : \"\",\n            ] as [string, string],\n        ),\n      );\n\n      // 4) Normalize to UI rows\n      const results: IncompleteRecord[] = (rows as IncompleteRow[]).map(\n        (item) => {\n          const user = Array.isArray(item.users)\n            ? item.users[0]\n            : (item.users ?? {});\n          const dep = user?.departments\n            ? Array.isArray(user.departments)\n              ? user.departments[0]\n              : user.departments\n            : {};\n          const role = user?.role ?? {};\n\n          const isModule = item.item_type === \"module\";\n          const moduleName = isModule\n            ? (modNameById.get(item.item_id) ?? item.item_id)\n            : \"‚Äî\";\n          const documentName = !isModule\n            ? (docNameById.get(item.item_id) ?? item.item_id)\n            : \"‚Äî\";\n\n          return {\n            auth_id: item.auth_id,\n            first_name: user?.first_name ?? \"\",\n            last_name: user?.last_name ?? \"\",\n            department: dep?.name ?? \"‚Äî\",\n            role: role?.title ?? \"‚Äî\",\n            module: moduleName,\n            document: documentName,\n          };\n        },\n      );\n\n      setData(results);\n      setLoading(false);\n    })();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  // Facets\n  const departments = useMemo(() => {\n    const set = new Set<string>();\n    for (const r of data)\n      if (r.department && r.department !== \"‚Äî\") set.add(r.department);\n    return Array.from(set).sort();\n  }, [data]);\n\n  const allRoles = useMemo(() => {\n    const set = new Set<string>();\n    for (const r of data) if (r.role && r.role !== \"‚Äî\") set.add(r.role);\n    return Array.from(set).sort();\n  }, [data]);\n\n  const allModules = useMemo(() => {\n    const set = new Set<string>();\n    for (const r of data) if (r.module && r.module !== \"‚Äî\") set.add(r.module);\n    return Array.from(set).sort();\n  }, [data]);\n\n  const rolesForCurrentDept = useMemo(() => {\n    if (selectedDept === \"All\") return allRoles;\n    const set = new Set<string>();\n    for (const r of data) {\n      if (r.department === selectedDept && r.role && r.role !== \"‚Äî\")\n        set.add(r.role);\n    }\n    return Array.from(set).sort();\n  }, [data, allRoles, selectedDept]);\n\n  const filtered = useMemo(() => {\n    let list = data;\n    if (selectedDept !== \"All\")\n      list = list.filter((r) => r.department === selectedDept);\n    if (selectedRole !== \"All\")\n      list = list.filter((r) => r.role === selectedRole);\n    if (selectedModule !== \"All\")\n      list = list.filter((r) => r.module === selectedModule);\n    if (search.trim()) {\n      const s = search.toLowerCase();\n      list = list.filter(\n        (r) =>\n          r.first_name.toLowerCase().includes(s) ||\n          r.last_name.toLowerCase().includes(s),\n      );\n    }\n    return list;\n  }, [data, search, selectedDept, selectedRole, selectedModule]);\n\n  const tableData = useMemo(\n    () =>\n      filtered.map((rec) => ({\n        user: `${rec.first_name} ${rec.last_name}`.trim(),\n        department: rec.department,\n        role: rec.role,\n        module: rec.module,\n        document: rec.document,\n      })),\n    [filtered],\n  );\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <main className=\"page-main\">\n          <div className=\"neon-panel\">\n            <div className=\"neon-panel-content\">\n              {/* Filters */}\n              <div className=\"neon-form-row\">\n                <div className=\"neon-form-group\">\n                  <FiSearch className=\"neon-form-icon\" />\n                  <input\n                    type=\"search\"\n                    placeholder=\"Search users...\"\n                    value={search}\n                    onChange={(e) => setSearch(e.target.value)}\n                    className=\"neon-input\"\n                  />\n                </div>\n\n                <div className=\"neon-form-group\">\n                  <FiUsers className=\"neon-form-icon\" />\n                  <select\n                    value={selectedDept}\n                    onChange={(e) => {\n                      setSelectedDept(e.target.value);\n                      setSelectedRole(\"All\");\n                    }}\n                    className=\"neon-input\"\n                  >\n                    <option value=\"All\">All Departments</option>\n                    {departments.map((d) => (\n                      <option key={d} value={d}>\n                        {d}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"neon-form-group\">\n                  <FiLayers className=\"neon-form-icon\" />\n                  <select\n                    value={selectedRole}\n                    onChange={(e) => setSelectedRole(e.target.value)}\n                    className=\"neon-input\"\n                  >\n                    <option value=\"All\">All Roles</option>\n                    {rolesForCurrentDept.map((r) => (\n                      <option key={r} value={r}>\n                        {r}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"neon-form-group\">\n                  <FiBookOpen className=\"neon-form-icon\" />\n                  <select\n                    value={selectedModule}\n                    onChange={(e) => setSelectedModule(e.target.value)}\n                    className=\"neon-input\"\n                  >\n                    <option value=\"All\">All Modules</option>\n                    {allModules.map((m) => (\n                      <option key={m} value={m}>\n                        {m}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              {/* Errors / Loading / Table */}\n              {error && (\n                <p className=\"text-red-500 text-sm mt-2\">\n                  Failed to load incomplete training: {error}\n                </p>\n              )}\n\n              {loading ? (\n                <div className=\"neon-table-wrapper\">\n                  <div className=\"p-6 text-sm opacity-80\">Loading‚Ä¶</div>\n                </div>\n              ) : (\n                <div className=\"neon-table-wrapper\">\n                  <NeonTable\n                    columns={[\n                      { header: \"User\", accessor: \"user\" },\n                      { header: \"Department\", accessor: \"department\" },\n                      { header: \"Role\", accessor: \"role\" },\n                      { header: \"Module\", accessor: \"module\" },\n                      { header: \"Document\", accessor: \"document\" },\n                    ]}\n                    data={tableData}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/modules/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":33,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Module | null>`.","line":43,"column":17,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":43,"endColumn":21},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":46,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":46,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1226,1226],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1226,1226],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\ninterface Module {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  is_archived: boolean;\n  group_id: string;\n  learning_objectives?: string;\n  estimated_duration?: string;\n  delivery_format?: string;\n  target_audience?: string;\n  prerequisites?: string[];\n  tags?: string[];\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport default function ModuleViewPage() {\n  const { id } = useParams<{ id: string }>();\n  const router = useRouter();\n  const [module, setModule] = useState<Module | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchModule = async () => {\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n      if (error || !data) {\n        setError(\"Module not found\");\n        setLoading(false);\n        return;\n      }\n      setModule(data);\n      setLoading(false);\n    };\n    if (id) fetchModule();\n  }, [id]);\n\n  if (loading) return <p className=\"neon-loading\">Loading module...</p>;\n  if (error) return <p className=\"neon-error\">{error}</p>;\n  if (!module) return null;\n\n  return (\n    <div className=\"admin-module-view-container\">\n      <NeonPanel className=\"admin-module-panel\">\n        <h1 className=\"admin-module-title\">{module.name}</h1>\n        <p className=\"admin-module-description\">{module.description}</p>\n        <div className=\"admin-module-meta\">\n          Version:{\" \"}\n          <span className=\"admin-module-meta-value\">{module.version}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Status:{\" \"}\n          <span className=\"admin-module-meta-value\">\n            {module.is_archived ? \"Archived\" : \"Active\"}\n          </span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Group ID:{\" \"}\n          <span className=\"admin-module-meta-mono\">{module.group_id}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Learning Objectives: <span>{module.learning_objectives || \"‚Äî\"}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Estimated Duration: <span>{module.estimated_duration || \"‚Äî\"}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Delivery Format: <span>{module.delivery_format || \"‚Äî\"}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Target Audience: <span>{module.target_audience || \"‚Äî\"}</span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Prerequisites:{\" \"}\n          <span>\n            {module.prerequisites && module.prerequisites.length > 0\n              ? module.prerequisites.join(\", \")\n              : \"‚Äî\"}\n          </span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Tags:{\" \"}\n          <span>\n            {module.tags && module.tags.length > 0\n              ? module.tags.join(\", \")\n              : \"‚Äî\"}\n          </span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Created At:{\" \"}\n          <span>\n            {module.created_at\n              ? new Date(module.created_at).toLocaleString()\n              : \"‚Äî\"}\n          </span>\n        </div>\n        <div className=\"admin-module-meta\">\n          Updated At:{\" \"}\n          <span>\n            {module.updated_at\n              ? new Date(module.updated_at).toLocaleString()\n              : \"‚Äî\"}\n          </span>\n        </div>\n        <button\n          onClick={() => router.push(`/admin/modules/edit/${module.id}`)}\n          className=\"neon-btn neon-btn-edit\"\n          data-variant=\"edit\"\n        >\n          Edit Module\n        </button>\n        <button\n          onClick={() => router.push(\"/admin/modules\")}\n          className=\"neon-btn neon-btn-cancel ml-4\"\n          data-variant=\"cancel\"\n        >\n          Cancel\n        </button>\n        <button\n          onClick={() => router.push(`/admin/modules/archive/${module.id}`)}\n          className=\"neon-btn neon-btn-archive ml-4\"\n          data-variant=\"archive\"\n        >\n          Archive\n        </button>\n      </NeonPanel>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/modules/add/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/modules/edit/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":31,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":31,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":41,"column":15,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":41,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":41,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":41,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":42,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":42,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":42,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<number>`.","line":43,"column":18,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":43,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version on an `any` value.","line":43,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":43,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":44,"column":18,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":44,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .group_id on an `any` value.","line":44,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":44,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":45,"column":29,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":45,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .learning_objectives on an `any` value.","line":45,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":46,"column":28,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":46,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_duration on an `any` value.","line":46,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":47,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":47,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delivery_format on an `any` value.","line":47,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":48,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":48,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_audience on an `any` value.","line":48,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string[]>`.","line":49,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":49,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .prerequisites on an `any` value.","line":49,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":50,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":50,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .thumbnail_url on an `any` value.","line":50,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":41},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":53,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":53,"endColumn":27,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2005,2005],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2005,2005],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleSubmit' has no 'await' expression.","line":56,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":56,"endColumn":53,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2056,2062],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter, useParams } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonModuleForm, {\n  NeonModuleFormField,\n} from \"@/components/NeonModuleForm\";\n\nexport default function EditModulePage() {\n  const router = useRouter();\n  const { id } = useParams<{ id: string }>();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [showVersionModal, setShowVersionModal] = useState(false);\n\n  // Form state\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [version, setVersion] = useState(1);\n  const [groupId, setGroupId] = useState(\"\");\n  const [learningObjectives, setLearningObjectives] = useState(\"\");\n  const [estimatedDuration, setEstimatedDuration] = useState(\"\");\n  const [deliveryFormat, setDeliveryFormat] = useState(\"\");\n  const [targetAudience, setTargetAudience] = useState(\"\");\n  const [prerequisites, setPrerequisites] = useState<string[]>([]);\n  const [thumbnailUrl, setThumbnailUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchModule = async () => {\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n      if (error || !data) {\n        setError(\"Module not found\");\n        setLoading(false);\n        return;\n      }\n      setName(data.name || \"\");\n      setDescription(data.description || \"\");\n      setVersion(data.version || 1);\n      setGroupId(data.group_id || \"\");\n      setLearningObjectives(data.learning_objectives || \"\");\n      setEstimatedDuration(data.estimated_duration || \"\");\n      setDeliveryFormat(data.delivery_format || \"\");\n      setTargetAudience(data.target_audience || \"\");\n      setPrerequisites(data.prerequisites || []);\n      setThumbnailUrl(data.thumbnail_url || \"\");\n      setLoading(false);\n    };\n    if (id) fetchModule();\n  }, [id]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setShowVersionModal(true);\n  };\n\n  const handleVersionConfirm = async (isNewVersion: boolean) => {\n    setShowVersionModal(false);\n    setError(null);\n    let newVersion = version;\n    if (isNewVersion) {\n      newVersion = Number(version) + 1;\n      setVersion(newVersion);\n    }\n    const { error } = await supabase\n      .from(\"modules\")\n      .update({\n        name,\n        description,\n        version: newVersion,\n        group_id: groupId,\n        learning_objectives: learningObjectives,\n        estimated_duration: estimatedDuration,\n        delivery_format: deliveryFormat,\n        target_audience: targetAudience,\n        prerequisites,\n        thumbnail_url: thumbnailUrl,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", id);\n    if (error) {\n      setError(\"Failed to update module\");\n    } else {\n      setSuccess(true);\n      setTimeout(() => {\n        setSuccess(false);\n        router.push(\"/admin/modules\"); // Return to view tab after successful submit\n      }, 1200);\n    }\n  };\n\n  if (loading) return <p className=\"neon-loading\">Loading module...</p>;\n  if (error) return <p className=\"neon-error\">{error}</p>;\n\n  // Prepare fields for NeonModuleForm\n  const fields: NeonModuleFormField[] = [\n    {\n      key: \"name\",\n      label: \"Name\",\n      type: \"text\",\n      value: name,\n      onChange: (value) => setName(String(value)),\n      required: true,\n    },\n    {\n      key: \"description\",\n      label: \"Description\",\n      type: \"text\",\n      value: description,\n      onChange: (value) => setDescription(String(value)),\n    },\n    {\n      key: \"learningObjectives\",\n      label: \"Learning Objectives\",\n      type: \"textarea\",\n      value: learningObjectives,\n      onChange: (value) => setLearningObjectives(String(value)),\n      rows: 2,\n    },\n    {\n      key: \"groupId\",\n      label: \"Group ID\",\n      type: \"text\",\n      value: groupId,\n      onChange: (value) => setGroupId(String(value)),\n      required: true,\n    },\n    {\n      key: \"estimatedDuration\",\n      label: \"Estimated Duration\",\n      type: \"text\",\n      value: estimatedDuration,\n      onChange: (value) => setEstimatedDuration(String(value)),\n      placeholder: \"Enter duration (e.g. 1h 30m)\",\n    },\n    {\n      key: \"deliveryFormat\",\n      label: \"Delivery Format\",\n      type: \"text\",\n      value: deliveryFormat,\n      onChange: (value) => setDeliveryFormat(String(value)),\n    },\n    {\n      key: \"targetAudience\",\n      label: \"Target Audience\",\n      type: \"text\",\n      value: targetAudience,\n      onChange: (value) => setTargetAudience(String(value)),\n    },\n    {\n      key: \"thumbnailUrl\",\n      label: \"Thumbnail URL\",\n      type: \"text\",\n      value: thumbnailUrl,\n      onChange: (value) => setThumbnailUrl(String(value)),\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mt-8\">\n        <NeonModuleForm\n          title=\"Edit Module\"\n          fields={fields}\n          onSubmit={handleSubmit}\n          error={error}\n          success={success}\n        />\n      </div>\n      {showVersionModal && (\n        <div className=\"ui-dialog-overlay\">\n          <div className=\"app-modal\" style={{ maxWidth: 420 }}>\n            <h2 className=\"font-title neon-text mb-2\">\n              Is this a new version of the module?\n            </h2>\n            <p className=\"font-body mb-4\">\n              If yes, the version number will be incremented automatically.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <button\n                className=\"neon-utility-btn neon-btn-save\"\n                onClick={() => handleVersionConfirm(true)}\n                style={{ minWidth: 120 }}\n              >\n                Yes, new version\n              </button>\n              <button\n                className=\"neon-utility-btn neon-btn-edit\"\n                onClick={() => handleVersionConfirm(false)}\n                style={{ minWidth: 120 }}\n              >\n                No, keep version\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/modules/manage/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/modules/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/org-chart/page.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'ROOT_DEPT_ID' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'roleEditArchived' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":26},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setRoleEditArchived' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [role.department_id] resolves to an `any` value.","line":64,"column":22,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":64,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [role.department_id] resolves to an `any` value.","line":64,"column":51,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":64,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [role.department_id] resolves to an `any` value.","line":65,"column":17,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":65,"endColumn":35},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":70,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2335,2335],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2335,2335],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'toggleExpand' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'descendants' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":175,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":22},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":225,"column":19,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":225,"endColumn":46,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7252,7252],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7252,7252],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [r.department_id] resolves to an `any` value.","line":261,"column":40,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":261,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [r.department_id] resolves to an `any` value.","line":262,"column":37,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":262,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [r.department_id] resolves to an `any` value.","line":263,"column":35,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":263,"endColumn":50}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ROOT_DEPT_ID' is assigned a value but never used.","line":32,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'roleEditArchived' is assigned a value but never used.","line":47,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRoleEditArchived' is assigned a value but never used.","line":47,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleExpand' is assigned a value but never used.","line":74,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'descendants' is assigned a value but never used.","line":175,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiArchive,\n  FiChevronDown,\n  FiChevronRight,\n  FiEdit,\n  FiUsers,\n  FiTool,\n  FiUmbrella,\n} from \"react-icons/fi\";\nimport Link from \"next/link\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\ninterface Department {\n  id: string;\n  name: string;\n  parent_id: string | null;\n  is_archived?: boolean;\n}\n\ninterface Role {\n  id: string;\n  title: string;\n  department_id: string;\n}\n\nconst ROOT_DEPT_ID = \"00000000-0000-0000-0000-000000000000\";\n\ntype RolesByDept = Record<string, Role[]>;\ntype ExpandedMap = Record<string, boolean>;\n\nexport default function OrgChartPage() {\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [rolesByDept, setRolesByDept] = useState<RolesByDept>({});\n  const [expanded, setExpanded] = useState<ExpandedMap>({});\n  const [activeDeptId, setActiveDeptId] = useState<string | null>(null);\n  const [editingDeptId, setEditingDeptId] = useState<string | null>(null);\n  const [newParentId, setNewParentId] = useState<string | null>(null);\n  const [editingRoleId, setEditingRoleId] = useState<string | null>(null);\n  const [roleEditTitle, setRoleEditTitle] = useState(\"\");\n  const [roleEditDeptId, setRoleEditDeptId] = useState(\"\");\n  const [roleEditArchived, setRoleEditArchived] = useState(false);\n  const [deptEditName, setDeptEditName] = useState(\"\");\n  const [deptEditArchived, setDeptEditArchived] = useState(false);\n  const [showModalFor, setShowModalFor] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [{ data: deptData }, { data: roleData }] = await Promise.all([\n        supabase.from(\"departments\").select(\"id, name, parent_id, is_archived\"),\n        supabase.from(\"roles\").select(\"id, title, department_id\"),\n      ]);\n\n      console.log(\"Fetched departments:\", deptData);\n      if (deptData) setDepartments(deptData);\n\n      const grouped: RolesByDept = {};\n      for (const role of roleData || []) {\n        if (!grouped[role.department_id]) grouped[role.department_id] = [];\n        grouped[role.department_id].push(role);\n      }\n      setRolesByDept(grouped);\n    };\n\n    fetchData();\n    // Remove console.log for production\n  }, []);\n\n  const toggleExpand = (deptId: string) => {\n    setExpanded((prev) => ({ ...prev, [deptId]: !prev[deptId] }));\n  };\n\n  const setActiveAndExpand = (deptId: string, path: string[]) => {\n    setActiveDeptId(deptId);\n    // Expand the full path to the active department\n    const expandedMap: ExpandedMap = {};\n    path.forEach((_, idx) => {\n      const ancestorId = departments.find((d) => d.name === path[idx])?.id;\n      if (ancestorId) expandedMap[ancestorId] = true;\n    });\n    expandedMap[deptId] = true;\n    setExpanded(expandedMap);\n  };\n\n  const buildTree = (items: Department[]) => {\n    const tree: Record<string, Department[]> = {};\n    for (const dept of items) {\n      const parentKey = dept.parent_id === null ? \"root\" : dept.parent_id;\n      if (!tree[parentKey]) tree[parentKey] = [];\n      tree[parentKey].push(dept);\n    }\n    return tree;\n  };\n\n  const getDescendants = (\n    deptId: string,\n    tree: Record<string, Department[]>,\n    visited = new Set<string>(),\n  ) => {\n    const children = tree[deptId] || [];\n    for (const child of children) {\n      if (!visited.has(child.id)) {\n        visited.add(child.id);\n        getDescendants(child.id, tree, visited);\n      }\n    }\n    return visited;\n  };\n\n  const handleDeptEditSave = async (deptId: string) => {\n    const { error } = await supabase\n      .from(\"departments\")\n      .update({ name: deptEditName, is_archived: deptEditArchived })\n      .eq(\"id\", deptId);\n    if (!error) {\n      setEditingDeptId(null);\n      setDeptEditName(\"\");\n      setDeptEditArchived(false);\n      const { data } = await supabase\n        .from(\"departments\")\n        .select(\"id, name, parent_id, is_archived\");\n      if (data) setDepartments(data);\n    }\n  };\n\n  const handleDeptArchive = async (deptId: string) => {\n    const { error } = await supabase\n      .from(\"departments\")\n      .update({ is_archived: true })\n      .eq(\"id\", deptId);\n    if (!error) {\n      setDepartments(\n        departments.map((d) =>\n          d.id === deptId ? { ...d, is_archived: true } : d,\n        ),\n      );\n    }\n  };\n\n  const tree = buildTree(departments);\n  console.log(\"Org chart tree keys:\", Object.keys(tree));\n  console.log(\"Org chart tree:\", tree);\n\n  const renderBranch = (parentId: string, level = 0, path: string[] = []) => {\n    const children = tree[parentId] || [];\n    if (children.length === 0) {\n      return (\n        <div className=\"text-gray-500 text-xs ml-4\">\n          No departments found for key: {parentId}. Available keys:{\" \"}\n          {Object.keys(tree).join(\", \")}\n        </div>\n      );\n    }\n    return children.map((dept) => (\n      <DeptNode key={dept.id} dept={dept} level={level} path={path} />\n    ));\n  };\n\n  const DeptNode = ({\n    dept,\n    level,\n    path,\n  }: {\n    dept: Department;\n    level: number;\n    path: string[];\n  }) => {\n    const cardRef = useRef<HTMLDivElement>(null);\n    const currentPath = [...path, dept.name];\n    const descendants = getDescendants(dept.id, tree);\n\n    const handleExpand = () => {\n      // Optionally, you can keep the logic for future use, but currently expandDirection is not used.\n      setActiveAndExpand(dept.id, currentPath);\n    };\n    return (\n      <NeonPanel\n        className={[\n          \"org-chart-panel\",\n          activeDeptId === dept.id ? \"neon-glow z-50\" : \"z-10\",\n          dept.is_archived ? \"opacity-50 grayscale\" : \"\",\n        ]\n          .filter(Boolean)\n          .join(\" \")}\n      >\n        <div ref={cardRef} className=\"org-chart-header\" onClick={handleExpand}>\n          <div className=\"org-chart-header-main\">\n            {expanded[dept.id] ? (\n              <FiChevronDown className=\"org-chart-chevron\" />\n            ) : (\n              <FiChevronRight className=\"org-chart-chevron\" />\n            )}\n            <h2 className=\"neon-form-title org-chart-title\">{dept.name}</h2>\n            {dept.is_archived && (\n              <span className=\"org-chart-archived\">Archived</span>\n            )}\n          </div>\n          <div className=\"org-chart-header-actions\">\n            <span className=\"org-chart-path\">{currentPath.join(\" ‚Ä∫ \")}</span>\n            <NeonIconButton\n              as=\"button\"\n              variant=\"edit\"\n              icon={<FiEdit className=\"org-chart-action-icon\" />}\n              title=\"Edit Department\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setEditingDeptId(dept.id);\n                setDeptEditName(dept.name);\n              }}\n              className=\"org-chart-btn ml-2\"\n            />\n            {!dept.is_archived && (\n              <NeonIconButton\n                as=\"button\"\n                variant=\"archive\"\n                icon={<FiArchive className=\"org-chart-action-icon\" />}\n                title=\"Archive Department\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleDeptArchive(dept.id);\n                }}\n                className=\"org-chart-btn ml-2\"\n              />\n            )}\n          </div>\n        </div>\n        {expanded[dept.id] && (\n          <div className=\"org-chart-roles\">\n            <span className=\"org-chart-roles-label\">\n              Associated roles to this department:\n            </span>\n            <div className=\"org-chart-roles-list\">\n              {(rolesByDept[dept.id] || []).map((role) => (\n                <div key={role.id} className=\"org-chart-role-item\">\n                  {editingRoleId === role.id ? (\n                    <form\n                      className=\"org-chart-role-edit-form\"\n                      onSubmit={async (e) => {\n                        e.preventDefault();\n                        await supabase\n                          .from(\"roles\")\n                          .update({\n                            title: roleEditTitle,\n                            department_id: roleEditDeptId,\n                          })\n                          .eq(\"id\", role.id);\n                        setEditingRoleId(null);\n                        setRoleEditTitle(\"\");\n                        setRoleEditDeptId(\"\");\n                        // Refetch roles and update rolesByDept\n                        const { data: roleData } = await supabase\n                          .from(\"roles\")\n                          .select(\"id, title, department_id\");\n                        const grouped: RolesByDept = {};\n                        for (const r of roleData || []) {\n                          if (!grouped[r.department_id])\n                            grouped[r.department_id] = [];\n                          grouped[r.department_id].push(r);\n                        }\n                        setRolesByDept(grouped);\n                      }}\n                    >\n                      <input\n                        type=\"text\"\n                        value={roleEditTitle}\n                        onChange={(e) => setRoleEditTitle(e.target.value)}\n                        className=\"neon-input\"\n                        placeholder=\"Role Title\"\n                      />\n                      <select\n                        value={roleEditDeptId}\n                        onChange={(e) => setRoleEditDeptId(e.target.value)}\n                        className=\"neon-input\"\n                      >\n                        {departments.map((d) => (\n                          <option key={d.id} value={d.id}>\n                            {d.name}\n                          </option>\n                        ))}\n                      </select>\n                      <button\n                        type=\"submit\"\n                        className=\"neon-btn neon-btn-save org-chart-btn\"\n                        data-variant=\"save\"\n                      >\n                        <span style={{ marginRight: \"0.5em\" }}>Save</span>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"20\"\n                          height=\"20\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"feather feather-save\"\n                        >\n                          <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                          <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                          <polyline points=\"7 3 7 8 15 8\"></polyline>\n                        </svg>\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setEditingRoleId(null);\n                          setRoleEditTitle(\"\");\n                          setRoleEditDeptId(\"\");\n                        }}\n                        className=\"neon-btn neon-btn-danger org-chart-btn\"\n                        data-variant=\"close\"\n                      >\n                        <span style={{ marginRight: \"0.5em\" }}>Cancel</span>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"20\"\n                          height=\"20\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"2\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          className=\"feather feather-x\"\n                        >\n                          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                        </svg>\n                      </button>\n                    </form>\n                  ) : (\n                    <span\n                      className=\"org-chart-role-badge\"\n                      onClick={() => {\n                        setEditingRoleId(role.id);\n                        setRoleEditTitle(role.title);\n                        setRoleEditDeptId(role.department_id);\n                      }}\n                      title=\"Edit Role\"\n                    >\n                      <FiUsers className=\"org-chart-role-icon\" /> {role.title}\n                    </span>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"org-chart-actions\">\n              <Link\n                href={`/admin/departments/add?parent_id=${dept.id}`}\n                className=\"neon-btn neon-btn-add org-chart-btn\"\n              >\n                <FiUmbrella className=\"org-chart-toolbar-icon\" />\n              </Link>\n              <NeonIconButton\n                as=\"button\"\n                variant=\"refresh\"\n                icon={<FiChevronRight className=\"org-chart-toolbar-icon\" />}\n                title=\"Change Parent Department\"\n                onClick={() => {\n                  setShowModalFor(dept.id);\n                  setNewParentId(null);\n                }}\n                className=\"neon-btn neon-btn-orgchart org-chart-btn ml-2\"\n              />\n              <Link\n                href={`/admin/roles/add?department_id=${dept.id}`}\n                className=\"neon-btn neon-btn-orgchart org-chart-btn\"\n              >\n                <FiTool className=\"org-chart-toolbar-icon\" />\n              </Link>\n            </div>\n            {showModalFor === dept.id && (\n              <NeonPanel className=\"org-chart-modal-panel\">\n                <label className=\"org-chart-modal-label\">\n                  Select New Parent Department:\n                </label>\n                <select\n                  value={newParentId ?? \"\"}\n                  onChange={(e) =>\n                    setNewParentId(\n                      e.target.value === \"\" ? null : e.target.value,\n                    )\n                  }\n                  className=\"neon-input\"\n                >\n                  <option value=\"\">No Parent (Top Level)</option>\n                  {departments\n                    .filter((d) => d.id !== dept.id)\n                    .map((d) => (\n                      <option key={d.id} value={d.id}>\n                        {d.name}\n                      </option>\n                    ))}\n                </select>\n                <div className=\"org-chart-modal-actions\">\n                  <button\n                    onClick={async () => {\n                      const parentUUID =\n                        newParentId === \"\" ? null : newParentId;\n                      const { error } = await supabase.rpc(\n                        \"update_department_parent\",\n                        {\n                          dept_to_move: dept.id,\n                          new_parent: parentUUID,\n                        },\n                      );\n                      if (error) {\n                        alert(\"Error: \" + error.message);\n                      } else {\n                        const { data: updatedDepartments } = await supabase\n                          .from(\"departments\")\n                          .select(\"id, name, parent_id, is_archived\");\n                        if (updatedDepartments)\n                          setDepartments(updatedDepartments);\n                        setShowModalFor(null);\n                        setNewParentId(null);\n                      }\n                    }}\n                    className=\"neon-btn neon-btn-submit\"\n                  >\n                    Save\n                  </button>\n                  <button\n                    onClick={() => setShowModalFor(null)}\n                    className=\"neon-btn neon-btn-back\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </NeonPanel>\n            )}\n            {editingDeptId === dept.id && (\n              <div className=\"org-chart-edit-panel\">\n                <input\n                  type=\"text\"\n                  value={deptEditName}\n                  onChange={(e) => setDeptEditName(e.target.value)}\n                  className=\"neon-input\"\n                  placeholder=\"Department Name\"\n                />\n                <label className=\"org-chart-edit-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={deptEditArchived}\n                    onChange={(e) => setDeptEditArchived(e.target.checked)}\n                  />{\" \"}\n                  Archive\n                </label>\n                <button\n                  onClick={() => handleDeptEditSave(dept.id)}\n                  className=\"neon-btn neon-btn-save\"\n                  data-variant=\"save\"\n                >\n                  <span style={{ marginRight: \"0.5em\" }}>Save</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"feather feather-save\"\n                  >\n                    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                    <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                    <polyline points=\"7 3 7 8 15 8\"></polyline>\n                  </svg>\n                </button>\n                <button\n                  onClick={() => setEditingDeptId(null)}\n                  className=\"neon-btn neon-btn-danger\"\n                  data-variant=\"close\"\n                >\n                  <span style={{ marginRight: \"0.5em\" }}>Cancel</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"feather feather-x\"\n                  >\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                  </svg>\n                </button>\n                {!dept.is_archived && (\n                  <button\n                    onClick={() => handleDeptArchive(dept.id)}\n                    className=\"neon-btn neon-btn-archive\"\n                    data-variant=\"archive\"\n                  >\n                    <span style={{ marginRight: \"0.5em\" }}>\n                      Archive Department\n                    </span>\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"20\"\n                      height=\"20\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      className=\"feather feather-archive\"\n                    >\n                      <rect\n                        x=\"3\"\n                        y=\"3\"\n                        width=\"18\"\n                        height=\"4\"\n                        rx=\"1\"\n                        ry=\"1\"\n                      ></rect>\n                      <path d=\"M21 7v13a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7\"></path>\n                      <line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line>\n                    </svg>\n                  </button>\n                )}\n              </div>\n            )}\n            {renderBranch(dept.id, level + 1, currentPath)}\n          </div>\n        )}\n      </NeonPanel>\n    );\n  };\n\n  return (\n    <>\n      <main className=\"org-chart-main\">\n        <section className=\"org-chart-section\">\n          <div className=\"org-chart-container\">\n            <h1 className=\"neon-form-title org-chart-page-title\">\n              Organisation Chart\n            </h1>\n            <div className=\"org-chart-toolbar\">\n              <Link\n                href=\"/admin/departments/add\"\n                className=\"neon-btn neon-btn-orgchart\"\n              >\n                <FiUmbrella className=\"org-chart-toolbar-icon\" />\n              </Link>\n              <Link\n                href=\"/admin/roles/add\"\n                className=\"neon-btn neon-btn-orgchart\"\n              >\n                <FiTool className=\"org-chart-toolbar-icon\" />\n              </Link>\n            </div>\n            {departments.length === 0 ? (\n              <p className=\"org-chart-empty\">Loading organisation chart...</p>\n            ) : (\n              renderBranch(\"root\")\n            )}\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/reports/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":19,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":19,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<ReportRow[]>`.","line":20,"column":15,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":20,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rows on an `any` value.","line":20,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":22,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":22,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[798,798],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[798,798],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/reports/page.tsx\n\"use client\";\nimport { useState } from \"react\";\nimport ReportBuilder from \"@/components/reporting/ReportBuilder\";\nimport ReportViewer from \"@/components/reporting/ReportViewer\";\n\n// Use types from components for consistency\nimport type { ReportParams } from \"@/components/reporting/ReportBuilder\";\nimport type { ReportRow } from \"@/components/reporting/ReportViewer\";\n\nexport default function ReportsPage() {\n  const [rows, setRows] = useState<ReportRow[]>([]);\n  const run = (params: ReportParams) => {\n    async function fetchData() {\n      const res = await fetch(\"/api/reports/run\", {\n        method: \"POST\",\n        body: JSON.stringify({ org_id: \"YOUR_ORG_ID\", ...params }),\n      });\n      const json = await res.json();\n      setRows(json.rows ?? []);\n    }\n    fetchData();\n  };\n  return (\n    <main>\n      <h1>Reports</h1>\n      <ReportBuilder onRun={run} />\n      <ReportViewer rows={rows} />\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":125,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":125,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3666,3666],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3666,3666],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport Modal from \"@/components/modal\"; // <- import as Component (capitalized)\n\ntype Profile = { name: string; description?: string | null };\ntype ModuleRow = {\n  module_id: string;\n  modules?: { name?: string | null } | null;\n};\ntype DocumentRow = {\n  document_id: string;\n  documents?: { name?: string | null; document_type?: string | null } | null;\n};\ntype BehaviourRow = {\n  behaviour_id: string;\n  behaviours?: {\n    name?: string | null;\n    description?: string | null;\n    icon?: string | null;\n  } | null;\n};\n\n// Document type for role profile documents\ninterface RoleProfileDocument {\n  document_id: string;\n  title?: string | null;\n  document_type?: string | null;\n}\n\nexport default function RoleProfileDetailPage() {\n  const params = useParams();\n  const router = useRouter();\n  const idParam = params?.id;\n  const profileId = Array.isArray(idParam) ? idParam[0] : idParam;\n\n  const [profile, setProfile] = useState<Profile | null>(null);\n  const [modules, setModules] = useState<\n    Array<{ module_id: string; name?: string | null }>\n  >([]);\n  const [documents, setDocuments] = useState<RoleProfileDocument[]>([]);\n  const [behaviours, setBehaviours] = useState<\n    Array<{\n      behaviour_id: string;\n      name?: string | null;\n      description?: string | null;\n      icon?: string | null;\n    }>\n  >([]);\n  const [error, setError] = useState<string | null>(null);\n  const [open, setOpen] = useState(true);\n\n  useEffect(() => {\n    let isMounted = true;\n    const fetchAll = async () => {\n      if (!profileId) return;\n\n      // Profile\n      const { data: profileData, error: profileErr } = await supabase\n        .from(\"role_profiles\")\n        .select(\"name, description\")\n        .eq(\"id\", profileId)\n        .single();\n\n      if (!isMounted) return;\n\n      if (profileErr) {\n        setError(profileErr.message);\n        setProfile(null);\n        return;\n      }\n\n      setProfile(profileData as Profile);\n      setError(null);\n\n      // Modules\n      const { data: moduleData } = await supabase\n        .from(\"role_profile_modules\")\n        .select(\"module_id, modules(name)\")\n        .eq(\"role_profile_id\", profileId);\n\n      if (!isMounted) return;\n      setModules(\n        (moduleData as ModuleRow[] | null)?.map((m) => ({\n          module_id: m.module_id,\n          name: m.modules?.name ?? m.module_id,\n        })) ?? [],\n      );\n\n      // Documents\n      const { data: documentData } = await supabase\n        .from(\"role_profile_documents\")\n        .select(\"document_id, documents(name, document_type)\")\n        .eq(\"role_profile_id\", profileId);\n\n      if (!isMounted) return;\n      setDocuments(\n        (documentData as DocumentRow[] | null)?.map((d) => ({\n          document_id: d.document_id,\n          title: d.documents?.name ?? d.document_id,\n          document_type: d.documents?.document_type ?? null,\n        })) ?? [],\n      );\n\n      // Behaviours\n      const { data: behaviourData } = await supabase\n        .from(\"role_profile_behaviours\")\n        .select(\"behaviour_id, behaviours(name, description, icon)\")\n        .eq(\"role_profile_id\", profileId);\n\n      if (!isMounted) return;\n      setBehaviours(\n        (behaviourData as BehaviourRow[] | null)?.map((b) => ({\n          behaviour_id: b.behaviour_id,\n          name: b.behaviours?.name ?? b.behaviour_id,\n          description: b.behaviours?.description ?? null,\n          icon: b.behaviours?.icon ?? null,\n        })) ?? [],\n      );\n    };\n\n    fetchAll();\n    return () => {\n      isMounted = false;\n    };\n  }, [profileId]);\n\n  // Always render the Modal component; control visibility with `open`\n  return (\n    <Modal\n      open={open}\n      onClose={() => {\n        setOpen(false);\n        router.push(\"/admin/role-profiles\");\n      }}\n    >\n      <NeonPanel className=\"neon-panel-lg\">\n        {error && (\n          <div className=\"text-center py-10 text-red-500\">Error: {error}</div>\n        )}\n\n        {!profile ? (\n          <div className=\"text-center py-10 text-white\">Loading...</div>\n        ) : (\n          <>\n            <h2 className=\"text-2xl font-bold mb-2\">{profile.name}</h2>\n            <p className=\"text-lg mb-4\">\n              {profile.description || \"No description provided.\"}\n            </p>\n\n            <div className=\"mb-6\">\n              <h3 className=\"neon-form-title mb-2\">Modules</h3>\n              <ul className=\"neon-listbox\">\n                {modules.length === 0 ? (\n                  <li className=\"neon-listbox-item\">None</li>\n                ) : (\n                  modules.map((m) => (\n                    <li key={m.module_id} className=\"neon-listbox-item\">\n                      {m.name || (\n                        <span className=\"text-xs text-gray-400\">\n                          {m.module_id}\n                        </span>\n                      )}\n                    </li>\n                  ))\n                )}\n              </ul>\n            </div>\n\n            <div className=\"mb-6\">\n              <h3 className=\"neon-form-title mb-2\">Documents</h3>\n              <ul className=\"neon-listbox\">\n                {documents.length === 0 ? (\n                  <li className=\"neon-listbox-item\">None</li>\n                ) : (\n                  documents.map((d) => (\n                    <li key={d.document_id} className=\"neon-listbox-item\">\n                      {d.title || (\n                        <span className=\"text-xs text-gray-400\">\n                          {d.document_id}\n                        </span>\n                      )}{\" \"}\n                      ({d.document_type || \"-\"})\n                    </li>\n                  ))\n                )}\n              </ul>\n            </div>\n\n            <div className=\"mb-6\">\n              <h3 className=\"neon-form-title mb-2\">Behaviours</h3>\n              <ul className=\"neon-listbox\">\n                {behaviours.length === 0 ? (\n                  <li className=\"neon-listbox-item\">None</li>\n                ) : (\n                  behaviours.map((b) => (\n                    <li key={b.behaviour_id} className=\"neon-listbox-item\">\n                      {b.icon && <span className=\"mr-2\">{b.icon}</span>}\n                      {b.name || (\n                        <span className=\"text-xs text-gray-400\">\n                          {b.behaviour_id}\n                        </span>\n                      )}\n                      {b.description && (\n                        <span className=\"ml-2 text-xs text-gray-400\">\n                          {b.description}\n                        </span>\n                      )}\n                    </li>\n                  ))\n                )}\n              </ul>\n            </div>\n          </>\n        )}\n      </NeonPanel>\n    </Modal>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/add/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/manage/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":28,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":28,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[839,839],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[839,839],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport { FiEye, FiEdit } from \"react-icons/fi\";\n\nconst ManageRoleProfilesPage = () => {\n  const [profiles, setProfiles] = useState<\n    Array<{ id: string; name: string; description?: string }>\n  >([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProfiles = async () => {\n      const { data, error } = await supabase\n        .from(\"role_profiles\")\n        .select(\"id, name, description\");\n      if (error) {\n        setError(error.message);\n        setProfiles([]);\n      } else {\n        setProfiles(data || []);\n        setError(null);\n      }\n      setLoading(false);\n    };\n    fetchProfiles();\n  }, []);\n\n  return (\n    <NeonPanel className=\"neon-panel-lg\">\n      <h1 className=\"neon-section-title mb-4\">Manage Role Profiles</h1>\n      <p className=\"mb-6\">View, edit, and organize your role profiles.</p>\n      {loading && (\n        <div className=\"neon-message neon-message-info\">Loading...</div>\n      )}\n      {error && (\n        <div className=\"neon-message neon-message-error\">Error: {error}</div>\n      )}\n      {!loading && !error && (\n        <div className=\"neon-table-wrapper\">\n          <table className=\"neon-table w-full\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Description</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {profiles.map((profile) => (\n                <tr key={profile.id}>\n                  <td>{profile.name}</td>\n                  <td>{profile.description || \"-\"}</td>\n                  <td>\n                    <a\n                      href={`/admin/role-profiles/${profile.id}`}\n                      className=\"neon-btn neon-btn-view neon-btn-icon\"\n                      title=\"View\"\n                      aria-label=\"View Role Profile\"\n                    >\n                      <FiEye />\n                      <span className=\"neon-btn-label\">View</span>\n                    </a>\n                    <a\n                      href={`/admin/role-profiles/${profile.id}/edit`}\n                      className=\"neon-btn neon-btn-edit neon-btn-icon\"\n                      title=\"Edit\"\n                      aria-label=\"Edit Role Profile\"\n                    >\n                      <FiEdit />\n                      <span className=\"neon-btn-label\">Edit</span>\n                    </a>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </NeonPanel>\n  );\n};\n\nexport default ManageRoleProfilesPage;\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":35,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":35,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[900,900],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[900,900],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":59,"column":57,"nodeType":"MemberExpression","messageId":"invalidType","endLine":59,"endColumn":63},{"ruleId":"@typescript-eslint/restrict-template-expressions","severity":2,"message":"Invalid type \"unknown\" of template literal expression.","line":68,"column":57,"nodeType":"MemberExpression","messageId":"invalidType","endLine":68,"endColumn":63}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport Link from \"next/link\";\nimport { FiEye, FiEdit } from \"react-icons/fi\";\n\ntype RoleProfile = {\n  id: number;\n  name: string;\n  description: string;\n  // add other fields as needed\n};\n\nexport default function RoleProfilesPage() {\n  const [profiles, setProfiles] = useState<RoleProfile[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchProfiles() {\n      setLoading(true);\n      setError(\"\");\n      const { data, error } = await supabase\n        .from(\"role_profiles\")\n        .select(\"*\")\n        .order(\"name\");\n\n      if (error) setError(\"Failed to load role profiles\");\n      else setProfiles(data || []);\n      setLoading(false);\n    }\n\n    fetchProfiles();\n  }, []);\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <main className=\"page-main\">\n          {error && (\n            <div className=\"neon-message neon-message-error\">{error}</div>\n          )}\n          {loading ? (\n            <div className=\"neon-message neon-message-info\">Loading...</div>\n          ) : (\n            <div className=\"neon-table-wrapper\">\n              <NeonTable\n                columns={[\n                  { header: \"Name\", accessor: \"name\" },\n                  { header: \"Description\", accessor: \"description\" },\n                  {\n                    header: \"Actions\",\n                    accessor: \"id\",\n                    render: (value, row) => (\n                      <div className=\"neon-panel-actions neon-flex gap-2\">\n                        <Link\n                          href={`/admin/role-profiles/${row.id}`}\n                          className=\"neon-btn neon-btn-view neon-btn-icon\"\n                          title=\"View\"\n                          aria-label=\"View Role Profile\"\n                        >\n                          <FiEye />\n                          <span className=\"neon-btn-label\">View</span>\n                        </Link>\n                        <Link\n                          href={`/admin/role-profiles/${row.id}/edit`}\n                          className=\"neon-btn neon-btn-edit neon-btn-icon\"\n                          title=\"Edit\"\n                          aria-label=\"Edit Role Profile\"\n                        >\n                          <FiEdit />\n                          <span className=\"neon-btn-label\">Edit</span>\n                        </Link>\n                      </div>\n                    ),\n                  },\n                ]}\n                data={profiles}\n              />\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/role-profiles/profile/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/roles/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":29,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":29,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[833,833],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[833,833],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\nexport default function AddRolePage() {\n  const [title, setTitle] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const router = useRouter();\n\n  useEffect(() => {\n    const loadDepartments = async () => {\n      const { data, error } = await supabase\n        .from(\"departments\")\n        .select(\"id, name\");\n      if (data) setDepartments(data);\n      if (error) console.error(\"Failed to load departments:\", error.message);\n    };\n\n    loadDepartments();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    const { error } = await supabase.from(\"roles\").insert([\n      {\n        title,\n        department_id: departmentId,\n      },\n    ]);\n\n    if (error) {\n      setError(error.message);\n    } else {\n      router.push(\"/admin/org-chart\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <form onSubmit={handleSubmit} className=\"add-role-form\">\n          <h1 className=\"add-role-title\">Add Role</h1>\n\n          <label className=\"add-role-label\">\n            <span className=\"add-role-label-text\">Role Title</span>\n            <input\n              type=\"text\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              className=\"add-role-input\"\n              required\n            />\n          </label>\n\n          <label className=\"add-role-label\">\n            <span className=\"add-role-label-text\">Assign to Department</span>\n            <select\n              value={departmentId}\n              onChange={(e) => setDepartmentId(e.target.value)}\n              className=\"add-role-input\"\n              required\n            >\n              <option value=\"\" disabled>\n                Select a department\n              </option>\n              {departments.map((dept) => (\n                <option key={dept.id} value={dept.id}>\n                  {dept.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {error && <p className=\"add-role-error\">{error}</p>}\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"add-role-submit-btn\"\n          >\n            {loading ? \"Saving...\" : \"Add Role\"}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/roles/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[961,961],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[961,961],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport Link from \"next/link\";\n\ninterface User {\n  id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n  department: string;\n  access_level: string;\n  role_title: string;\n  status: string;\n}\n\nexport default function AdminUserListPage() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const [filterDept, setFilterDept] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"\");\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const { data, error } = await supabase.from(\"users\").select(\"*\");\n      if (error) {\n        setError(\"Could not load users\");\n      } else {\n        setUsers(data as User[]);\n      }\n      setLoading(false);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const toggleStatus = async (user: User) => {\n    const newStatus = user.status === \"active\" ? \"suspended\" : \"active\";\n    const { error } = await supabase\n      .from(\"users\")\n      .update({ status: newStatus })\n      .eq(\"id\", user.id);\n\n    if (!error) {\n      setUsers((prev) =>\n        prev.map((u) => (u.id === user.id ? { ...u, status: newStatus } : u)),\n      );\n    } else {\n      alert(\"Failed to update status.\");\n    }\n  };\n\n  const departments = [\n    ...new Set(users.map((u) => u.department).filter(Boolean)),\n  ];\n\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch = [user.first_name, user.last_name, user.email].some(\n      (field) => field?.toLowerCase().includes(search.toLowerCase()),\n    );\n    const matchesDept = filterDept ? user.department === filterDept : true;\n    const matchesStatus = filterStatus ? user.status === filterStatus : true;\n    return matchesSearch && matchesDept && matchesStatus;\n  });\n\n  if (loading) return <p className=\"p-6\">Loading users...</p>;\n  if (error) return <p className=\"p-6 text-red-600\">{error}</p>;\n\n  return (\n    <>\n      <div className=\"admin-users-page-wrapper\">\n        <h1 className=\"admin-users-title\">üë• Manage Users</h1>\n\n        {/* Filters */}\n        <div className=\"admin-users-filters\">\n          <div className=\"admin-users-filters-row\">\n            <div\n              className=\"neon-search-bar-wrapper\"\n              style={{ flex: 1, minWidth: 220 }}\n            >\n              <input\n                type=\"search\"\n                placeholder=\"Search by name or email\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"neon-input neon-input-search\"\n              />\n            </div>\n            <select\n              value={filterDept}\n              onChange={(e) => setFilterDept(e.target.value)}\n              className=\"neon-input w-auto\"\n            >\n              <option value=\"\">All Departments</option>\n              {departments.map((d) => (\n                <option key={d} value={d}>\n                  {d}\n                </option>\n              ))}\n            </select>\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e.target.value)}\n              className=\"neon-input w-auto\"\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"active\">Active</option>\n              <option value=\"suspended\">Suspended</option>\n            </select>\n          </div>\n        </div>\n\n        {/* User Table */}\n        <div className=\"admin-users-table-wrapper\">\n          <table className=\"admin-users-table\">\n            <thead className=\"admin-users-table-head\">\n              <tr>\n                <th className=\"admin-users-th\">Name</th>\n                <th className=\"admin-users-th\">Email</th>\n                <th className=\"admin-users-th\">Department</th>\n                <th className=\"admin-users-th\">Job Level</th>\n                <th className=\"admin-users-th\">Role</th>\n                <th className=\"admin-users-th\">Status</th>\n                <th className=\"admin-users-th\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredUsers.map((user) => (\n                <tr key={user.id} className=\"admin-users-tr\">\n                  <td className=\"admin-users-td\">\n                    {user.first_name} {user.last_name}\n                  </td>\n                  <td className=\"admin-users-td\">{user.email}</td>\n                  <td className=\"admin-users-td\">{user.department}</td>\n                  <td className=\"admin-users-td\">{user.access_level}</td>\n                  <td className=\"admin-users-td\">{user.role_title}</td>\n                  <td className=\"admin-users-td admin-users-status\">\n                    {user.status}\n                  </td>\n                  <td className=\"admin-users-td admin-users-actions\">\n                    <Link\n                      href={`/admin/users/${user.id}`}\n                      className=\"admin-users-action-link admin-users-action-view\"\n                    >\n                      View\n                    </Link>\n                    <Link\n                      href={`/admin/users/${user.id}/edit`}\n                      className=\"admin-users-action-link admin-users-action-edit\"\n                    >\n                      Edit\n                    </Link>\n                    <button\n                      onClick={() => toggleStatus(user)}\n                      className={`admin-users-action-btn ${user.status === \"active\" ? \"admin-users-action-suspend\" : \"admin-users-action-reactivate\"}`}\n                    >\n                      {user.status === \"active\" ? \"Suspend\" : \"Reactivate\"}\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/standard-sections/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2015,2015],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2015,2015],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ntype Section = {\n  id: string;\n  standard_name: string;\n  code: string;\n  title: string;\n  description: string;\n  parent_section_id: string | null;\n  document_standard?: { name?: string };\n};\n\n// Define a type for the raw DB row\ninterface RawSectionRow {\n  id: string;\n  code: string;\n  title: string;\n  description: string;\n  parent_section_id: string | null;\n  document_standard?: { name?: string };\n}\n\nexport default function StandardSectionPage() {\n  const [sections, setSections] = useState<Section[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedStandard, setSelectedStandard] = useState<string>(\"All\");\n\n  useEffect(() => {\n    const fetchSections = async () => {\n      const { data, error } = await supabase.from(\"standard_sections\").select(`\n          id,\n          code,\n          title,\n          description,\n          parent_section_id,\n          document_standard:standard_id (\n            name\n          )\n        `);\n\n      if (error) {\n        console.error(\"Error loading sections:\", error.message);\n      } else {\n        const formatted = (data as RawSectionRow[]).map((item) => ({\n          id: item.id,\n          code: item.code,\n          title: item.title,\n          description: item.description,\n          parent_section_id: item.parent_section_id,\n          standard_name: item.document_standard?.name || \"Unknown\",\n        }));\n\n        // Sort numerically by clause code\n        formatted.sort((a, b) => {\n          const aParts = a.code.split(\".\").map(Number);\n          const bParts = b.code.split(\".\").map(Number);\n          for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n            const aVal = aParts[i] ?? 0;\n            const bVal = bParts[i] ?? 0;\n            if (aVal !== bVal) return aVal - bVal;\n          }\n          return 0;\n        });\n\n        setSections(formatted);\n      }\n      setLoading(false);\n    };\n\n    fetchSections();\n  }, []);\n\n  const standardOptions = Array.from(\n    new Set(sections.map((s) => s.standard_name)),\n  ).sort();\n\n  const groupedByStandard: Record<string, Section[]> = sections.reduce(\n    (acc, section) => {\n      const key = section.standard_name.trim().toLowerCase();\n      if (!acc[key]) {\n        acc[key] = [];\n      }\n      acc[key].push(section);\n      return acc;\n    },\n    {} as Record<string, Section[]>,\n  );\n\n  return (\n    <main className=\"standard-sections-page-wrapper\">\n      <h1 className=\"standard-sections-title\">Standard Sections</h1>\n      <p className=\"standard-sections-desc\">\n        Below are the structured clauses and sub-clauses for each compliance\n        standard used in your system.\n      </p>\n      {/* Filter Dropdown */}\n      <div className=\"standard-sections-filter-wrapper\">\n        <label className=\"standard-sections-filter-label\">\n          Filter by Standard\n        </label>\n        <select\n          value={selectedStandard}\n          onChange={(e) => setSelectedStandard(e.target.value)}\n          className=\"standard-sections-filter-select\"\n        >\n          <option value=\"All\">All Standards</option>\n          {standardOptions.map((std) => (\n            <option key={std} value={std}>\n              {std}\n            </option>\n          ))}\n        </select>\n      </div>\n      {loading ? (\n        <p className=\"standard-sections-loading\">Loading sections...</p>\n      ) : (\n        Object.entries(groupedByStandard)\n          .filter(([key]) => {\n            const keyNormalized = key.trim().toLowerCase();\n            const filterNormalized = selectedStandard.trim().toLowerCase();\n            return (\n              selectedStandard === \"All\" || keyNormalized === filterNormalized\n            );\n          })\n          .map(([standardKey, items]) => {\n            const sortedItems = [...items].sort((a, b) => {\n              const aParts = a.code.split(\".\").map(Number);\n              const bParts = b.code.split(\".\").map(Number);\n              for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n                const aVal = aParts[i] ?? 0;\n                const bVal = bParts[i] ?? 0;\n                if (aVal !== bVal) return aVal - bVal;\n              }\n              return 0;\n            });\n            return (\n              <div key={standardKey} className=\"standard-sections-group\">\n                <h2 className=\"standard-sections-group-title\">\n                  {standardOptions.find(\n                    (std) => std.trim().toLowerCase() === standardKey,\n                  ) || standardKey}\n                </h2>\n                <div className=\"standard-sections-list\">\n                  {sortedItems.length === 0 ? (\n                    <div className=\"standard-sections-empty\">\n                      No sections found.\n                    </div>\n                  ) : (\n                    sortedItems.map((section) => (\n                      <div\n                        key={section.id}\n                        className=\"standard-sections-list-item\"\n                      >\n                        <div className=\"standard-sections-list-code\">\n                          {section.code}\n                        </div>\n                        <div className=\"standard-sections-list-title\">\n                          {section.title}\n                        </div>\n                        {section.description && (\n                          <div className=\"standard-sections-list-desc\">\n                            {section.description}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            );\n          })\n      )}\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/utility/accessmanager/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/admin/utility/shift/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":40,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":40,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1503,1503],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1503,1503],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":66,"column":21,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":66,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":66,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any[]`.","line":67,"column":29,"nodeType":"ArrayExpression","messageId":"unsafeReturn","endLine":67,"endColumn":49}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport default function AdminShiftPage() {\n  const [shifts, setShifts] = useState<\n    Array<{ id: string; name: string; start: string; end_time: string }>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [stage, setStage] = useState(1);\n  const [form, setForm] = useState({ name: \"\", start: \"\", end_time: \"\" });\n  const [submitting, setSubmitting] = useState(false);\n  const [newShiftId, setNewShiftId] = useState<string | null>(null);\n  const [departments, setDepartments] = useState<\n    Array<{ id: string; name: string }>\n  >([]);\n  const [selectedDept, setSelectedDept] = useState<string>(\"\");\n  const [users, setUsers] = useState<\n    Array<{ id: string; first_name: string; last_name: string }>\n  >([]);\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchShifts = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"shift_patterns\")\n        .select(\"*\")\n        .order(\"start\");\n      if (error) setError(\"Failed to load shifts\");\n      setShifts(data || []);\n      setLoading(false);\n    };\n    fetchShifts();\n  }, []);\n\n  const handleDelete = async (id: string) => {\n    if (!confirm(\"Delete this shift pattern?\")) return;\n    await supabase.from(\"shift_patterns\").delete().eq(\"id\", id);\n    setShifts((shifts) => shifts.filter((s) => s.id !== id));\n  };\n\n  // Stage 1: Create shift pattern\n  const handleCreateShift = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setError(null);\n    const { name, start, end_time } = form;\n    if (!name || !start || !end_time) {\n      setError(\"All fields required\");\n      setSubmitting(false);\n      return;\n    }\n    const { error, data } = await supabase\n      .from(\"shift_patterns\")\n      .insert([{ name, start, end_time }])\n      .select();\n    if (error) setError(\"Failed to create shift\");\n    if (data && data[0]) {\n      setNewShiftId(data[0].id);\n      setShifts((shifts) => [...shifts, data[0]]);\n      setStage(2);\n    }\n    setSubmitting(false);\n  };\n\n  // Stage 2: Add to department?\n  const handleFetchDepartments = async () => {\n    const { data, error } = await supabase\n      .from(\"departments\")\n      .select(\"id, name\")\n      .order(\"name\");\n    if (!error && data) setDepartments(data);\n  };\n\n  // Stage 3: Select users?\n  const handleFetchUsers = async () => {\n    const { data, error } = await supabase\n      .from(\"users\")\n      .select(\"id, first_name, last_name\")\n      .order(\"first_name\");\n    if (!error && data) setUsers(data);\n  };\n\n  // Final save: assign to dept/users if selected\n  const handleFinalSave = async () => {\n    setSubmitting(true);\n    setError(null);\n    // Assign to department\n    if (selectedDept && newShiftId) {\n      await supabase\n        .from(\"department_shifts\")\n        .insert({ department_id: selectedDept, shift_id: newShiftId });\n    }\n    // Assign to users\n    if (selectedUsers.length > 0 && newShiftId) {\n      const assignments = selectedUsers.map((uid) => ({\n        user_id: uid,\n        shift_id: newShiftId,\n      }));\n      await supabase.from(\"user_shifts\").insert(assignments);\n    }\n    // Reset\n    setForm({ name: \"\", start: \"\", end_time: \"\" });\n    setSelectedDept(\"\");\n    setSelectedUsers([]);\n    setNewShiftId(null);\n    setStage(1);\n    setSubmitting(false);\n  };\n\n  return (\n    <>\n      <h2 className=\"neon-section-title mb-4\">Shift Patterns</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : (\n        <div className=\"space-y-6\">\n          {\" \"}\n          {/* Add vertical spacing between table and forms */}\n          <NeonTable\n            columns={[\n              { header: \"Name\", accessor: \"name\" },\n              { header: \"Start\", accessor: \"start\" },\n              { header: \"End\", accessor: \"end_time\" },\n              { header: \"Actions\", accessor: \"actions\" },\n            ]}\n            data={shifts.map((s) => ({\n              ...s,\n              actions: (\n                <NeonIconButton\n                  variant=\"delete\"\n                  title=\"Delete\"\n                  onClick={() => handleDelete(s.id)}\n                />\n              ),\n            }))}\n          />\n          <div className=\"mt-8\">\n            {stage === 1 && (\n              <NeonForm\n                title=\"Create New Shift Pattern\"\n                onSubmit={handleCreateShift}\n                submitLabel={submitting ? \"Creating...\" : \"Next\"}\n              >\n                <label className=\"neon-form-title\">\n                  Name\n                  <input\n                    className=\"neon-input\"\n                    value={form.name}\n                    onChange={(e) =>\n                      setForm((f) => ({ ...f, name: e.target.value }))\n                    }\n                    required\n                  />\n                </label>\n                <label className=\"neon-form-title\">\n                  Start Time\n                  <input\n                    className=\"neon-input\"\n                    type=\"time\"\n                    value={form.start}\n                    onChange={(e) =>\n                      setForm((f) => ({ ...f, start: e.target.value }))\n                    }\n                    required\n                  />\n                </label>\n                <label className=\"neon-form-title\">\n                  End Time\n                  <input\n                    className=\"neon-input\"\n                    type=\"time\"\n                    value={form.end_time}\n                    onChange={(e) =>\n                      setForm((f) => ({ ...f, end_time: e.target.value }))\n                    }\n                    required\n                  />\n                </label>\n                {error && <div className=\"neon-error text-base\">{error}</div>}\n              </NeonForm>\n            )}\n            {stage === 2 && (\n              <div className=\"neon-form-group\">\n                <p className=\"mb-4\">Add this shift to a department?</p>\n                <button\n                  className=\"neon-btn neon-btn-primary mr-4\"\n                  onClick={async () => {\n                    await handleFetchDepartments();\n                    setStage(21);\n                  }}\n                >\n                  Yes\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-secondary\"\n                  onClick={() => setStage(3)}\n                >\n                  No\n                </button>\n              </div>\n            )}\n            {stage === 21 && (\n              <div className=\"neon-form-group\">\n                <p className=\"mb-2\">Select a department:</p>\n                <select\n                  className=\"neon-input mb-4\"\n                  value={selectedDept}\n                  onChange={(e) => setSelectedDept(e.target.value)}\n                >\n                  <option value=\"\">Select...</option>\n                  {departments.map((d) => (\n                    <option key={d.id} value={d.id}>\n                      {d.name}\n                    </option>\n                  ))}\n                </select>\n                <button\n                  className=\"neon-btn neon-btn-primary mr-4\"\n                  onClick={() => setStage(3)}\n                >\n                  Next\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-secondary\"\n                  onClick={() => {\n                    setSelectedDept(\"\");\n                    setStage(3);\n                  }}\n                >\n                  Skip\n                </button>\n              </div>\n            )}\n            {stage === 3 && (\n              <div className=\"neon-form-group\">\n                <p className=\"mb-4\">Select users for this shift?</p>\n                <button\n                  className=\"neon-btn neon-btn-primary mr-4\"\n                  onClick={async () => {\n                    await handleFetchUsers();\n                    setStage(31);\n                  }}\n                >\n                  Yes\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-secondary\"\n                  onClick={handleFinalSave}\n                >\n                  No, Save\n                </button>\n              </div>\n            )}\n            {stage === 31 && (\n              <div className=\"neon-form-group\">\n                <p className=\"mb-2\">Search and select users:</p>\n                <input\n                  className=\"neon-input mb-2\"\n                  type=\"search\"\n                  placeholder=\"Search users...\"\n                  value={userSearch}\n                  onChange={(e) => setUserSearch(e.target.value)}\n                />\n                <div className=\"max-h-64 overflow-y-auto mb-4\">\n                  {users\n                    .filter((u) =>\n                      `${u.first_name} ${u.last_name}`\n                        .toLowerCase()\n                        .includes(userSearch.toLowerCase()),\n                    )\n                    .map((u) => (\n                      <label key={u.id} className=\"block mb-1\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedUsers.includes(u.id)}\n                          onChange={(e) => {\n                            if (e.target.checked)\n                              setSelectedUsers((arr) => [...arr, u.id]);\n                            else\n                              setSelectedUsers((arr) =>\n                                arr.filter((id) => id !== u.id),\n                              );\n                          }}\n                        />{\" \"}\n                        {u.first_name} {u.last_name}\n                      </label>\n                    ))}\n                </div>\n                <button\n                  className=\"neon-btn neon-btn-primary mr-4\"\n                  onClick={handleFinalSave}\n                >\n                  Save\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-secondary\"\n                  onClick={handleFinalSave}\n                >\n                  Skip & Save\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/create-auth-user/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":65,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":65,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":76,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":77,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseAdmin = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nexport async function POST(req: Request) {\n  try {\n    // 1. Extract token from Authorization header\n    const authHeader = req.headers.get(\"Authorization\");\n    const token = authHeader?.replace(\"Bearer \", \"\");\n\n    if (!token) {\n      console.log(\"‚ùå No token provided\");\n      return NextResponse.json(\n        { code: \"not_authenticated\", message: \"No token provided\" },\n        { status: 401 },\n      );\n    }\n\n    // 2. Create a Supabase client using the user's token\n    const supabase = createClient(\n      process.env.SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      { global: { headers: { Authorization: `Bearer ${token}` } } },\n    );\n\n    // 3. Get the currently logged-in user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      console.log(\"‚ùå Auth user fetch failed:\", userError);\n      return NextResponse.json(\n        { code: \"not_authenticated\", message: \"User not found\" },\n        { status: 401 },\n      );\n    }\n\n    console.log(\"‚úÖ Authenticated user ID:\", user.id);\n\n    // 4. Check access_level from your users table using auth_id\n    const { data: userMeta, error: metaError } = await supabaseAdmin\n      .from(\"users\")\n      .select(\"access_level\")\n      .eq(\"auth_id\", user.id)\n      .single();\n\n    console.log(\"üîé userMeta:\", userMeta);\n    console.log(\"üîé metaError:\", metaError);\n\n    if (metaError || !userMeta || userMeta.access_level !== \"Admin\") {\n      console.log(\"‚õî Access denied. Not an Admin.\");\n      return NextResponse.json(\n        { code: \"not_admin\", message: \"User not allowed\" },\n        { status: 403 },\n      );\n    }\n\n    // 5. Get payload from body\n    const { email, password } = await req.json();\n\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Missing email or password\" },\n        { status: 400 },\n      );\n    }\n\n    // 6. Create new user via Supabase Admin API\n    const { data, error } = await supabaseAdmin.auth.admin.createUser({\n      email,\n      password,\n      email_confirm: true,\n    });\n\n    if (error) {\n      console.error(\"üî• Supabase Admin error:\", error);\n      return NextResponse.json({ error: error.message }, { status: 400 });\n    }\n\n    return NextResponse.json({ user: data.user }, { status: 200 });\n  } catch (err: unknown) {\n    console.error(\"üí• Unexpected server error:\", err);\n    return NextResponse.json(\n      { error: \"Unexpected server error\" },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/get-auth-id/get-auth-id.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// /src/app/api/get-auth-id/route.ts\nimport { NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url);\n  const userId = searchParams.get(\"userId\");\n\n  if (!userId) {\n    return NextResponse.json({ error: \"Missing userId\" }, { status: 400 });\n  }\n\n  const { data, error } = await supabase\n    .from(\"users\")\n    .select(\"auth_id\")\n    .eq(\"id\", userId)\n    .single();\n\n  if (error || !data?.auth_id) {\n    return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n  }\n\n  return NextResponse.json({ auth_id: data.auth_id });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/reports/export/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":14,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":14,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/reports/export/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\n\nfunction toCSV<T extends Record<string, unknown>>(rows: T[]): string {\n  if (!rows?.length) return \"\";\n  const headers = Object.keys(rows[0]);\n  const lines = [headers.join(\",\")];\n  for (const r of rows)\n    lines.push(headers.map((h) => JSON.stringify(r[h] ?? \"\")).join(\",\"));\n  return lines.join(\"\\n\");\n}\n\nexport async function POST(req: NextRequest) {\n  const { metric_key, grain } = await req.json();\n  // ...get rows...\n  const rows: Record<string, unknown>[] = []; // replace with real data\n  const csv = toCSV(rows);\n  return new NextResponse(csv, {\n    headers: {\n      \"Content-Type\": \"text/csv; charset=utf-8\",\n      \"Content-Disposition\": `attachment; filename=\"${metric_key}-${grain}.csv\"`,\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/reports/run/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":20,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":26,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [grain] resolves to an `any` value.","line":48,"column":32,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":48,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":49,"column":23,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":49,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `{}`.","line":57,"column":21,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":57,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `ArrayLike<unknown> | { [s: string]: unknown; }`.","line":59,"column":37,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":59,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":68,"column":13,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":48}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/reports/run/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { compile } from \"@/lib/sqlTemplate\";\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nconst STEP_BY_GRAIN: Record<string, string> = {\n  hour: \"1 hour\",\n  day: \"1 day\",\n  week: \"1 week\",\n  month: \"1 month\",\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    const {\n      metric_key,\n      grain = \"day\",\n      from,\n      to,\n      filters = {},\n    } = await req.json();\n\n    if (!metric_key || !from || !to) {\n      return NextResponse.json(\n        { error: \"metric_key, from, and to are required\" },\n        { status: 400 },\n      );\n    }\n\n    // 1) fetch metric\n    const { data: metric, error: mErr } = await supabase\n      .from(\"metrics\")\n      .select(\"sql\")\n      .eq(\"key\", metric_key)\n      .single();\n\n    if (mErr || !metric?.sql) {\n      return NextResponse.json({ error: \"Metric not found\" }, { status: 404 });\n    }\n\n    // 2) compile placeholders WITH quotes\n    // If the metric uses {{step}}, provide it. If not, compile ignores it.\n    const step = STEP_BY_GRAIN[grain] ?? \"1 day\";\n    let sql = compile(metric.sql, {\n      grain: `'${grain}'`,\n      step: `'${step}'`,\n      from: `'${from}'`,\n      to: `'${to}'`,\n    });\n\n    // 3) optional: inject simple equality filters before GROUP BY\n    if (Object.keys(filters).length) {\n      sql = sql.replace(/GROUP BY\\s+1\\b/i, (match) => {\n        const ands = Object.entries(filters)\n          .map(([k, v]) => `AND ${k} = '${String(v).replaceAll(\"'\", \"''\")}'`)\n          .join(\"\\n  \");\n        return `${ands}\\n${match}`;\n      });\n    }\n\n    // 4) run the **typed** RPC so PostgREST can materialize columns\n    // run_metric RETURNS TABLE (bucket_ts timestamptz, value numeric)\n    const { data, error } = await supabase.rpc(\"run_metric\", { q: sql });\n\n    if (error)\n      return NextResponse.json({ error: error.message }, { status: 400 });\n    return NextResponse.json({ rows: data ?? [] });\n  } catch (e: unknown) {\n    return NextResponse.json(\n      { error: (e as Error)?.message ?? \"Unexpected error\" },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/reports/save/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":10,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":11,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":22,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":27,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":27,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":29,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":29,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":30,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":31,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":31,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":32,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":32,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":33,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":34,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":34,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":35,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":35,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":36,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":36,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":30,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":41}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/app/api/reports/save/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\nconst supabase = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nexport async function POST(req: NextRequest) {\n  const body = await req.json();\n  const {\n    org_id,\n    name,\n    metric_key,\n    grain,\n    from_ts,\n    to_ts,\n    dimensions,\n    filters,\n    chart_type,\n    user_id,\n  } = body;\n\n  const { data, error } = await supabase\n    .from(\"report_definitions\")\n    .insert({\n      org_id,\n      name,\n      metric_key,\n      grain,\n      from_ts,\n      to_ts,\n      dimensions,\n      filters,\n      chart_type,\n      created_by: user_id,\n    })\n    .select(\"id\")\n    .single();\n\n  if (error)\n    return NextResponse.json({ error: error.message }, { status: 400 });\n  return NextResponse.json({ id: data.id });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/send-email/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":7,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":7,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Resend } from \"resend\";\nimport { NextResponse } from \"next/server\";\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport async function POST(req: Request) {\n  const { name, email, message } = await req.json();\n\n  if (!name || !email || !message) {\n    return NextResponse.json(\n      { error: \"Missing required fields\" },\n      { status: 400 },\n    );\n  }\n\n  try {\n    await resend.emails.send({\n      from: \"Naranja Contact <no-reply@naranja.co.uk>\",\n      to: [\"support@naranja.co.uk\"],\n      subject: `New contact form submission from ${name}`,\n      html: `\n        <p><strong>Name:</strong> ${name}</p>\n        <p><strong>Email:</strong> ${email}</p>\n        <p><strong>Message:</strong><br/>${message}</p>\n      `,\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error: unknown) {\n    console.error(\"Resend error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to send email\" },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/sync-training-from-profile.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":17,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":17,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":57,"endColumn":52}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// /src/pages/api/sync-training-from-profile.ts\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!, // needs insert access to user_training_assignments\n);\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  if (req.method !== \"POST\")\n    return res.status(405).json({ error: \"Method not allowed\" });\n\n  const { role_profile_id, auth_ids } = req.body;\n\n  if (!role_profile_id || !Array.isArray(auth_ids) || auth_ids.length === 0) {\n    return res.status(400).json({ error: \"Missing or invalid payload\" });\n  }\n\n  try {\n    // 1. Get modules, documents, behaviours linked to this role profile\n    const { data: modules } = await supabase\n      .from(\"role_profile_modules\")\n      .select(\"module_id\")\n      .eq(\"role_profile_id\", role_profile_id);\n\n    const { data: documents } = await supabase\n      .from(\"role_profile_documents\")\n      .select(\"document_id\")\n      .eq(\"role_profile_id\", role_profile_id);\n\n    const { data: behaviours } = await supabase\n      .from(\"role_profile_behaviours\")\n      .select(\"behaviour_id\")\n      .eq(\"role_profile_id\", role_profile_id);\n\n    if (!modules || !documents || !behaviours) {\n      return res\n        .status(500)\n        .json({ error: \"Failed to fetch profile contents\" });\n    }\n\n    // 2. Build assignment records\n    const newAssignments = [];\n\n    for (const auth_id of auth_ids) {\n      for (const { module_id } of modules) {\n        newAssignments.push({ auth_id, module_id, type: \"module\" });\n      }\n      for (const { document_id } of documents) {\n        newAssignments.push({ auth_id, document_id, type: \"document\" });\n      }\n      for (const { behaviour_id } of behaviours) {\n        newAssignments.push({ auth_id, behaviour_id, type: \"behaviour\" });\n      }\n    }\n\n    // 3. Get all existing assignments for these users\n    const { data: existingAssignments } = await supabase\n      .from(\"user_training_assignments\")\n      .select(\"auth_id, module_id, document_id, behaviour_id\");\n\n    const existingSet = new Set(\n      (existingAssignments || []).map((a) =>\n        [a.auth_id, a.module_id || a.document_id || a.behaviour_id].join(\"|\"),\n      ),\n    );\n\n    // 4. Filter out duplicates\n    const filtered = newAssignments.filter((a) => {\n      const key = [\n        a.auth_id,\n        a.module_id || a.document_id || a.behaviour_id,\n      ].join(\"|\");\n      return !existingSet.has(key);\n    });\n\n    if (filtered.length > 0) {\n      await supabase.from(\"user_training_assignments\").insert(filtered);\n    }\n\n    return res.status(200).json({ inserted: filtered.length });\n  } catch (err) {\n    console.error(\"Sync error:\", err);\n    return res.status(500).json({ error: \"Internal error\" });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/training-logs/route.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'GET' has no 'await' expression.","line":32,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":32,"endColumn":26,"suggestions":[{"messageId":"removeAsync","fix":{"range":[891,897],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":38,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":38,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":86,"column":13,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":86,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":114,"endColumn":36}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// app/api/training-logs/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nexport const dynamic = \"force-dynamic\";\nexport const runtime = \"nodejs\";\n\nconst url = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!; // server-only\n\nconst admin = createClient(url, serviceRoleKey, {\n  auth: { persistSession: false },\n});\n\ntype Outcome = \"completed\" | \"needs-followup\";\ntype Payload = {\n  auth_id?: string;\n  date?: string; // \"YYYY-MM-DD\"\n  topic?: string;\n  duration_hours?: number; // number\n  outcome?: Outcome;\n  notes?: string | null;\n  signature?: string; // base64 data URL (text)\n};\n\nfunction isValidDateYYYYMMDD(s: string) {\n  if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(s)) return false;\n  const d = new Date(s + \"T00:00:00Z\");\n  return !Number.isNaN(d.getTime());\n}\n\nexport async function GET() {\n  return NextResponse.json({ ok: true, method: \"POST here to insert\" });\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body: Payload = await req.json();\n    const { auth_id, date, topic, duration_hours, outcome, notes, signature } =\n      body || {};\n\n    // Validate required fields\n    if (\n      !auth_id ||\n      !date ||\n      !topic ||\n      duration_hours == null ||\n      !outcome ||\n      !signature\n    ) {\n      return NextResponse.json(\n        { error: \"Missing required fields\", body },\n        { status: 400 },\n      );\n    }\n    if (!isValidDateYYYYMMDD(date)) {\n      return NextResponse.json(\n        { error: \"Invalid date format. Expected YYYY-MM-DD.\" },\n        { status: 400 },\n      );\n    }\n    if (outcome !== \"completed\" && outcome !== \"needs-followup\") {\n      return NextResponse.json(\n        { error: \"Invalid outcome value.\" },\n        { status: 400 },\n      );\n    }\n\n    // Optional: ensure auth_id exists in your users table (comment out if not needed)\n    const { data: u, error: lookupErr } = await admin\n      .from(\"users\")\n      .select(\"id\")\n      .eq(\"auth_id\", auth_id)\n      .single();\n\n    if (lookupErr || !u) {\n      return NextResponse.json(\n        {\n          error: \"No user found for supplied auth_id.\",\n          details: lookupErr?.message,\n        },\n        { status: 400 },\n      );\n    }\n\n    const { data, error } = await admin\n      .from(\"training_logs\")\n      .insert([\n        {\n          auth_id, // ‚Üê store auth_id, not user_id\n          date,\n          topic,\n          duration_hours,\n          outcome,\n          notes: notes ?? null,\n          signature,\n        },\n      ])\n      .select()\n      .single();\n\n    if (error) {\n      return NextResponse.json(\n        {\n          error: error.message,\n          code: error.code,\n          details: error.details,\n          hint: (error as { hint?: string })?.hint,\n        },\n        { status: 400 },\n      );\n    }\n\n    return NextResponse.json({ data }, { status: 201 });\n  } catch (e: unknown) {\n    return NextResponse.json(\n      { error: (e as Error)?.message || \"Unexpected server error\" },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/api/update-password/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":11,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":11,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":21,"column":7,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":21,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":23,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":31}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n);\n\nexport async function POST(req: Request) {\n  try {\n    const { auth_id, new_password } = await req.json();\n\n    if (!auth_id || !new_password) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 },\n      );\n    }\n\n    const { error: updateError } = await supabase.auth.admin.updateUserById(\n      auth_id,\n      {\n        password: new_password,\n      },\n    );\n\n    if (updateError) {\n      return NextResponse.json({ error: updateError.message }, { status: 500 });\n    }\n\n    return NextResponse.json(\n      { message: \"Password updated successfully\" },\n      { status: 200 },\n    );\n  } catch (err: unknown) {\n    console.error(\"Unexpected error:\", err);\n    return NextResponse.json(\n      { error: \"Unexpected server error\" },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/about/instructional-media/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/about/managing-risks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/about/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/about/sops-policies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/about/turkus/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/contact-us/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/homepage/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/hr/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/hr/people/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/compliance/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":50,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [m.id] resolves to an `any` value.","line":50,"column":19,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":50,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":55,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":64,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":66,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":66,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .module_id on an `any` value.","line":66,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":66,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":68,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":68,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [a.module_id] resolves to an `any` value.","line":69,"column":29,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":69,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .module_id on an `any` value.","line":69,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":72,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [a.auth_id] on an `any` value.","line":72,"column":27,"nodeType":"MemberExpression","messageId":"unsafeMemberExpression","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [a.auth_id] resolves to an `any` value.","line":72,"column":27,"nodeType":"MemberExpression","messageId":"unsafeComputedMemberAccess","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .auth_id on an `any` value.","line":72,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":95,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":95,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2888,2888],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2888,2888],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiBarChart2 } from \"react-icons/fi\";\n\ninterface Assignment {\n  auth_id: string;\n  name: string;\n  type: \"module\" | \"document\" | \"behaviour\";\n  completed_at?: string;\n  user?: {\n    first_name: string;\n    last_name: string;\n    department?: { name: string };\n    role?: { title: string };\n  };\n}\n\nexport default function CompliancePage() {\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [departments, setDepartments] = useState<string[]>([]);\n  const [roles, setRoles] = useState<string[]>([]);\n  const [modules, setModules] = useState<string[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const [selectedDept, setSelectedDept] = useState(\"All\");\n  const [selectedRole, setSelectedRole] = useState(\"All\");\n  const [selectedModule, setSelectedModule] = useState(\"All\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [assignmentsRaw, completionsRaw, usersRaw] = await Promise.all([\n        supabase.from(\"user_training_assignments\").select(\"*\"),\n        supabase\n          .from(\"module_completions\")\n          .select(\"auth_id, module_id, completed_at\"),\n        supabase\n          .from(\"users\")\n          .select(\n            \"auth_id, first_name, last_name, department:departments(name), role:roles(title)\",\n          ),\n      ]);\n\n      const moduleMap: Record<string, string> = {};\n      const { data: modulesList } = await supabase\n        .from(\"modules\")\n        .select(\"id, name\");\n      modulesList?.forEach((m) => {\n        moduleMap[m.id] = m.name;\n      });\n\n      const userMap = Object.fromEntries(\n        (usersRaw.data || []).map((u) => [u.auth_id, u]),\n      );\n      const completionMap = Object.fromEntries(\n        (completionsRaw.data || []).map((c) => [\n          `${c.auth_id}_${c.module_id}`,\n          c.completed_at,\n        ]),\n      );\n\n      const result: Assignment[] = (assignmentsRaw.data || [])\n        .filter((a) => a.type === \"module\")\n        .map((a) => {\n          const completed_at = completionMap[`${a.auth_id}_${a.module_id}`];\n          return {\n            auth_id: a.auth_id,\n            name: moduleMap[a.module_id] || \"Unknown Module\",\n            type: \"module\",\n            completed_at,\n            user: userMap[a.auth_id] || undefined,\n          };\n        });\n\n      setAssignments(result);\n      setDepartments([\n        ...new Set(\n          result\n            .map((r) => r.user?.department?.name)\n            .filter((x): x is string => !!x),\n        ),\n      ]);\n      setRoles([\n        ...new Set(\n          result\n            .map((r) => r.user?.role?.title)\n            .filter((x): x is string => !!x),\n        ),\n      ]);\n      setModules([\n        ...new Set(result.map((r) => r.name).filter((x): x is string => !!x)),\n      ]);\n    };\n    fetchData();\n  }, []);\n\n  const filtered = assignments\n    .filter(\n      (a) =>\n        selectedDept === \"All\" || a.user?.department?.name === selectedDept,\n    )\n    .filter(\n      (a) => selectedRole === \"All\" || a.user?.role?.title === selectedRole,\n    )\n    .filter((a) => selectedModule === \"All\" || a.name === selectedModule)\n    .filter((a) => {\n      const name =\n        `${a.user?.first_name ?? \"\"} ${a.user?.last_name ?? \"\"}`.toLowerCase();\n      return name.includes(search.toLowerCase());\n    });\n\n  const completionRate =\n    assignments.length > 0\n      ? Math.round(\n          (assignments.filter((a) => !!a.completed_at).length /\n            assignments.length) *\n            100,\n        )\n      : 0;\n\n  return (\n    <main className=\"after-hero\">\n      <div className=\"global-content\">\n        <div className=\"compliance-header\">\n          <FiBarChart2 className=\"compliance-header-icon\" />\n          <h1 className=\"compliance-title\">Compliance Dashboard</h1>\n        </div>\n        <p className=\"compliance-completion-rate\">\n          Completion Rate: <strong>{completionRate}%</strong>\n        </p>\n        <div className=\"compliance-filters\">\n          <div>\n            <label className=\"compliance-filter-label\">Department</label>\n            <select\n              value={selectedDept}\n              onChange={(e) => setSelectedDept(e.target.value)}\n              className=\"compliance-filter-input\"\n            >\n              <option value=\"All\">All</option>\n              {departments.map((d) => (\n                <option key={d} value={d}>\n                  {d}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"compliance-filter-label\">Role</label>\n            <select\n              value={selectedRole}\n              onChange={(e) => setSelectedRole(e.target.value)}\n              className=\"compliance-filter-input\"\n            >\n              <option value=\"All\">All</option>\n              {roles.map((r) => (\n                <option key={r} value={r}>\n                  {r}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"compliance-filter-label\">Module</label>\n            <select\n              value={selectedModule}\n              onChange={(e) => setSelectedModule(e.target.value)}\n              className=\"compliance-filter-input\"\n            >\n              <option value=\"All\">All</option>\n              {modules.map((m) => (\n                <option key={m} value={m}>\n                  {m}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"compliance-filter-label\">Search User</label>\n            <input\n              type=\"text\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Enter name...\"\n              className=\"compliance-filter-input\"\n            />\n          </div>\n        </div>\n        <div className=\"compliance-table-wrapper\">\n          <table className=\"compliance-table\">\n            <thead className=\"compliance-table-head\">\n              <tr>\n                <th className=\"compliance-table-th\">User</th>\n                <th className=\"compliance-table-th\">Department</th>\n                <th className=\"compliance-table-th\">Role</th>\n                <th className=\"compliance-table-th\">Module</th>\n                <th className=\"compliance-table-th\">Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filtered.map((a, i) => (\n                <tr key={i} className=\"compliance-table-row\">\n                  <td className=\"compliance-table-td\">\n                    {a.user?.first_name} {a.user?.last_name}\n                  </td>\n                  <td className=\"compliance-table-td\">\n                    {a.user?.department?.name || \"‚Äî\"}\n                  </td>\n                  <td className=\"compliance-table-td\">\n                    {a.user?.role?.title || \"‚Äî\"}\n                  </td>\n                  <td className=\"compliance-table-td\">{a.name}</td>\n                  <td className=\"compliance-table-td\">\n                    {a.completed_at ? (\n                      <span className=\"compliance-status-complete\">\n                        {new Date(a.completed_at).toLocaleDateString()}\n                      </span>\n                    ) : (\n                      <span className=\"compliance-status-incomplete\">\n                        Incomplete\n                      </span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":101,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":101,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3346,3346],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3346,3346],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { getChildDepartments } from \"@/lib/getChildDepartments\";\nimport { useUser } from \"@/lib/useUser\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiUsers,\n  FiClipboard,\n  FiAlertCircle,\n  FiActivity,\n} from \"react-icons/fi\";\nimport NeonFeatureCard from \"@/components/NeonFeatureCard\";\n\nexport default function ManagerDashboard() {\n  const { user } = useUser();\n  const [users, setUsers] = useState<\n    Array<{\n      id: string;\n      first_name: string;\n      last_name: string;\n      department?: { name?: string };\n      role?: { title?: string };\n    }>\n  >([]);\n  const [tasks, setTasks] = useState<\n    Array<{ id: string; title: string; status: string; due_date?: string }>\n  >([]);\n  const [issues, setIssues] = useState<\n    Array<{ id: string; title: string; status: string; created_at?: string }>\n  >([]);\n  const [training, setTraining] = useState<\n    Array<{ id: string; module: string; status: string; completed_at?: string }>\n  >([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Only show dashboard if user is manager or admin\n  const allowed =\n    user &&\n    typeof user.access_level === \"string\" &&\n    [\"manager\", \"admin\"].includes(user.access_level.toLowerCase());\n\n  useEffect(() => {\n    if (!allowed) return;\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch team members\n        const visibleDepartments = await getChildDepartments(\n          user.department_id,\n        );\n        const { data: teamData, error: teamError } = await supabase\n          .from(\"users\")\n          .select(\n            \"id, first_name, last_name, department:departments(name), role:roles(title)\",\n          )\n          .in(\"department_id\", visibleDepartments)\n          .gt(\"access_level\", user.access_level);\n        if (teamError) throw teamError;\n        // Normalize department and role to single objects\n        setUsers(\n          (teamData || []).map((u) => ({\n            ...u,\n            department: Array.isArray(u.department)\n              ? u.department[0]\n              : u.department,\n            role: Array.isArray(u.role) ? u.role[0] : u.role,\n          })),\n        );\n\n        // Fetch manager's tasks\n        const { data: tasksData, error: tasksError } = await supabase\n          .from(\"tasks\")\n          .select(\"id, title, status, due_date\")\n          .eq(\"assigned_to\", user.auth_id);\n        if (tasksError) throw tasksError;\n        setTasks(tasksData || []);\n\n        // Fetch manager's issues\n        const { data: issuesData, error: issuesError } = await supabase\n          .from(\"issues\")\n          .select(\"id, title, status, created_at\")\n          .eq(\"assigned_to\", user.auth_id);\n        if (issuesError) throw issuesError;\n        setIssues(issuesData || []);\n\n        // Fetch manager's training\n        const { data: trainingData, error: trainingError } = await supabase\n          .from(\"training\")\n          .select(\"id, module, status, completed_at\")\n          .eq(\"auth_id\", user.auth_id);\n        if (trainingError) throw trainingError;\n        setTraining(trainingData || []);\n      } catch {\n        setError(\"Failed to load dashboard data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [user, allowed]);\n\n  // Show loading if user is not loaded yet\n  if (typeof user === \"undefined\") {\n    return (\n      <main className=\"after-hero\">\n        <div className=\"global-content\">\n          <p className=\"manager-dashboard-loading\">Loading user...</p>\n        </div>\n      </main>\n    );\n  }\n\n  if (!allowed)\n    return (\n      <main className=\"after-hero\">\n        <div className=\"global-content\">\n          <p className=\"manager-dashboard-error\">Access denied.</p>\n        </div>\n      </main>\n    );\n\n  return (\n    <main className=\"after-hero\">\n      <div className=\"global-content manager-dashboard-cards\">\n        {loading ? (\n          <p className=\"manager-dashboard-loading\">Loading...</p>\n        ) : error ? (\n          <p className=\"manager-dashboard-error\">{error}</p>\n        ) : (\n          <>\n            {/* Team Section */}\n            <NeonFeatureCard\n              title=\"My Team\"\n              icon={<FiUsers />}\n              text=\"Your direct reports and team members.\"\n              href=\"/manager/team\"\n            >\n              {users.length === 0 ? (\n                <p>No team members found.</p>\n              ) : (\n                <table className=\"manager-dashboard-table\">\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Department</th>\n                      <th>Role</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {users.map((u, i) => (\n                      <tr key={i}>\n                        <td>\n                          {u.first_name} {u.last_name}\n                        </td>\n                        <td>{u.department?.name || \"‚Äî\"}</td>\n                        <td>{u.role?.title || \"‚Äî\"}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </NeonFeatureCard>\n\n            {/* Tasks Section */}\n            <NeonFeatureCard\n              title=\"My Tasks\"\n              icon={<FiClipboard />}\n              text=\"Your assigned tasks and deadlines.\"\n              href=\"/manager/tasks\"\n            >\n              {tasks.length === 0 ? (\n                <p>No tasks assigned.</p>\n              ) : (\n                <table className=\"manager-dashboard-table\">\n                  <thead>\n                    <tr>\n                      <th>Title</th>\n                      <th>Status</th>\n                      <th>Due Date</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {tasks.map((t, i) => (\n                      <tr key={i}>\n                        <td>{t.title}</td>\n                        <td>{t.status}</td>\n                        <td>\n                          {t.due_date\n                            ? new Date(t.due_date).toLocaleDateString()\n                            : \"‚Äî\"}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </NeonFeatureCard>\n\n            {/* Issues Section */}\n            <NeonFeatureCard\n              title=\"My Issues\"\n              icon={<FiAlertCircle />}\n              text=\"Your open issues and tickets.\"\n              href=\"/manager/issues\"\n            >\n              {issues.length === 0 ? (\n                <p>No issues assigned.</p>\n              ) : (\n                <table className=\"manager-dashboard-table\">\n                  <thead>\n                    <tr>\n                      <th>Title</th>\n                      <th>Status</th>\n                      <th>Created At</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {issues.map((iss, i) => (\n                      <tr key={i}>\n                        <td>{iss.title}</td>\n                        <td>{iss.status}</td>\n                        <td>\n                          {iss.created_at\n                            ? new Date(iss.created_at).toLocaleDateString()\n                            : \"‚Äî\"}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </NeonFeatureCard>\n\n            {/* Training Section */}\n            <NeonFeatureCard\n              title=\"My Training\"\n              icon={<FiActivity />}\n              text=\"Your training modules and completion status.\"\n              href=\"/manager/training\"\n            >\n              {training.length === 0 ? (\n                <p>No training records found.</p>\n              ) : (\n                <table className=\"manager-dashboard-table\">\n                  <thead>\n                    <tr>\n                      <th>Module</th>\n                      <th>Status</th>\n                      <th>Completed At</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {training.map((tr, i) => (\n                      <tr key={i}>\n                        <td>{tr.module}</td>\n                        <td>{tr.status}</td>\n                        <td>\n                          {tr.completed_at\n                            ? new Date(tr.completed_at).toLocaleDateString()\n                            : \"‚Äî\"}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </NeonFeatureCard>\n          </>\n        )}\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/issues/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/reports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/risks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/tasks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/manager/training/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/training/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/training/log/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/training/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/about/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/assignments/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":102,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":102,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2811,2811],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2811,2811],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonTable from \"@/components/NeonTable\";\nimport MyTasksWidget from \"@/components/task/MyTasksWidget\";\nimport { FiAlertCircle, FiClock } from \"react-icons/fi\";\n\n// Type definitions\ninterface TurkusTask {\n  id: string;\n  title: string;\n  area: string;\n  frequency: string;\n}\n\ninterface User {\n  auth_id: string;\n  first_name: string;\n  last_name: string;\n  department_id: string;\n}\n\ninterface Assignment {\n  id: string;\n  due_date: string;\n  task?: { title: string } | null;\n  user?: {\n    first_name: string;\n    last_name: string;\n    department_id: string;\n  } | null;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\nexport default function TurkusAssignmentsPage() {\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [tasks, setTasks] = useState<TurkusTask[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedTask, setSelectedTask] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  useEffect(() => {\n    const fetchAll = async () => {\n      setLoading(true);\n\n      const [\n        { data: tasks },\n        { data: users },\n        { data: assignments },\n        { data: departments },\n      ] = await Promise.all([\n        supabase.from(\"turkus_tasks\").select(\"id, title, area, frequency\"),\n        supabase\n          .from(\"users\")\n          .select(\"auth_id, first_name, last_name, department_id\"),\n        supabase.from(\"turkus_assignments\").select(`\n            id,\n            due_date,\n            task:turkus_tasks (title),\n            user:users (first_name, last_name, department_id)\n          `),\n        supabase.from(\"departments\").select(\"id, name\"),\n      ]);\n\n      setTasks(tasks || []);\n      setUsers(users || []);\n      // Normalize assignments from Supabase response\n      setAssignments(\n        (assignments || []).map(\n          (a: {\n            id: string;\n            due_date: string;\n            task: { title: string }[] | null;\n            user:\n              | {\n                  first_name: string;\n                  last_name: string;\n                  department_id: string;\n                }[]\n              | null;\n          }) => ({\n            id: a.id,\n            due_date: a.due_date,\n            task: Array.isArray(a.task) ? a.task[0] || null : (a.task ?? null),\n            user: Array.isArray(a.user) ? a.user[0] || null : (a.user ?? null),\n          }),\n        ),\n      );\n      setDepartments(departments || []);\n      setLoading(false);\n    };\n\n    fetchAll();\n  }, []);\n\n  const handleAssign = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedTask || !selectedUser || !dueDate) {\n      alert(\"Please select task, user, and due date.\");\n      return;\n    }\n\n    const user = users.find((u) => u.auth_id === selectedUser);\n\n    const { error } = await supabase.from(\"turkus_assignments\").insert({\n      task_id: selectedTask,\n      user_auth_id: selectedUser,\n      department_id: user?.department_id || null,\n      due_date: dueDate,\n    });\n\n    if (error) {\n      alert(\"Failed to assign task.\");\n      console.error(error);\n    } else {\n      setSelectedTask(\"\");\n      setSelectedUser(\"\");\n      setDueDate(\"\");\n\n      // Refresh assignments\n      const { data } = await supabase.from(\"turkus_assignments\").select(`\n          id,\n          due_date,\n          task:turkus_tasks (title),\n          user:users (first_name, last_name, department_id)\n        `);\n\n      setAssignments(\n        (data || []).map(\n          (a: {\n            id: string;\n            due_date: string;\n            task: { title: string }[] | null;\n            user:\n              | {\n                  first_name: string;\n                  last_name: string;\n                  department_id: string;\n                }[]\n              | null;\n          }) => ({\n            id: a.id,\n            due_date: a.due_date,\n            task: Array.isArray(a.task) ? a.task[0] || null : (a.task ?? null),\n            user: Array.isArray(a.user) ? a.user[0] || null : (a.user ?? null),\n          }),\n        ),\n      );\n    }\n  };\n\n  return (\n    <>\n      <div className=\"centered-content\">\n        <div className=\"max-w-6xl w-full px-8 mt-10 overflow-visible\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n            <NeonForm\n              title=\"Assign a Task\"\n              onSubmit={handleAssign}\n              submitLabel=\"Assign Task\"\n            >\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                <div>\n                  <label className=\"neon-form-title\">Task</label>\n                  <select\n                    value={selectedTask}\n                    onChange={(e) => setSelectedTask(e.target.value)}\n                    className=\"neon-input\"\n                    required\n                  >\n                    <option value=\"\">Select a task</option>\n                    {tasks.map((t) => (\n                      <option key={t.id} value={t.id}>\n                        {t.title}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"neon-form-title\">User</label>\n                  <select\n                    value={selectedUser}\n                    onChange={(e) => setSelectedUser(e.target.value)}\n                    className=\"neon-input\"\n                    required\n                  >\n                    <option value=\"\">Select a user</option>\n                    {users.map((u) => (\n                      <option key={u.auth_id} value={u.auth_id}>\n                        {u.first_name} {u.last_name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"neon-form-title\">Due Date</label>\n                  <input\n                    type=\"date\"\n                    value={dueDate}\n                    onChange={(e) => setDueDate(e.target.value)}\n                    className=\"neon-input\"\n                    required\n                  />\n                </div>\n              </div>\n            </NeonForm>\n            <MyTasksWidget />\n          </div>\n          {loading ? (\n            <p className=\"neon-success\">Loading assignments...</p>\n          ) : assignments.length === 0 ? (\n            <p className=\"neon-success\">No assignments found.</p>\n          ) : (\n            <div className=\"turkus-assignments-table-wrapper\">\n              <NeonTable\n                columns={[\n                  { header: \"Task\", accessor: \"task\" },\n                  { header: \"User\", accessor: \"user\" },\n                  { header: \"Department\", accessor: \"department\" },\n                  { header: \"Due Date\", accessor: \"due_date\" },\n                ]}\n                data={assignments.map((a) => {\n                  let dueDateCell: React.ReactNode = \"-\";\n                  if (a.due_date) {\n                    const due = new Date(a.due_date);\n                    const today = new Date();\n                    today.setHours(0, 0, 0, 0);\n                    const diff =\n                      (due.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);\n                    if (diff < 0) {\n                      // Overdue\n                      dueDateCell = (\n                        <span\n                          className=\"neon-error animate-pulse flex items-center justify-center cursor-pointer relative group\"\n                          tabIndex={0}\n                        >\n                          <FiAlertCircle className=\"inline\" />\n                          <span className=\"assignment-tooltip assignment-tooltip-error\">\n                            Overdue: This assignment was due on{\" \"}\n                            {due.toLocaleDateString(\"en-GB\")}\n                          </span>\n                        </span>\n                      );\n                    } else if (diff <= 1) {\n                      // Due today or tomorrow\n                      dueDateCell = (\n                        <span\n                          className=\"neon-warning animate-pulse flex items-center justify-center cursor-pointer relative group\"\n                          tabIndex={0}\n                        >\n                          <FiClock className=\"inline\" />\n                          <span className=\"assignment-tooltip assignment-tooltip-warning\">\n                            Due soon: {due.toLocaleDateString(\"en-GB\")}\n                          </span>\n                        </span>\n                      );\n                    } else {\n                      dueDateCell = (\n                        <span className=\"neon-info flex items-center justify-center\">\n                          {due.toLocaleDateString(\"en-GB\")}\n                        </span>\n                      );\n                    }\n                  }\n                  // Get department name from departments list\n                  let departmentName = \"-\";\n                  if (a.user && a.user.department_id) {\n                    const deptObj = departments.find(\n                      (d) => d.id === a.user?.department_id,\n                    );\n                    departmentName =\n                      deptObj?.name || a.user.department_id || \"-\";\n                  }\n                  return {\n                    task: a.task?.title || \"-\",\n                    user: a.user\n                      ? `${a.user.first_name} ${a.user.last_name}`\n                      : \"-\",\n                    department: departmentName,\n                    due_date: dueDateCell,\n                  };\n                })}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/audit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/auditors/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/documents/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/firstaid/FirstAiderReport.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":34,"column":42,"nodeType":"ChainExpression","messageId":"unsafeReturn","endLine":34,"endColumn":60},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":39,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":39,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1287,1287],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1287,1287],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface FirstAider {\n  id: string;\n  first_name: string;\n  last_name: string;\n  department: { name: string } | { name?: string } | null;\n  is_first_aid: string;\n}\n\nexport default function FirstAiderReport() {\n  const [firstAiders, setFirstAiders] = useState<FirstAider[]>([]);\n  const [departments, setDepartments] = useState<string[]>([]);\n  const [selectedDept, setSelectedDept] = useState(\"All\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const { data: users } = await supabase\n        .from(\"users\")\n        .select(\"id, first_name, last_name, departments(name), is_first_aid\")\n        .eq(\"is_first_aid\", \"YES\");\n      // Map departments to a single object for each user\n      const usersWithDept = (users || []).map((u) => ({\n        ...u,\n        department: Array.isArray(u.departments)\n          ? u.departments[0]\n          : u.departments,\n      }));\n      setFirstAiders(usersWithDept);\n      const uniqueDepts = Array.from(\n        new Set(usersWithDept.map((u) => u.department?.name).filter(Boolean)),\n      );\n      setDepartments(uniqueDepts);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  const filtered =\n    selectedDept === \"All\"\n      ? firstAiders\n      : firstAiders.filter((fa) => fa.department?.name === selectedDept);\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <main className=\"first-aider-report-bg\">\n      <div className=\"first-aider-report-container\">\n        <div className=\"first-aider-report-toolbar\">\n          <label className=\"first-aider-report-label\">\n            Department:\n            <select\n              className=\"first-aider-report-select\"\n              value={selectedDept}\n              onChange={(e) => setSelectedDept(e.target.value)}\n            >\n              <option value=\"All\">All</option>\n              {departments.map((d) => (\n                <option key={d} value={d}>\n                  {d}\n                </option>\n              ))}\n            </select>\n          </label>\n          <button\n            onClick={handlePrint}\n            className=\"neon-btn neon-btn-print first-aider-report-print-btn\"\n            data-variant=\"print\"\n          >\n            <span style={{ marginRight: \"0.5em\" }}>Print / Save as PDF</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"feather feather-printer\"\n            >\n              <polyline points=\"6 9 6 2 18 2 18 9\"></polyline>\n              <path d=\"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2\"></path>\n              <rect x=\"6\" y=\"14\" width=\"12\" height=\"8\"></rect>\n            </svg>\n          </button>\n        </div>\n        <div className=\"first-aider-report-table-wrapper\">\n          {loading ? (\n            <p className=\"first-aider-report-loading\">Loading...</p>\n          ) : filtered.length === 0 ? (\n            <p className=\"first-aider-report-empty\">\n              No first aiders found for this department.\n            </p>\n          ) : (\n            <table className=\"first-aider-report-table\">\n              <thead className=\"first-aider-report-table-head\">\n                <tr>\n                  <th className=\"first-aider-report-th\">Name</th>\n                  <th className=\"first-aider-report-th\">Department</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filtered.map((fa) => (\n                  <tr key={fa.id} className=\"first-aider-report-tr\">\n                    <td className=\"first-aider-report-td\">\n                      {fa.first_name} {fa.last_name}\n                    </td>\n                    <td className=\"first-aider-report-td\">\n                      {fa.department?.name || \"‚Äî\"}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/firstaid/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/incidents/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/incidents/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleSubmit' has no 'await' expression.","line":18,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":18,"endColumn":53,"suggestions":[{"messageId":"removeAsync","fix":{"range":[661,667],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport { FiAlertCircle, FiCheck } from \"react-icons/fi\";\n\nexport default function AddIncidentPage() {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [reporter, setReporter] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n    setError(\"\");\n    // TODO: Add supabase insert logic here\n    setTimeout(() => {\n      setSaving(false);\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 1200);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <main className=\"page-main\">\n          <NeonPanel className=\"add-incident-panel\">\n            <h1 className=\"add-incident-title\">\n              <FiAlertCircle className=\"add-incident-title-icon\" />\n            </h1>\n            <form onSubmit={handleSubmit} className=\"add-incident-form\">\n              <div className=\"add-incident-field\">\n                <label className=\"add-incident-label\">Incident Title</label>\n                <input\n                  type=\"text\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  className=\"add-incident-input\"\n                  required\n                />\n              </div>\n              <div className=\"add-incident-field\">\n                <label className=\"add-incident-label\">Description</label>\n                <textarea\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"add-incident-input\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div className=\"add-incident-field\">\n                <label className=\"add-incident-label\">Date</label>\n                <input\n                  type=\"date\"\n                  value={date}\n                  onChange={(e) => setDate(e.target.value)}\n                  className=\"add-incident-input\"\n                  required\n                />\n              </div>\n              <div className=\"add-incident-field\">\n                <label className=\"add-incident-label\">Location</label>\n                <input\n                  type=\"text\"\n                  value={location}\n                  onChange={(e) => setLocation(e.target.value)}\n                  className=\"add-incident-input\"\n                  required\n                />\n              </div>\n              <div className=\"add-incident-field\">\n                <label className=\"add-incident-label\">Reporter Name</label>\n                <input\n                  type=\"text\"\n                  value={reporter}\n                  onChange={(e) => setReporter(e.target.value)}\n                  className=\"add-incident-input\"\n                  required\n                />\n              </div>\n              {error && <p className=\"add-incident-error\">{error}</p>}\n              {success && (\n                <p className=\"add-incident-success\">\n                  <FiCheck /> Incident recorded!\n                </p>\n              )}\n              <div className=\"add-incident-actions\">\n                <NeonIconButton\n                  variant=\"submit\"\n                  icon={<FiCheck />}\n                  title={saving ? \"Saving...\" : \"Record Incident\"}\n                  type=\"submit\"\n                  disabled={saving}\n                />\n              </div>\n            </form>\n          </NeonPanel>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":10,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":10,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[305,305],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[305,305],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// This file was moved from /manager/health-safety/page.tsx\n\"use client\";\n\nimport HealthSafetyManager from \"@/components/turkus/HealthSafetyManager\";\nimport { useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport default function HealthSafetyPage() {\n  useEffect(() => {\n    supabase.auth.getUser();\n  }, []);\n\n  return (\n    <main>\n      <div className=\"neon-panel\">\n        <HealthSafetyManager />\n      </div>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/policies/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":33,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":33,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Policy | null>`.","line":39,"column":17,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":42,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1140,1140],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1140,1140],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport { FiFileText } from \"react-icons/fi\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useParams } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\n\ntype Policy = {\n  id?: string;\n  title?: string;\n  description?: string;\n  // Add more fields as needed\n};\n\nexport default function PolicyDetailPage() {\n  const params = useParams();\n  const id =\n    typeof params === \"object\" && params !== null && \"id\" in params\n      ? (params as { id?: string }).id\n      : undefined;\n  const [policy, setPolicy] = useState<Policy | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (!id) {\n      setError(\"No policy ID provided.\");\n      setLoading(false);\n      return;\n    }\n    const fetchPolicy = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"policies\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .single();\n      if (error) setError(error.message);\n      setPolicy(data);\n      setLoading(false);\n    };\n    fetchPolicy();\n  }, [id]);\n\n  if (loading)\n    return (\n      <NeonPanel>\n        <p>Loading...</p>\n      </NeonPanel>\n    );\n  if (error)\n    return (\n      <NeonPanel>\n        <p className=\"neon-error\">{error}</p>\n      </NeonPanel>\n    );\n  if (!policy)\n    return (\n      <NeonPanel>\n        <p>No policy found.</p>\n      </NeonPanel>\n    );\n\n  return (\n    <NeonPanel>\n      <h1 className=\"flex items-center gap-2 text-xl font-bold mb-4\">\n        <FiFileText /> {policy.title}\n      </h1>\n      <p className=\"mb-2\">{policy.description}</p>\n      {/* Add more policy details here as needed */}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/policies/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleSubmit' has no 'await' expression.","line":15,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":15,"endColumn":53,"suggestions":[{"messageId":"removeAsync","fix":{"range":[520,526],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport { FiFileText, FiCheck } from \"react-icons/fi\";\n\nexport default function AddPolicyPage() {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n    setError(\"\");\n    // TODO: Add supabase upload logic here\n    setTimeout(() => {\n      setSaving(false);\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 1200);\n    }, 1000);\n  };\n\n  return (\n    <NeonPanel className=\"add-policy-panel\">\n      <h1 className=\"add-policy-title\">\n        <FiFileText className=\"add-policy-title-icon\" />\n      </h1>\n      <form onSubmit={handleSubmit} className=\"add-policy-form\">\n        <div className=\"add-policy-field\">\n          <label className=\"add-policy-label\">Policy Title</label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className=\"add-policy-input\"\n            required\n          />\n        </div>\n        <div className=\"add-policy-field\">\n          <label className=\"add-policy-label\">Description</label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"add-policy-input\"\n            rows={3}\n            required\n          />\n        </div>\n        <div className=\"add-policy-field\">\n          <label className=\"add-policy-label\">Upload File</label>\n          <input\n            type=\"file\"\n            accept=\".pdf,.doc,.docx,.txt\"\n            className=\"add-policy-input\"\n            required\n          />\n        </div>\n        {error && <p className=\"add-policy-error\">{error}</p>}\n        {success && (\n          <p className=\"add-policy-success\">\n            <FiCheck /> Policy uploaded!\n          </p>\n        )}\n        <div className=\"add-policy-actions\">\n          <NeonIconButton\n            variant=\"submit\"\n            icon={<FiCheck />}\n            title={saving ? \"Uploading...\" : \"Upload Policy\"}\n            type=\"submit\"\n            disabled={saving}\n          />\n        </div>\n      </form>\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/health-safety/policies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/[issueId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":34,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":34,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1061,1061],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1061,1061],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter } from \"next/navigation\";\nimport { FiAlertCircle } from \"react-icons/fi\";\nimport Modal from \"@/components/modal\";\n\nexport default function RaiseIssuePage() {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [priority, setPriority] = useState(\"Medium\");\n  const [category] = useState(\"\");\n  const [departmentId, setDepartmentId] = useState(\"\");\n  const [departments, setDepartments] = useState<\n    { id: string; name: string }[]\n  >([]);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchDepartments = async () => {\n      const { data, error } = await supabase\n        .from(\"departments\")\n        .select(\"id, name\");\n      if (error) {\n        console.error(\"Error fetching departments:\", error);\n      } else {\n        setDepartments(data || []);\n      }\n    };\n\n    fetchDepartments();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      setError(\"Authentication error. Please log in again.\");\n      setLoading(false);\n      return;\n    }\n\n    const { error: insertError } = await supabase.from(\"issues\").insert([\n      {\n        title,\n        description,\n        priority,\n        category,\n        department_id: departmentId,\n        reported_by: user.id,\n      },\n    ]);\n\n    setLoading(false);\n\n    if (insertError) {\n      setError(insertError.message);\n    } else {\n      router.push(\"/turkus/issues\");\n    }\n  };\n\n  return (\n    <Modal open={true} onClose={() => router.push(\"/turkus/issues\")}>\n      <form className=\"neon-panel\" onSubmit={handleSubmit}>\n        <h1 className=\"font-title accent-text\">New Issue</h1>\n        <input\n          className=\"neon-input\"\n          placeholder=\"Issue Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n        <textarea\n          className=\"neon-input\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={3}\n          required\n        />\n        <select\n          className=\"neon-input\"\n          value={priority}\n          onChange={(e) => setPriority(e.target.value)}\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"High\">High</option>\n        </select>\n        <select\n          className=\"neon-input\"\n          value={departmentId}\n          onChange={(e) => setDepartmentId(e.target.value)}\n          required\n        >\n          <option value=\"\">Select Department</option>\n          {departments.map((d) => (\n            <option key={d.id} value={d.id}>\n              {d.name}\n            </option>\n          ))}\n        </select>\n        {error && (\n          <p className=\"neon-error\">\n            <FiAlertCircle /> {error}\n          </p>\n        )}\n        <button type=\"submit\" className=\"neon-btn\" disabled={loading}>\n          <FiAlertCircle\n            style={{ display: loading ? \"none\" : \"inline-block\" }}\n          />\n          {loading ? <span>Submitting...</span> : <span>Submit Issue</span>}\n        </button>\n      </form>\n    </Modal>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/components/AssignIssue.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":32,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":43,"endColumn":8,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[902,902],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[902,902],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":33,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":33,"endColumn":68}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonForm from \"@/components/NeonForm\";\n\ninterface User {\n  id: string;\n  first_name: string;\n  last_name: string;\n  department_id: string;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\nexport default function AssignIssue({ issueId }: { issueId: string }) {\n  const [users, setUsers] = useState<User[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // Fetch all departments\n    supabase\n      .from(\"departments\")\n      .select(\"id, name\")\n      .then(({ data }) => setDepartments(data || []));\n    // Fetch users in the current department only\n    supabase.auth.getUser().then(({ data }) => {\n      const departmentId = data?.user?.user_metadata?.department_id;\n      if (departmentId) {\n        supabase\n          .from(\"users\")\n          .select(\"id, first_name, last_name, department_id\")\n          .eq(\"department_id\", departmentId)\n          .then(({ data }) => setUsers(data || []));\n      } else {\n        setUsers([]);\n      }\n    });\n  }, []);\n\n  const handleAssign = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    await supabase\n      .from(\"issues\")\n      .update({\n        assigned_auth_id: selectedUser || null,\n        department_id: selectedDepartment || null,\n        reassigned_at: new Date().toISOString(),\n        reassigned_to_department: selectedDepartment || null,\n      })\n      .eq(\"id\", issueId);\n    setLoading(false);\n    alert(\"Issue assignment updated!\");\n    window.location.href = \"/turkus/issues/my\";\n  };\n\n  return (\n    <div className=\"centered-content\">\n      <NeonForm title=\"Assign Issue\" onSubmit={handleAssign}>\n        <select\n          className=\"neon-input\"\n          value={selectedUser}\n          onChange={(e) => setSelectedUser(e.target.value)}\n        >\n          <option value=\"\">Select User</option>\n          {users.map((u) => (\n            <option key={u.id} value={u.id}>\n              {u.first_name} {u.last_name}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"neon-input\"\n          value={selectedDepartment}\n          onChange={(e) => setSelectedDepartment(e.target.value)}\n        >\n          <option value=\"\">Select Department</option>\n          {departments.map((d) => (\n            <option key={d.id} value={d.id}>\n              {d.name}\n            </option>\n          ))}\n        </select>\n        <button\n          type=\"submit\"\n          className=\"neon-btn w-full mt-4\"\n          disabled={loading}\n        >\n          {loading ? \"Assigning...\" : \"Assign Issue\"}\n        </button>\n      </NeonForm>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/components/MyIssues.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":41,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":42,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":43,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":44,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":44,"endColumn":45},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":53,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":53,"endColumn":13,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1596,1596],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1596,1596],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiAlertCircle } from \"react-icons/fi\"; // Add Fi icon import\n\ninterface Department {\n  name: string;\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  priority: string;\n  status: string;\n  created_at: string;\n  departments?: Department[] | Department | null;\n  department?: Department | null;\n}\n\nexport default function MyIssues() {\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetch = async () => {\n      // TODO: Replace with your actual auth logic\n      const authData = { user: { user_metadata: { department_id: \"\" } } };\n      if (!authData?.user) {\n        setIssues([]);\n        setLoading(false);\n        return;\n      }\n      // Fetch issues for user's department\n      const { data } = await supabase\n        .from(\"issues\")\n        .select(\"id, title, priority, status, created_at, departments (name)\")\n        .eq(\"department_id\", authData.user.user_metadata?.department_id || \"\");\n      setIssues(\n        (data || []).map((issue) => ({\n          id: Number(issue.id),\n          title: issue.title ?? \"\",\n          priority: issue.priority ?? \"\",\n          status: issue.status ?? \"\",\n          created_at: issue.created_at ?? \"\",\n          departments: issue.departments ?? null,\n          department: Array.isArray(issue?.departments)\n            ? issue.departments[0]\n            : (issue?.departments ?? null),\n        })),\n      );\n      setLoading(false);\n    };\n    fetch();\n  }, []);\n  return (\n    <div className=\"p-5\">\n      <h1 className=\"text-2xl font-bold mb-4\">My Issues</h1>\n      {loading ? (\n        <div>Loading...</div>\n      ) : issues.length === 0 ? (\n        <div className=\"flex items-center text-gray-500\">\n          <FiAlertCircle className=\"mr-2\" />\n          No issues found.\n        </div>\n      ) : (\n        <ul>\n          {issues.map((issue) => (\n            <li key={issue.id} className=\"my-issues-list-item\">\n              <div>\n                <div className=\"my-issues-title\">{issue.title}</div>\n                <div className=\"my-issues-meta\">\n                  Priority: {issue.priority} ¬∑ Status: {issue.status} ¬∑{\" \"}\n                  {new Date(issue.created_at).toLocaleDateString()} ¬∑\n                  Department: {issue.department?.name || \"N/A\"}\n                </div>\n              </div>\n              <button\n                className=\"my-issues-view-btn\"\n                onClick={() =>\n                  (window.location.href = `/turkus/issues/${issue.id}`)\n                }\n              >\n                View Issue\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/my/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/issues/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'(issue.departments as { name?: unknown }).name ?? \"‚Äî\"' will use Object's default stringification format ('[object Object]') when stringified.","line":52,"column":19,"nodeType":"LogicalExpression","messageId":"baseToString","endLine":52,"endColumn":72},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":69,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":69,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1873,1873],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1873,1873],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\ntype Issue = {\n  id: string;\n  title: string;\n  priority: string;\n  status: string;\n  created_at: string;\n  departments?: {\n    name: string;\n  };\n};\n\nexport default function IssuesListPage() {\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchIssues = async () => {\n      const { data, error } = await supabase\n        .from(\"issues\")\n        .select(\n          \"id, title, priority, status, created_at, department_id, departments (id, name)\",\n        )\n        .order(\"created_at\", { ascending: false });\n\n      if (error) {\n        console.error(\"Error fetching issues:\", error);\n      } else {\n        setIssues(\n          (data || []).map((issue) => {\n            let departmentObj: { name: string } | undefined = undefined;\n            if (\n              Array.isArray(issue.departments) &&\n              issue.departments.length > 0\n            ) {\n              departmentObj = {\n                name: String(issue.departments[0]?.name ?? \"‚Äî\"),\n              };\n            } else if (\n              issue.departments &&\n              typeof issue.departments === \"object\" &&\n              \"name\" in issue.departments\n            ) {\n              departmentObj = {\n                name: String(\n                  (issue.departments as { name?: unknown }).name ?? \"‚Äî\",\n                ),\n              };\n            } else {\n              departmentObj = { name: \"‚Äî\" };\n            }\n            return {\n              ...issue,\n              departments: departmentObj,\n            };\n          }),\n        );\n      }\n\n      setLoading(false);\n    };\n\n    fetchIssues();\n  }, []);\n\n  return (\n    <div className=\"centered-content\">\n      <div className=\"issues-list-container\">\n        {loading ? (\n          <p className=\"neon-success\">Loading issues...</p>\n        ) : (\n          <NeonTable\n            columns={[\n              { header: \"Title\", accessor: \"title\" },\n              { header: \"Priority\", accessor: \"priority\" },\n              { header: \"Status\", accessor: \"status\" },\n              { header: \"Created\", accessor: \"created_at\" },\n              { header: \"Department\", accessor: \"department\" },\n              { header: \"\", accessor: \"actions\" },\n            ]}\n            data={issues.map((issue) => ({\n              title: issue.title,\n              priority: issue.priority,\n              status: issue.status,\n              created_at: issue.created_at\n                ? new Date(issue.created_at).toLocaleDateString(\"en-GB\")\n                : \"‚Äî\",\n              department: issue.departments?.name || \"‚Äî\",\n              actions: (\n                <NeonIconButton\n                  variant=\"view\"\n                  as=\"link\"\n                  href={`/turkus/issues/${issue.id}`}\n                  title=\"View Issue\"\n                  className=\"neon-btn-view\"\n                />\n              ),\n            }))}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/reports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":71,"column":19,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":71,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":83,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":93,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":93,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":93,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":25},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":117,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":117,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3222,3222],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3222,3222],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\";\nimport { useUser } from \"@/lib/useUser\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\n// TaskListWidget: shows all tasks\n// TaskAssignWidget: handles assigning tasks to users\n// TaskCreateWidget: for creating new tasks\n// TaskAmendWidget: for editing/amending tasks\n// MyTasksWidget: shows tasks assigned to the logged-in user\n// These widgets should be created in /components/task and imported as needed.\n\nexport default function AddTurkusTaskPage() {\n  const router = useRouter();\n  const { user } = useUser();\n  const [title, setTitle] = useState(\"\");\n  const [area, setArea] = useState(\"\");\n  const [frequency, setFrequency] = useState(\"Daily\");\n  const [instructions, setInstructions] = useState(\"\");\n  const [questions, setQuestions] = useState<string[]>([\"\"]);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const frequencies = [\n    \"Hourly\",\n    \"Every Few Hours\",\n    \"Twice Daily\",\n    \"Daily\",\n    \"Weekly\",\n    \"Monthly\",\n    \"Quarterly\",\n    \"Annually\",\n  ];\n\n  const addQuestion = () => setQuestions([...questions, \"\"]);\n\n  const updateQuestion = (index: number, value: string) => {\n    const updated = [...questions];\n    updated[index] = value;\n    setQuestions(updated);\n  };\n\n  const removeQuestion = (index: number) => {\n    const filtered = questions.filter((_, idx) => idx !== index);\n    setQuestions(filtered.length > 0 ? filtered : [\"\"]);\n  };\n\n  const handleSubmit = async () => {\n    if (!title.trim()) {\n      setError(\"Task title is required.\");\n      return;\n    }\n\n    if (!user?.auth_id) {\n      setError(\"User not found. Please log in again.\");\n      return;\n    }\n\n    if (questions.some((q) => q.trim() === \"\")) {\n      setError(\"Please fill in all steps or remove empty ones.\");\n      return;\n    }\n\n    setSaving(true);\n    setError(null);\n\n    const { data: task, error: insertError } = await supabase\n      .from(\"turkus_tasks\")\n      .insert({\n        title: title.trim(),\n        area: area.trim(),\n        frequency,\n        instructions: instructions.trim(),\n        created_by: user.auth_id,\n      })\n      .select()\n      .single();\n\n    if (insertError || !task?.id) {\n      console.error(insertError);\n      setError(\"‚ùå Failed to create task.\");\n      setSaving(false);\n      return;\n    }\n\n    const validQuestions = questions.filter((q) => q.trim() !== \"\");\n    if (validQuestions.length > 0) {\n      const formatted = validQuestions.map((q, idx) => ({\n        task_id: task.id,\n        question_text: q.trim(),\n        sort_order: idx + 1,\n      }));\n      const { error: qError } = await supabase\n        .from(\"turkus_task_questions\")\n        .insert(formatted);\n\n      if (qError) {\n        console.error(qError);\n        setError(\"Task saved, but failed to save steps.\");\n        setSaving(false);\n        return;\n      }\n    }\n\n    alert(\"‚úÖ Task created successfully.\");\n    router.push(\"/turkus/tasks\");\n  };\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        handleSubmit();\n      }}\n    >\n      <h1 className=\"neon-section-title\">Add Turkus Task</h1>\n      <div>\n        <label className=\"neon-label\">Title</label>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"e.g. Inspect freezer door\"\n          className=\"neon-input\"\n        />\n      </div>\n      <div>\n        <label className=\"neon-label\">Area</label>\n        <input\n          type=\"text\"\n          value={area}\n          onChange={(e) => setArea(e.target.value)}\n          placeholder=\"e.g. Cold Room\"\n          className=\"neon-input\"\n        />\n      </div>\n      <div>\n        <label className=\"neon-label\">Frequency</label>\n        <select\n          value={frequency}\n          onChange={(e) => setFrequency(e.target.value)}\n          className=\"neon-input\"\n        >\n          {frequencies.map((f) => (\n            <option key={f} value={f}>\n              {f}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label className=\"neon-label\">\n          Instructions <span className=\"neon-label-optional\">(optional)</span>\n        </label>\n        <textarea\n          rows={3}\n          value={instructions}\n          onChange={(e) => setInstructions(e.target.value)}\n          className=\"neon-input\"\n          placeholder=\"Explain how to complete this check\"\n        />\n      </div>\n      <div>\n        <h2 className=\"neon-section-title\">Steps / Questions</h2>\n        {questions.map((q, idx) => (\n          <div key={idx} className=\"neon-form-row\">\n            <input\n              type=\"text\"\n              value={q}\n              onChange={(e) => updateQuestion(idx, e.target.value)}\n              className=\"neon-input\"\n              placeholder={`Step ${idx + 1}`}\n            />\n            <NeonIconButton\n              type=\"button\"\n              variant=\"delete\"\n              icon={<FiTrash2 />}\n              title=\"Remove Step\"\n              onClick={() => removeQuestion(idx)}\n            />\n          </div>\n        ))}\n        <NeonIconButton\n          type=\"button\"\n          variant=\"add\"\n          icon={<FiPlus />}\n          title=\"Add Step\"\n          onClick={addQuestion}\n        />\n      </div>\n      <div className=\"neon-panel-actions\">\n        <NeonIconButton\n          type=\"submit\"\n          variant=\"save\"\n          icon={<FiPlus />}\n          title={saving ? \"Saving...\" : \"Create Task\"}\n          disabled={saving}\n        />\n      </div>\n      {error && <p className=\"neon-error\">{error}</p>}\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/amend/[taskId]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":36,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":45,"column":18,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":45,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":45,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":45,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":46,"column":17,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":46,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .area on an `any` value.","line":46,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":47,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":47,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .frequency on an `any` value.","line":47,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":48,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":48,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .instructions on an `any` value.","line":48,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":42},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":54,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":54,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1477,1477],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1477,1477],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\nconst frequencyOptions = [\"Daily\", \"Weekly\", \"Monthly\", \"Quarterly\", \"Yearly\"];\n\nexport default function EditTaskPage() {\n  const params = useParams();\n  const taskid = Array.isArray(params.taskid)\n    ? params.taskid[0]\n    : params.taskid;\n  const router = useRouter();\n\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const [title, setTitle] = useState(\"\");\n  const [area, setArea] = useState(\"\");\n  const [frequency, setFrequency] = useState(\"\");\n  const [instructions, setInstructions] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTask = async () => {\n      setLoading(true);\n\n      if (!taskid) {\n        setError(\"Missing task ID.\");\n        setLoading(false);\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from(\"turkus_tasks\")\n        .select(\"*\")\n        .eq(\"id\", taskid)\n        .single();\n\n      if (error || !data) {\n        setError(\"Task not found.\");\n      } else {\n        setTitle(data.title || \"\");\n        setArea(data.area || \"\");\n        setFrequency(data.frequency || \"\");\n        setInstructions(data.instructions || \"\");\n      }\n\n      setLoading(false);\n    };\n\n    fetchTask();\n  }, [taskid]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setError(null);\n\n    const { error } = await supabase\n      .from(\"turkus_tasks\")\n      .update({\n        title: title.trim(),\n        area: area.trim(),\n        frequency,\n        instructions: instructions.trim(),\n      })\n      .eq(\"id\", taskid);\n\n    setSubmitting(false);\n\n    if (error) {\n      setError(\"‚ùå Failed to update task.\");\n    } else {\n      router.push(\"/turkus/tasks/amend\");\n    }\n  };\n\n  if (loading) return <p className=\"neon-loading\">Loading task data...</p>;\n  if (error) return <p className=\"neon-error\">{error}</p>;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1 className=\"neon-section-title\">Edit Task</h1>\n      <input\n        type=\"text\"\n        placeholder=\"Task Title\"\n        className=\"neon-input\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Area\"\n        className=\"neon-input\"\n        value={area}\n        onChange={(e) => setArea(e.target.value)}\n        required\n      />\n      <select\n        value={frequency}\n        onChange={(e) => setFrequency(e.target.value)}\n        className=\"neon-input\"\n        required\n      >\n        <option value=\"\">Select Frequency</option>\n        {frequencyOptions.map((opt) => (\n          <option key={opt} value={opt}>\n            {opt}\n          </option>\n        ))}\n      </select>\n      <textarea\n        placeholder=\"Instructions\"\n        className=\"neon-input\"\n        value={instructions}\n        onChange={(e) => setInstructions(e.target.value)}\n      />\n      <div className=\"neon-panel-actions\">\n        <NeonIconButton\n          type=\"submit\"\n          variant=\"save\"\n          icon={\n            <svg\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n              <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n              <polyline points=\"7 3 7 8 15 8\"></polyline>\n            </svg>\n          }\n          title={submitting ? \"Saving...\" : \"Save Changes\"}\n          disabled={submitting}\n        />\n        <NeonIconButton\n          type=\"button\"\n          variant=\"cancel\"\n          icon={\n            <svg\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            >\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          }\n          title=\"Cancel\"\n          onClick={() => router.push(\"/turkus/tasks/amend\")}\n        />\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/amend/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":42,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1055,1055],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1055,1055],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter } from \"next/navigation\";\nimport TaskItem from \"@/components/TaskItem\";\nimport \"@/styles/task-list.css\";\n\ntype Task = {\n  id: string;\n  title: string;\n  area: string;\n  frequency: string;\n};\n\nexport default function AmendTaskPage() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"turkus_tasks\")\n        .select(\"id, title, area, frequency\")\n        .order(\"title\", { ascending: true });\n\n      if (error) {\n        console.error(\"Error fetching tasks:\", error);\n        setError(\"Failed to load tasks.\");\n        setTasks([]);\n      } else {\n        setTasks(data || []);\n        setError(null);\n      }\n\n      setLoading(false);\n    };\n\n    fetchTasks();\n  }, []);\n\n  const handleEditClick = (id: string) => {\n    router.push(`/turkus/tasks/amend/${id}`);\n  };\n\n  return (\n    <main className=\"page-main\">\n      <h1 className=\"page-title\">Amend Tasks</h1>\n\n      {loading ? (\n        <p className=\"info-message\">Loading tasks...</p>\n      ) : error ? (\n        <p className=\"error-message\">{error}</p>\n      ) : tasks.length === 0 ? (\n        <p className=\"info-message\">No tasks available.</p>\n      ) : (\n        <ul className=\"task-list\">\n          {tasks.map((task) => (\n            <TaskItem key={task.id} task={task} onEdit={handleEditClick} />\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/assign/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":55,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":55,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1531,1531],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1531,1531],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":106,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":106,"endColumn":53}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/lib/useUser\";\n\ninterface TurkusTask {\n  id: string;\n  title: string;\n}\ninterface User {\n  auth_id: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport default function AssignTask() {\n  const { user } = useUser();\n  const [tasks, setTasks] = useState<TurkusTask[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedTask, setSelectedTask] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [recurrence, setRecurrence] = useState(false);\n  const [interval, setInterval] = useState(\"daily\");\n  const [intervalCount, setIntervalCount] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!user?.auth_id) return;\n\n      const { data: taskData } = await supabase\n        .from(\"turkus_tasks\")\n        .select(\"id, title\");\n      setTasks(taskData || []);\n\n      const { data: manager } = await supabase\n        .from(\"users\")\n        .select(\"department_id\")\n        .eq(\"auth_id\", user.auth_id)\n        .single();\n\n      if (!manager?.department_id) return;\n\n      const { data: teamData } = await supabase\n        .from(\"users\")\n        .select(\"auth_id, first_name, last_name\")\n        .eq(\"department_id\", manager.department_id)\n        .neq(\"auth_id\", user.auth_id);\n\n      setUsers(teamData || []);\n    };\n\n    fetchData();\n  }, [user]);\n\n  const handleAssign = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    // Validation\n    if (!selectedTask || !selectedUser || !dueDate) {\n      alert(\"Please fill in all fields.\");\n      setLoading(false);\n      return;\n    }\n\n    if (!user?.auth_id) {\n      alert(\"User not found. Please log in again.\");\n      setLoading(false);\n      return;\n    }\n\n    // Assign the task\n    const { error: assignError } = await supabase\n      .from(\"task_assignments\")\n      .insert({\n        task_id: selectedTask,\n        assigned_to: selectedUser,\n        assigned_by: user.auth_id,\n        due_date: dueDate,\n      });\n\n    if (assignError) {\n      alert(\"Error assigning task.\");\n      console.error(assignError);\n      setLoading(false);\n      return;\n    }\n\n    // Add recurrence if needed\n    if (recurrence) {\n      const { data: managerMeta, error: metaError } = await supabase\n        .from(\"users\")\n        .select(\"department_id\")\n        .eq(\"auth_id\", user.auth_id)\n        .single();\n\n      if (!metaError && managerMeta?.department_id) {\n        const { error: recurrenceError } = await supabase\n          .from(\"recurring_assignments\")\n          .insert({\n            task_id: selectedTask,\n            assigned_by: user.auth_id,\n            department_id: managerMeta.department_id,\n            frequency: interval,\n            interval_count: intervalCount,\n            next_due_at: dueDate,\n          });\n\n        if (recurrenceError) {\n          console.error(\"Recurrence error:\", recurrenceError);\n          alert(\"Task assigned, but failed to set recurrence.\");\n        }\n      }\n    }\n\n    alert(\"‚úÖ Task assigned successfully.\");\n    setSelectedTask(\"\");\n    setSelectedUser(\"\");\n    setDueDate(\"\");\n    setRecurrence(false);\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <h1 className=\"assign-task-title\">Assign Task</h1>\n        <form onSubmit={handleAssign} className=\"assign-task-form\">\n          <select\n            value={selectedTask}\n            onChange={(e) => setSelectedTask(e.target.value)}\n            className=\"assign-task-input\"\n            required\n          >\n            <option value=\"\">Select Task</option>\n            {tasks.map((t) => (\n              <option key={t.id} value={t.id}>\n                {t.title}\n              </option>\n            ))}\n          </select>\n          <select\n            value={selectedUser}\n            onChange={(e) => setSelectedUser(e.target.value)}\n            className=\"assign-task-input\"\n            required\n          >\n            <option value=\"\">Select User</option>\n            {users.map((u) => (\n              <option key={u.auth_id} value={u.auth_id}>\n                {u.first_name} {u.last_name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"date\"\n            value={dueDate}\n            onChange={(e) => setDueDate(e.target.value)}\n            className=\"assign-task-input\"\n            required\n          />\n          <label className=\"assign-task-recurrence-label\">\n            <input\n              type=\"checkbox\"\n              checked={recurrence}\n              onChange={(e) => setRecurrence(e.target.checked)}\n            />\n            <span className=\"assign-task-recurrence-text\">Set Recurrence</span>\n          </label>\n          {recurrence && (\n            <div className=\"assign-task-recurrence-fields\">\n              <div>\n                <label className=\"assign-task-recurrence-label\">\n                  Repeat Every\n                </label>\n                <input\n                  type=\"number\"\n                  min={1}\n                  value={intervalCount}\n                  onChange={(e) => setIntervalCount(Number(e.target.value))}\n                  className=\"assign-task-input\"\n                />\n              </div>\n              <div>\n                <label className=\"assign-task-recurrence-label\">Interval</label>\n                <select\n                  value={interval}\n                  onChange={(e) => setInterval(e.target.value)}\n                  className=\"assign-task-input\"\n                >\n                  <option value=\"daily\">Daily</option>\n                  <option value=\"weekly\">Weekly</option>\n                  <option value=\"monthly\">Monthly</option>\n                </select>\n              </div>\n            </div>\n          )}\n          <button\n            type=\"submit\"\n            className=\"assign-task-submit-btn\"\n            disabled={loading}\n          >\n            {loading ? \"Assigning...\" : \"Assign Task\"}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":69,"column":22,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":69,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":74,"column":41,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":74,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":81,"column":20,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":81,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":81,"column":47,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":81,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | number | Date`.","line":86,"column":52,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":86,"endColumn":62},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":96,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":96,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2784,2784],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2784,2784],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiClock,\n  FiCheckCircle,\n  FiAlertTriangle,\n  FiCalendar,\n} from \"react-icons/fi\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonFeatureCard from \"@/components/NeonFeatureCard\";\n\ninterface TaskAssignment {\n  id: number;\n  due_date: string;\n  status: string;\n  completed_at?: string;\n  task?: {\n    id: number;\n    title: string;\n  };\n}\n\nconst TaskDashboard = () => {\n  const [todayTasks, setTodayTasks] = useState<TaskAssignment[]>([]);\n  const [completedTasks, setCompletedTasks] = useState<TaskAssignment[]>([]);\n  const [lateTasks, setLateTasks] = useState<TaskAssignment[]>([]);\n  const [overdueTasks, setOverdueTasks] = useState<TaskAssignment[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchDashboard = async () => {\n      setLoading(true);\n\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayStr = today.toISOString().split(\"T\")[0];\n\n      const { data: assignments, error } = await supabase\n        .from(\"turkus_assignments\")\n        .select(\n          \"id, due_date, status, completed_at, task:turkus_tasks (id, title)\",\n        )\n        .order(\"due_date\", { ascending: false });\n\n      if (error) {\n        console.error(\"Error fetching tasks:\", error);\n        setLoading(false);\n        return;\n      }\n\n      // Helper to get date in YYYY-MM-DD\n      const toDateOnly = (dateStr: string) => {\n        const d = new Date(dateStr);\n        return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, \"0\")}-${String(d.getDate()).padStart(2, \"0\")}`;\n      };\n\n      // Ensure task is a single object, not an array\n      const normalizedTasks = (assignments || []).map((t) => ({\n        ...t,\n        task: Array.isArray(t.task) ? t.task[0] : t.task,\n      }));\n\n      const completedToday = normalizedTasks.filter((t) => {\n        return (\n          t.status === \"complete\" &&\n          t.completed_at &&\n          toDateOnly(t.completed_at) === todayStr\n        );\n      });\n\n      const dueToday = normalizedTasks.filter((t) => {\n        return t.due_date && toDateOnly(t.due_date) === todayStr;\n      });\n\n      const lateCompletions = normalizedTasks.filter((t) => {\n        return (\n          t.status === \"complete\" &&\n          t.completed_at &&\n          new Date(t.completed_at) > new Date(t.due_date)\n        );\n      });\n\n      const overdue = normalizedTasks.filter((t) => {\n        return t.status !== \"complete\" && new Date(t.due_date) < today;\n      });\n\n      setTodayTasks(dueToday);\n      setCompletedTasks(completedToday);\n      setLateTasks(lateCompletions);\n      setOverdueTasks(overdue);\n      setLoading(false);\n    };\n\n    fetchDashboard();\n  }, []);\n\n  const formatDateTime = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString(undefined, {\n      dateStyle: \"medium\",\n      timeStyle: \"short\",\n    });\n  };\n\n  return (\n    <div className=\"task-dashboard-wrapper\">\n      {loading ? (\n        <NeonPanel>\n          <div className=\"task-dashboard-loading-msg\">Loading tasks...</div>\n        </NeonPanel>\n      ) : (\n        <>\n          {/* Summary Feature Cards */}\n          <NeonPanel>\n            <div className=\"neon-feature-card-list\">\n              <NeonFeatureCard\n                icon={<FiCalendar aria-label=\"Due Today\" />}\n                title=\"Due Today\"\n                text={todayTasks.length.toString()}\n                href={\"\"}\n              />\n              <NeonFeatureCard\n                icon={<FiCheckCircle aria-label=\"Completed Today\" />}\n                title=\"Completed Today\"\n                text={completedTasks.length.toString()}\n                href={\"\"}\n              />\n              <NeonFeatureCard\n                icon={<FiClock aria-label=\"Late Completions\" />}\n                title=\"Late Completions\"\n                text={lateTasks.length.toString()}\n                href={\"\"}\n              />\n              <NeonFeatureCard\n                icon={<FiAlertTriangle aria-label=\"Overdue\" />}\n                title=\"Overdue\"\n                text={overdueTasks.length.toString()}\n                href={\"\"}\n              />\n            </div>\n          </NeonPanel>\n\n          <NeonPanel>\n            <Section\n              title={\n                <>\n                  <FiClock\n                    className=\"task-dashboard-section-icon\"\n                    aria-label=\"Completed Late\"\n                  />{\" \"}\n                  Completed Late\n                </>\n              }\n            >\n              {lateTasks.length === 0 ? (\n                <p className=\"task-dashboard-empty-msg\">No late completions.</p>\n              ) : (\n                <ul className=\"task-dashboard-list\">\n                  {lateTasks.map((t) => (\n                    <li key={t.id} className=\"task-dashboard-list-item\">\n                      <strong className=\"task-dashboard-task-title\">\n                        {t.task?.title}\n                      </strong>{\" \"}\n                      ‚Äì Due: {formatDateTime(t.due_date)}\n                      {t.completed_at\n                        ? `, Completed: ${formatDateTime(t.completed_at)}`\n                        : \"\"}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </Section>\n          </NeonPanel>\n\n          <NeonPanel>\n            <Section title=\"Overdue Tasks\">\n              {overdueTasks.length === 0 ? (\n                <p className=\"task-dashboard-empty-msg\">No overdue tasks.</p>\n              ) : (\n                <ul className=\"task-dashboard-list\">\n                  {overdueTasks.map((t) => (\n                    <li key={t.id} className=\"task-dashboard-list-item\">\n                      <strong className=\"task-dashboard-task-title\">\n                        {t.task?.title}\n                      </strong>{\" \"}\n                      ‚Äì Due: {formatDateTime(t.due_date)}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </Section>\n          </NeonPanel>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst Section = ({\n  title,\n  children,\n}: {\n  title: React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <section className=\"task-dashboard-section\">\n    <h2 className=\"task-dashboard-section-title\">{title}</h2>\n    {children}\n  </section>\n);\n\nexport default TaskDashboard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/list/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/turkus/tasks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/user/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/app/user/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/AssignAuditTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":36,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":56,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1189,1189],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1189,1189],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":130,"column":48,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":130,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/AssignAuditTab.tsx\n\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonForm from \"@/components/NeonForm\";\n\ntype AuditTemplate = {\n  id: string;\n  title?: string | null;\n  name?: string | null;\n};\ntype UserRow = {\n  auth_id: string;\n  email: string | null;\n  first_name?: string | null;\n  last_name?: string | null;\n  department_id?: string | null;\n};\ntype Department = { id: string; name: string };\n\nexport default function AssignAuditTab() {\n  const [templates, setTemplates] = useState<AuditTemplate[]>([]);\n  const [users, setUsers] = useState<UserRow[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n\n  const [templateId, setTemplateId] = useState(\"\");\n  const [userAuthId, setUserAuthId] = useState(\"\"); // auth_id of the selected user\n  const [departmentId, setDepartmentId] = useState(\"\"); // target dept (when bulk assigning)\n  const [scheduledFor, setScheduledFor] = useState(\"\"); // yyyy-mm-dd\n  const [assignLoading, setAssignLoading] = useState(false);\n  const [feedback, setFeedback] = useState<string>(\"\");\n\n  // Load dropdown data\n  useEffect(() => {\n    (async () => {\n      setFeedback(\"\");\n      const [tpls, us, depts] = await Promise.all([\n        supabase\n          .from(\"audit_templates\")\n          .select(\"id, title, name\")\n          .order(\"title\", { ascending: true }),\n        supabase\n          .from(\"users\")\n          .select(\"auth_id, email, first_name, last_name, department_id\")\n          .order(\"last_name\", { ascending: true }),\n        supabase\n          .from(\"departments\")\n          .select(\"id, name\")\n          .order(\"name\", { ascending: true }),\n      ]);\n\n      if (!tpls.error && tpls.data) setTemplates(tpls.data);\n      if (!us.error && us.data) setUsers(us.data);\n      if (!depts.error && depts.data) setDepartments(depts.data);\n    })();\n  }, []);\n\n  const templateLabel = (t: AuditTemplate) =>\n    t.title?.trim() || t.name?.trim() || \"(untitled)\";\n  const userLabel = (u: UserRow) =>\n    `${(u.first_name ?? \"\").trim()} ${(u.last_name ?? \"\").trim()}`.trim() ||\n    (u.email ?? \"\") ||\n    u.auth_id;\n\n  const dueAtIso = useMemo(() => {\n    if (!scheduledFor) return null;\n    // Store date as UTC midnight for consistency\n    const d = new Date(`${scheduledFor}T00:00:00Z`);\n    return isNaN(+d) ? null : d.toISOString();\n  }, [scheduledFor]);\n\n  const handleAssign = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setFeedback(\"\");\n\n    if (!templateId) {\n      setFeedback(\"Please choose an audit template.\");\n      return;\n    }\n    if (!userAuthId && !departmentId) {\n      setFeedback(\"Choose either a user or a department.\");\n      return;\n    }\n\n    setAssignLoading(true);\n    try {\n      const {\n        data: { user },\n        error: authErr,\n      } = await supabase.auth.getUser();\n      if (authErr) throw authErr;\n\n      const assignedBy = user?.id ?? null;\n\n      // Build rows to upsert\n      type AssignmentRow = {\n        auth_id: string;\n        item_type: \"audit\";\n        item_id: string;\n        assigned_by: string | null;\n        origin_type: \"direct\" | \"department\";\n        origin_id: string | null;\n        due_at: string;\n      };\n      let rows: AssignmentRow[] = [];\n\n      if (userAuthId) {\n        rows = [\n          {\n            auth_id: userAuthId,\n            item_type: \"audit\" as const,\n            item_id: templateId,\n            assigned_by: assignedBy,\n            origin_type: \"direct\",\n            origin_id: null,\n            due_at: dueAtIso ?? \"\",\n          },\n        ];\n      } else if (departmentId) {\n        const { data: deptUsers, error: deptErr } = await supabase\n          .from(\"users\")\n          .select(\"auth_id\")\n          .eq(\"department_id\", departmentId)\n          .not(\"auth_id\", \"is\", null);\n\n        if (deptErr) throw deptErr;\n\n        const authIds = Array.from(\n          new Set((deptUsers ?? []).map((u) => u.auth_id).filter(Boolean)),\n        );\n\n        if (authIds.length === 0) {\n          setFeedback(\"No users found in that department.\");\n          setAssignLoading(false);\n          return;\n        }\n\n        rows = authIds.map((aid) => ({\n          auth_id: aid as string,\n          item_type: \"audit\" as const,\n          item_id: templateId,\n          assigned_by: assignedBy,\n          origin_type: \"department\",\n          origin_id: departmentId,\n          due_at: dueAtIso ?? \"\",\n        }));\n      }\n\n      if (rows.length === 0) {\n        setFeedback(\"No matching users to assign.\");\n        setAssignLoading(false);\n        return;\n      }\n\n      // Idempotent insert: ignore duplicates (don‚Äôt overwrite existing rows)\n      const { data: inserted, error } = await supabase\n        .from(\"user_assignments\")\n        .upsert(rows, {\n          onConflict: \"auth_id,item_id,item_type\",\n          ignoreDuplicates: true,\n        })\n        .select(\"id\"); // returns only the rows that were *inserted*\n\n      if (error) throw error;\n\n      const count = inserted?.length ?? 0;\n      const tplName = templateLabel(\n        templates.find((t) => t.id === templateId) || { id: \"\" },\n      );\n\n      setFeedback(\n        userAuthId\n          ? count === 0\n            ? `‚Äú${tplName}‚Äù was already assigned to that user.`\n            : `Assigned ‚Äú${tplName}‚Äù to 1 user.`\n          : count === 0\n            ? `No new assignments were created (they may already have ‚Äú${tplName}‚Äù).`\n            : `Assigned ‚Äú${tplName}‚Äù to ${count} user(s) in the department.`,\n      );\n\n      // Reset (keep template to allow repeating on another target)\n      setUserAuthId(\"\");\n      setDepartmentId(\"\");\n      // setScheduledFor(''); // optional: keep the date\n    } catch (e: unknown) {\n      const errMsg = e instanceof Error ? e.message : String(e);\n      console.error(\"Assign audit error:\", errMsg);\n      setFeedback(errMsg ?? \"Failed to assign audit.\");\n    } finally {\n      setAssignLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"assign-audit-tab-container\">\n      <NeonForm\n        title=\"Assign Audit\"\n        onSubmit={handleAssign}\n        submitLabel={assignLoading ? \"Assigning‚Ä¶\" : \"Assign Audit\"}\n      >\n        {/* Template */}\n        <select\n          value={templateId}\n          onChange={(e) => setTemplateId(e.target.value)}\n          className=\"assign-audit-tab-input\"\n          required\n          disabled={assignLoading}\n        >\n          <option value=\"\">Select Audit Template</option>\n          {templates.map((tpl) => (\n            <option key={tpl.id} value={tpl.id}>\n              {templateLabel(tpl)}\n            </option>\n          ))}\n        </select>\n\n        {/* Target: user OR department */}\n        <div className=\"assign-audit-tab-row\">\n          <select\n            value={userAuthId}\n            onChange={(e) => {\n              setUserAuthId(e.target.value);\n              setDepartmentId(\"\");\n            }}\n            className=\"assign-audit-tab-input\"\n            disabled={assignLoading}\n          >\n            <option value=\"\">Assign to User</option>\n            {users.map((u) => (\n              <option key={u.auth_id} value={u.auth_id}>\n                {userLabel(u)}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={departmentId}\n            onChange={(e) => {\n              setDepartmentId(e.target.value);\n              setUserAuthId(\"\");\n            }}\n            className=\"assign-audit-tab-input\"\n            disabled={assignLoading}\n          >\n            <option value=\"\">Assign to Department</option>\n            {departments.map((d) => (\n              <option key={d.id} value={d.id}>\n                {d.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Due date */}\n        <input\n          type=\"date\"\n          value={scheduledFor}\n          onChange={(e) => setScheduledFor(e.target.value)}\n          className=\"assign-audit-tab-input\"\n          disabled={assignLoading}\n        />\n\n        {/* Feedback */}\n        {feedback && (\n          <div\n            className=\"mt-2 text-sm\"\n            style={{ color: \"var(--neon, #40E0D0)\" }}\n          >\n            {feedback}\n          </div>\n        )}\n\n        {/* Tip when RLS blocks inserts */}\n        {/* <div className=\"mt-2 text-xs opacity-70\">\n          If you see an insert error, ensure your RLS policy on <code>user_assignments</code> allows the current user to insert.\n        </div> */}\n      </NeonForm>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/AssignedToTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":184,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1206,1206],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1206,1206],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":125,"column":32,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":125,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":147,"column":31,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":147,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":148,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":148,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":149,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":45},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'sendReminderEmail' has no 'await' expression.","line":236,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":236,"endColumn":35,"suggestions":[{"messageId":"removeAsync","fix":{"range":[7212,7218],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/AssignedToTab.tsx\n\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport {\n  FiSearch,\n  FiChevronDown,\n  FiCheckCircle,\n  FiXCircle,\n  FiMail,\n} from \"react-icons/fi\";\n\ntype Row = {\n  assignment_id: string;\n  template_title: string;\n  assigned_to_name: string;\n  department_name: string;\n  scheduled_for: string | null; // display value (localised)\n  scheduled_for_sort: number; // unix ms for sorting\n  submission_status: \"Completed\" | \"In Progress\" | \"Not Started\";\n};\n\nexport default function AssignedToTab() {\n  const [rows, setRows] = useState<Row[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"\");\n  const [sortBy, setSortBy] = useState<\n    | \"assigned_to_name\"\n    | \"department_name\"\n    | \"template_title\"\n    | \"scheduled_for\"\n    | \"submission_status\"\n  >(\"scheduled_for\");\n  const [sortDir, setSortDir] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [filterStatus, setFilterStatus] = useState<string>(\"\");\n  const [filterDept, setFilterDept] = useState<string>(\"\");\n\n  useEffect(() => {\n    let alive = true;\n    (async () => {\n      setLoading(true);\n\n      // 1) Load audit assignments from the single sink\n      const { data: ua, error: uaErr } = await supabase\n        .from(\"user_assignments\")\n        .select(\n          `\n          id,\n          auth_id,\n          item_id,\n          assigned_at,\n          due_at,\n          opened_at,\n          completed_at,\n          users:users!inner(\n            first_name,\n            last_name,\n            departments(name)\n          )\n        `,\n        )\n        .eq(\"item_type\", \"audit\")\n        .order(\"due_at\", { ascending: false });\n\n      if (!alive) return;\n\n      if (uaErr) {\n        console.error(\"user_assignments load error:\", uaErr);\n        setRows([]);\n        setLoading(false);\n        return;\n      }\n\n      // 2) Map base rows\n      const base = (ua ?? []).map((r) => {\n        const u = Array.isArray(r.users) ? r.users[0] : (r.users ?? {});\n        const dep = u?.departments\n          ? Array.isArray(u.departments)\n            ? u.departments[0]\n            : u.departments\n          : {};\n        const name =\n          `${u?.first_name ?? \"\"} ${u?.last_name ?? \"\"}`.trim() || \"(no name)\";\n\n        const dueIso = r.due_at as string | null;\n        const dueMs = dueIso ? Date.parse(dueIso) : 0;\n        const dueDisplay = dueIso\n          ? new Date(dueIso).toLocaleString(undefined, {\n              year: \"numeric\",\n              month: \"short\",\n              day: \"2-digit\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n            })\n          : null;\n\n        return {\n          assignment_id: r.id as string,\n          audit_id: r.item_id as string,\n          assigned_to_name: name,\n          department_name:\n            typeof dep === \"object\" && dep !== null && \"name\" in dep\n              ? (dep.name as string)\n              : \"‚Äî\",\n          scheduled_for: dueDisplay,\n          scheduled_for_sort: isNaN(dueMs) ? 0 : dueMs,\n          completed_at: r.completed_at as string | null,\n          opened_at: r.opened_at as string | null,\n        };\n      });\n\n      // 3) Try to get audit names (if audits table exists)\n      const titleByAudit = new Map<string, string>();\n      try {\n        const auditIds = Array.from(new Set(base.map((b) => b.audit_id)));\n        if (auditIds.length) {\n          const { data: audits } = await supabase\n            .from(\"audits\")\n            .select(\"id, name, title\")\n            .in(\"id\", auditIds);\n          if (audits) {\n            audits.forEach((a) => {\n              titleByAudit.set(a.id, (a.name || a.title || a.id) as string);\n            });\n          }\n        }\n      } catch {\n        // audits table might not exist yet; fall back to id\n      }\n\n      // 4) Try to get submissions (if audit_submissions exists)\n      const subByAssign = new Map<\n        string,\n        { status: string | null; submitted_at: string | null }\n      >();\n      try {\n        const assignmentIds = base.map((b) => b.assignment_id);\n        if (assignmentIds.length) {\n          const { data: subs } = await supabase\n            .from(\"audit_submissions\")\n            .select(\"assignment_id, status, submitted_at\")\n            .in(\"assignment_id\", assignmentIds);\n          (subs ?? []).forEach((s) => {\n            if (s.assignment_id)\n              subByAssign.set(s.assignment_id, {\n                status: s.status,\n                submitted_at: s.submitted_at,\n              });\n          });\n        }\n      } catch {\n        // audit_submissions table might not exist yet; treat as no submissions\n      }\n\n      // 5) Build final rows with status + title\n      const finalRows: Row[] = base.map((b) => {\n        const sub = subByAssign.get(b.assignment_id);\n        const completed = Boolean(b.completed_at || sub?.submitted_at);\n        const inProgress =\n          !completed && (Boolean(b.opened_at) || sub?.status === \"in_progress\");\n\n        const status: Row[\"submission_status\"] = completed\n          ? \"Completed\"\n          : inProgress\n            ? \"In Progress\"\n            : \"Not Started\";\n\n        return {\n          assignment_id: b.assignment_id,\n          template_title: titleByAudit.get(b.audit_id) ?? b.audit_id, // fallback to id if audits table not present\n          assigned_to_name: b.assigned_to_name,\n          department_name: b.department_name,\n          scheduled_for: b.scheduled_for,\n          scheduled_for_sort: b.scheduled_for_sort,\n          submission_status: status,\n        };\n      });\n\n      if (!alive) return;\n      setRows(finalRows);\n      setLoading(false);\n    })();\n\n    return () => {\n      alive = false;\n    };\n  }, []);\n\n  // Filter, search\n  const filtered = useMemo(() => {\n    let list = rows;\n    if (filterStatus)\n      list = list.filter((r) => r.submission_status === filterStatus);\n    if (filterDept) list = list.filter((r) => r.department_name === filterDept);\n    if (search.trim()) {\n      const q = search.toLowerCase();\n      list = list.filter(\n        (r) =>\n          (r.assigned_to_name || \"\").toLowerCase().includes(q) ||\n          (r.department_name || \"\").toLowerCase().includes(q) ||\n          (r.template_title || \"\").toLowerCase().includes(q),\n      );\n    }\n    // Sort (special case for date)\n    const sorted = [...list].sort((a, b) => {\n      if (sortBy === \"scheduled_for\") {\n        const A = a.scheduled_for_sort;\n        const B = b.scheduled_for_sort;\n        return sortDir === \"asc\" ? A - B : B - A;\n      }\n      const A = (a[sortBy] || \"\");\n      const B = (b[sortBy] || \"\");\n      return sortDir === \"asc\" ? A.localeCompare(B) : B.localeCompare(A);\n    });\n    return sorted;\n  }, [rows, search, filterStatus, filterDept, sortBy, sortDir]);\n\n  // Unique options\n  const statusOptions = useMemo(\n    () =>\n      Array.from(new Set(rows.map((r) => r.submission_status))).filter(\n        Boolean,\n      ) as string[],\n    [rows],\n  );\n  const deptOptions = useMemo(\n    () =>\n      Array.from(new Set(rows.map((r) => r.department_name))).filter(\n        Boolean,\n      ),\n    [rows],\n  );\n\n  async function sendReminderEmail(assignmentId: string, assignedTo: string) {\n    // Hook up to your API or Postgres function when ready\n    // e.g. await fetch(`/api/remind-audit?assignmentId=${assignmentId}`, { method: 'POST' })\n    alert(`Reminder queued for ${assignedTo}`);\n  }\n\n  return (\n    <NeonPanel className=\"neon-panel-audit space-y-4\">\n      <h3 className=\"neon-section-title\">Assigned Audits</h3>\n\n      {/* Controls */}\n      <div className=\"neon-flex neon-flex-wrap gap-4 items-center mb-4\">\n        <div className=\"neon-relative\">\n          <FiSearch className=\"neon-icon-search\" />\n          <div className=\"neon-search-bar-wrapper\">\n            <input\n              type=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search by name, department, or template...\"\n              className=\"neon-input neon-input-search\"\n            />\n          </div>\n        </div>\n\n        <div className=\"neon-flex gap-2\">\n          <select\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n            className=\"neon-input\"\n          >\n            <option value=\"\">All Statuses</option>\n            {statusOptions.map((s) => (\n              <option key={s} value={s}>\n                {s}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={filterDept}\n            onChange={(e) => setFilterDept(e.target.value)}\n            className=\"neon-input\"\n          >\n            <option value=\"\">All Departments</option>\n            {deptOptions.map((d) => (\n              <option key={d} value={d}>\n                {d}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"neon-table-wrapper\">\n        <table className=\"neon-table min-w-full table-fixed\">\n          <colgroup>\n            <col style={{ width: \"38%\" }} />\n            <col style={{ width: \"20%\" }} />\n            <col style={{ width: \"12%\" }} />\n            <col style={{ width: \"10%\" }} />\n            <col style={{ width: \"7%\" }} />\n          </colgroup>\n          <thead className=\"neon-table-head\">\n            <tr>\n              {[\n                { header: \"Title\", accessor: \"template_title\" },\n                { header: \"Assigned To\", accessor: \"assigned_to_name\" },\n                { header: \"Department\", accessor: \"department_name\" },\n                { header: \"Scheduled For\", accessor: \"scheduled_for\" },\n                { header: \"Status\", accessor: \"submission_status\" },\n              ].map((col) => (\n                <th\n                  key={col.accessor}\n                  className=\"neon-table-th cursor-pointer select-none\"\n                  onClick={() => {\n                    if (sortBy === col.accessor) {\n                      setSortDir(sortDir === \"asc\" ? \"desc\" : \"asc\");\n                    }\n                    setSortBy(col.accessor as typeof sortBy);\n                  }}\n                >\n                  {col.header}\n                  {sortBy === col.accessor && (\n                    <FiChevronDown\n                      className={`neon-table-sort ${sortDir === \"asc\" ? \"rotate-180\" : \"\"}`}\n                    />\n                  )}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {loading ? (\n              <tr>\n                <td colSpan={5} className=\"neon-table-info\">\n                  Loading...\n                </td>\n              </tr>\n            ) : filtered.length === 0 ? (\n              <tr>\n                <td colSpan={5} className=\"neon-table-info\">\n                  No assigned audits found.\n                </td>\n              </tr>\n            ) : (\n              filtered.map((row) => (\n                <tr key={row.assignment_id} className=\"neon-table-row\">\n                  <td className=\"neon-table-cell\">{row.template_title}</td>\n                  <td className=\"neon-table-cell\">{row.assigned_to_name}</td>\n                  <td className=\"neon-table-cell\">{row.department_name}</td>\n                  <td className=\"neon-table-cell\">\n                    {row.scheduled_for ?? \"‚Äî\"}\n                  </td>\n                  <td className=\"neon-table-cell\">\n                    {row.submission_status === \"Completed\" ? (\n                      <FiCheckCircle\n                        className=\"neon-status-complete neon-table-status-icon\"\n                        title=\"Completed\"\n                      />\n                    ) : (\n                      <div className=\"flex items-center gap-2\">\n                        <FiXCircle\n                          className=\"neon-status-incomplete neon-table-status-icon\"\n                          title={row.submission_status}\n                        />\n                        <button\n                          type=\"button\"\n                          title={`Remind ${row.assigned_to_name}`}\n                          className=\"inline-flex items-center opacity-80 hover:opacity-100\"\n                          onClick={() =>\n                            sendReminderEmail(\n                              row.assignment_id,\n                              row.assigned_to_name,\n                            )\n                          }\n                        >\n                          <FiMail className=\"neon-table-remind-icon\" />\n                        </button>\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/AuditManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":110,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":110,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3350,3350],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3350,3350],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  createContext,\n  useContext,\n} from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nimport NeonPanel from \"@/components/NeonPanel\";\nimport FolderTabs from \"@/components/FolderTabs\";\n\nimport {\n  FiPlus,\n  FiClipboard,\n  FiSend,\n  FiFileText,\n  FiHelpCircle,\n  FiShield,\n} from \"react-icons/fi\";\n\nimport QuestionTab from \"@/components/QuestionTab\";\nimport ViewAuditTab from \"@/components/ViewAuditTab\";\nimport SubmissionsTab from \"@/components/SubmissionsTab\";\nimport CreateAuditTab from \"@/components/CreateAuditTab\";\nimport AssignAuditTab from \"@/components/AssignAuditTab\";\nimport AssignedToTab from \"@/components/AssignedToTab\";\nimport AuditorsListWidget from \"@/components/task/AuditorsListWidget\";\n\n/* =========================================================\n   Shared context (optional for your child tabs to use)\n   ========================================================= */\ntype TabKey =\n  | \"create\"\n  | \"view\"\n  | \"assign\"\n  | \"submissions\"\n  | \"questions\"\n  | \"assigned\"\n  | \"auditors\";\n\ntype AuditManagerCtx = {\n  activeTab: TabKey;\n  setActiveTab: (t: TabKey) => void;\n  refreshKey: number;\n  bumpRefresh: () => void;\n};\n\nconst Ctx = createContext<AuditManagerCtx | null>(null);\nexport const useAuditManager = () => {\n  const ctx = useContext(Ctx);\n  if (!ctx)\n    throw new Error(\"useAuditManager must be used inside <AuditManager/>\");\n  return ctx;\n};\n\n/* =========================================================\n   Main component\n   ========================================================= */\nexport default function AuditManager() {\n  const router = useRouter();\n  const params = useSearchParams();\n\n  // Read tab from URL (?tab=assign etc.)\n  const tabFromUrl = (params.get(\"tab\") as TabKey) || \"create\";\n  const [activeTab, setActiveTab] = useState<TabKey>(tabFromUrl);\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  // Fetch counts in-line (inside main component)\n  const [assignments, setAssignments] = useState<number | null>(null);\n  const [incomplete, setIncomplete] = useState<number | null>(null);\n  const [submissions, setSubmissions] = useState<number | null>(null);\n  const [statsError, setStatsError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchCounts = async () => {\n      setStatsError(null);\n      try {\n        const { count: uaAll } = await supabase\n          .from(\"user_assignments\")\n          .select(\"id\", { count: \"exact\", head: true })\n          .eq(\"item_type\", \"audit\");\n        const { count: uaOpen } = await supabase\n          .from(\"user_assignments\")\n          .select(\"id\", { count: \"exact\", head: true })\n          .eq(\"item_type\", \"audit\")\n          .is(\"completed_at\", null);\n        setAssignments(uaAll ?? 0);\n        setIncomplete(uaOpen ?? 0);\n      } catch (e: unknown) {\n        setAssignments(null);\n        setIncomplete(null);\n        setStatsError(\n          e instanceof Error ? e.message : \"Failed to read assignments\",\n        );\n      }\n      try {\n        const { count: subs } = await supabase\n          .from(\"audit_submissions\")\n          .select(\"id\", { count: \"exact\", head: true });\n        setSubmissions(subs ?? 0);\n      } catch {\n        setSubmissions(null);\n      }\n    };\n    fetchCounts();\n  }, []);\n\n  // Keep URL in sync when tab changes\n  const handleTabChange = useCallback(\n    (tab: TabKey) => {\n      setActiveTab(tab);\n      const qs = new URLSearchParams(Array.from(params.entries()));\n      qs.set(\"tab\", tab);\n      router.replace(`?${qs.toString()}`);\n    },\n    [params, router],\n  );\n\n  const bumpRefresh = useCallback(() => setRefreshKey((n) => n + 1), []);\n\n  const tabs = useMemo(\n    () =>\n      [\n        {\n          key: \"create\",\n          label: \"Create New Audit\",\n          icon: <FiPlus className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"view\",\n          label: \"View Audits\",\n          icon: <FiClipboard className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"assign\",\n          label: \"Assign Audit\",\n          icon: <FiSend className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"submissions\",\n          label: \"Submissions\",\n          icon: <FiFileText className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"questions\",\n          label: \"Edit Questions\",\n          icon: <FiHelpCircle className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"assigned\",\n          label: \"Assigned To\",\n          icon: <FiClipboard className=\"folder-tab-icon\" />,\n        },\n        {\n          key: \"auditors\",\n          label: \"Auditors\",\n          icon: <FiShield className=\"folder-tab-icon\" />,\n        },\n      ] satisfies { key: TabKey; label: string; icon: React.ReactNode }[],\n    [],\n  );\n\n  return (\n    <Ctx.Provider\n      value={{\n        activeTab,\n        setActiveTab: handleTabChange,\n        refreshKey,\n        bumpRefresh,\n      }}\n    >\n      <div className=\"audit-manager-content\">\n        <div className=\"audit-manager-inner\">\n          <FolderTabs\n            tabs={tabs}\n            activeTab={activeTab}\n            onChange={(tabKey) => handleTabChange(tabKey as TabKey)}\n          />\n\n          {/* Stats bar in-line, with custom backgrounds and spacing */}\n          <div className=\"flex gap-3 mb-3\">\n            <NeonPanel className=\"bg-orange-100\">\n              <div className=\"flex items-center justify-between py-2 px-3\">\n                <span className=\"opacity-70 mr-4\">Audit assignments</span>\n                <strong className=\"text-lg\">{assignments ?? \"‚Äî\"}</strong>\n              </div>\n            </NeonPanel>\n            <NeonPanel className=\"bg-blue-100\">\n              <div className=\"flex items-center justify-between py-2 px-3\">\n                <span className=\"opacity-70 mr-4\">Incomplete</span>\n                <strong className=\"text-lg\">{incomplete ?? \"‚Äî\"}</strong>\n              </div>\n            </NeonPanel>\n            <NeonPanel className=\"bg-green-100\">\n              <div className=\"flex items-center justify-between py-2 px-3\">\n                <span className=\"opacity-70 mr-4\">Submissions</span>\n                <strong className=\"text-lg\">{submissions ?? \"‚Äî\"}</strong>\n              </div>\n            </NeonPanel>\n            {statsError && (\n              <div className=\"text-xs text-red-400 self-center\">\n                Stats error: {statsError}\n              </div>\n            )}\n          </div>\n\n          {/* Render selected tab */}\n          <div key={activeTab}>\n            {activeTab === \"create\" && <CreateAuditTab />}\n            {activeTab === \"view\" && <ViewAuditTab />}\n            {activeTab === \"assign\" && <AssignAuditTab />}\n            {activeTab === \"submissions\" && <SubmissionsTab />}\n            {activeTab === \"questions\" && <QuestionTab />}\n            {activeTab === \"assigned\" && <AssignedToTab />}\n            {activeTab === \"auditors\" && <AuditorsListWidget />}\n          </div>\n        </div>\n      </div>\n    </Ctx.Provider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/BehaviourIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/BehaviourSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":39,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":39,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[849,849],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[849,849],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport BehaviourIcon from \"./BehaviourIcon\";\n\nexport interface Behaviour {\n  id: string;\n  name: string;\n  icon: string;\n}\n\ninterface BehaviourSelectorProps {\n  selected: string[];\n  onChange: (newSelected: string[]) => void;\n  max?: number;\n}\n\nexport default function BehaviourSelector({\n  selected,\n  onChange,\n  max = 5,\n}: BehaviourSelectorProps) {\n  const [behaviours, setBehaviours] = useState<Behaviour[]>([]);\n\n  useEffect(() => {\n    const fetchBehaviours = async () => {\n      const { data, error } = await supabase\n        .from(\"behaviours\")\n        .select(\"id, name, icon\");\n\n      if (error) {\n        console.error(\"Error fetching behaviours:\", error);\n      } else {\n        setBehaviours(data || []);\n      }\n    };\n\n    fetchBehaviours();\n  }, []);\n\n  const toggle = (id: string) => {\n    if (selected.includes(id)) {\n      onChange(selected.filter((b) => b !== id));\n    } else if (selected.length < max) {\n      onChange([...selected, id]);\n    }\n  };\n\n  return (\n    <div className=\"behaviour-selector\">\n      <p className=\"behaviour-selector-instructions\">\n        Select up to {max} behaviours\n      </p>\n      <div className=\"behaviour-selector-list\">\n        {behaviours.map((b) => (\n          <div\n            key={b.id}\n            role=\"button\"\n            onClick={() => toggle(b.id)}\n            className={`behaviour-selector-item ${selected.includes(b.id) ? \"behaviour-selector-item-selected\" : \"behaviour-selector-item-default\"}`}\n          >\n            <BehaviourIcon\n              behaviour={b}\n              selected={selected.includes(b.id)}\n              onClick={toggle}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/CategoryFilter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/CreateAuditTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":51,"column":20,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":51,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":52,"column":26,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":52,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":53,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":53,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":54,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":54,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":55,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":55,"endColumn":53},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":67,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":67,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2296,2296],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2296,2296],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":112,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":112,"endColumn":33}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/CreateAuditTab.tsx\n\"use client\";\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonForm from \"@/components/NeonForm\";\n\ninterface AuditQuestion {\n  id: string;\n  question_text: string;\n}\ninterface Section {\n  id: string;\n  title: string;\n}\n\nexport default function CreateAuditTab() {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [frequency, setFrequency] = useState(\"\");\n  const [version, setVersion] = useState(\"\");\n  const [sectionId, setSectionId] = useState(\"\");\n  const [availableQuestions, setAvailableQuestions] = useState<AuditQuestion[]>(\n    [],\n  );\n  const [selectedQuestions, setSelectedQuestions] = useState<string[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [loading, setLoading] = useState(false);\n  const router = useRouter();\n\n  useEffect(() => {\n    const editId = sessionStorage.getItem(\"edit_template_id\");\n    const fetchData = async () => {\n      const [qRes, sRes] = await Promise.all([\n        supabase\n          .from(\"audit_questions\")\n          .select(\"id, question_text\")\n          .order(\"question_text\"),\n        supabase.from(\"standard_sections\").select(\"id, title\").order(\"title\"),\n      ]);\n      if (!qRes.error) setAvailableQuestions(qRes.data || []);\n      if (!sRes.error) setSections(sRes.data || []);\n\n      if (editId) {\n        const { data: tpl, error: tErr } = await supabase\n          .from(\"audit_templates\")\n          .select(\"title, description, frequency, version, standard_section_id\")\n          .eq(\"id\", editId)\n          .single();\n        if (tpl && !tErr) {\n          setTitle(tpl.title || \"\");\n          setDescription(tpl.description || \"\");\n          setFrequency(tpl.frequency || \"\");\n          setVersion(tpl.version || \"\");\n          setSectionId(tpl.standard_section_id || \"\");\n          const { data: qLinks } = await supabase\n            .from(\"audit_template_questions_status\")\n            .select(\"question_id\")\n            .eq(\"template_id\", editId);\n          if (qLinks)\n            setSelectedQuestions(\n              qLinks.map((q: { question_id: string }) => q.question_id),\n            );\n        }\n      }\n    };\n    fetchData();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    const {\n      data: { user },\n    } = await supabase.auth.getUser();\n    let inserted = null;\n    let error = null;\n    const editId = sessionStorage.getItem(\"edit_template_id\");\n    if (editId) {\n      ({ error } = await supabase\n        .from(\"audit_templates\")\n        .update({\n          title,\n          description,\n          frequency,\n          version,\n          standard_section_id: sectionId || null,\n        })\n        .eq(\"id\", editId));\n      inserted = { id: editId };\n    } else {\n      ({ data: inserted, error } = await supabase\n        .from(\"audit_templates\")\n        .insert({\n          title,\n          description,\n          frequency,\n          version,\n          standard_section_id: sectionId || null,\n          created_by: user?.id || null,\n        })\n        .select(\"id\")\n        .single());\n    }\n    if (error || !inserted) {\n      alert(\"Error creating template: \" + error?.message);\n      setLoading(false);\n      return;\n    }\n    if (selectedQuestions.length > 0) {\n      const rows = selectedQuestions.map((qId, idx) => ({\n        template_id: inserted.id,\n        question_id: qId,\n        sort_order: idx + 1,\n      }));\n      const { error: qErr } = await supabase\n        .from(\"audit_template_questions_status\")\n        .insert(rows);\n      if (qErr) alert(\"Error linking questions: \" + qErr.message);\n    }\n    alert(\n      editId\n        ? \"Audit template updated successfully\"\n        : \"Audit template created successfully\",\n    );\n    sessionStorage.removeItem(\"edit_template_id\");\n    setLoading(false);\n    setTitle(\"\");\n    setDescription(\"\");\n    setFrequency(\"\");\n    setVersion(\"\");\n    setSectionId(\"\");\n    setSelectedQuestions([]);\n    router.refresh();\n  };\n\n  return (\n    <NeonForm\n      title=\"Create Audit Template\"\n      onSubmit={handleSubmit}\n      submitLabel={loading ? \"Saving...\" : \"Create Template\"}\n    >\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <div className=\"flex flex-col gap-3\">\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            placeholder=\"Title\"\n            className=\"neon-input\"\n            required\n          />\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder=\"Description\"\n            className=\"neon-input\"\n            rows={2}\n          />\n          <select\n            value={frequency}\n            onChange={(e) => setFrequency(e.target.value)}\n            className=\"neon-input\"\n            required\n          >\n            <option value=\"\">Select Frequency</option>\n            {[\"Monthly\", \"Quarterly\", \"Yearly\"].map((f) => (\n              <option key={f} value={f}>\n                {f}\n              </option>\n            ))}\n          </select>\n          <input\n            value={version}\n            onChange={(e) => setVersion(e.target.value)}\n            placeholder=\"Version\"\n            className=\"neon-input\"\n          />\n          <select\n            value={sectionId}\n            onChange={(e) => setSectionId(e.target.value)}\n            className=\"neon-input\"\n          >\n            <option value=\"\">Link to Standard Section (optional)</option>\n            {sections.map((s: Section) => (\n              <option key={s.id} value={s.id}>\n                {s.title}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"flex flex-col gap-2\">\n          <label className=\"neon-label mb-2\">Link Questions</label>\n          <div className=\"neon-panel p-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\">\n            {availableQuestions.map((q) => (\n              <label\n                key={q.id}\n                className=\"flex items-center gap-2 p-2 rounded bg-white shadow-sm border border-gray-200\"\n              >\n                <input\n                  type=\"checkbox\"\n                  value={q.id}\n                  checked={selectedQuestions.includes(q.id)}\n                  onChange={(e) => {\n                    const id = e.target.value;\n                    setSelectedQuestions((prev) =>\n                      prev.includes(id)\n                        ? prev.filter((x) => x !== id)\n                        : [...prev, id],\n                    );\n                  }}\n                  className=\"neon-checkbox\"\n                />\n                <span className=\"text-sm text-gray-800\">{q.question_text}</span>\n              </label>\n            ))}\n          </div>\n        </div>\n      </div>\n    </NeonForm>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/DepartmentTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/DescriptionBox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/DocumentSectionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":82,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":82,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2574,2574],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2574,2574],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleArchiveClick' has no 'await' expression.","line":102,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":102,"endColumn":51,"suggestions":[{"messageId":"removeAsync","fix":{"range":[3109,3115],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":133,"column":19,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":133,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'archiveData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":144,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":147,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":147,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":147,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":147,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":148,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":148,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .current_version on an `any` value.","line":148,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":149,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .title on an `any` value.","line":149,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":150,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":150,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .reference_code on an `any` value.","line":150,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":151,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":151,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file_url on an `any` value.","line":151,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":151,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":152,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":152,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .document_type on an `any` value.","line":152,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":152,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `any` value.","line":153,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":154,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .section_id on an `any` value.","line":154,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":155,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":155,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":155,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":155,"endColumn":35},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":197,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":197,"endColumn":35,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5766,5766],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5766,5766],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'archiveData' is assigned a value but never used.","line":144,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":144,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":22,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport {\n  FiArchive,\n  FiFileText,\n  FiBookOpen,\n  FiClipboard,\n  FiPlus,\n} from \"react-icons/fi\";\nimport { useUser } from \"@/lib/useUser\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport Modal from \"@/components/modal\";\nimport NeonForm from \"@/components/NeonForm\";\n\ninterface Document {\n  id: string;\n  title: string;\n  section_id?: string | null;\n  document_type: string;\n  created_at?: string;\n  current_version?: number;\n  reference_code?: string;\n  file_url?: string;\n  notes?: string;\n  archived?: boolean;\n}\n\ninterface Section {\n  id: string;\n  code: string;\n  title: string;\n}\n\n// Helper function to check for valid UUID\nfunction isValidUUID(str: string | null | undefined) {\n  return (\n    !!str &&\n    /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n      str,\n    )\n  );\n}\n\nexport default function DocumentManager() {\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"\");\n  const [filterSection, setFilterSection] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [showArchiveModal, setShowArchiveModal] = useState(false);\n  const [archiveDocId, setArchiveDocId] = useState<string | null>(null);\n  const [changeSummary, setChangeSummary] = useState(\"\");\n  const [archiveErrorMsg, setArchiveErrorMsg] = useState(\"\");\n  const [buttonLoading, setButtonLoading] = useState<string | null>(null);\n  const router = useRouter();\n  const { user } = useUser();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: docs, error: docsErr } = await supabase\n        .from(\"documents\")\n        .select(\n          \"id, title, section_id, document_type, created_at, current_version, reference_code, file_url, notes, archived\",\n        );\n      if (docsErr) console.error(\"Error fetching documents:\", docsErr);\n\n      const { data: secs, error: secsErr } = await supabase\n        .from(\"standard_sections\")\n        .select(\"id, code, title\");\n      if (secsErr) console.error(\"Error fetching sections:\", secsErr);\n\n      setDocuments((docs || []).filter((doc) => !doc.archived));\n      setSections(secs || []);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSearch(\"\");\n    setFilterType(\"\");\n    setFilterSection(\"\");\n  }, []);\n\n  const filtered = documents.filter((doc) => {\n    const matchesSearch = doc.title\n      .toLowerCase()\n      .includes(search.toLowerCase());\n    const matchesType = filterType ? doc.document_type === filterType : true;\n    const matchesSection = filterSection\n      ? doc.section_id === filterSection\n      : true;\n    return matchesSearch && matchesType && matchesSection;\n  });\n\n  const handleArchiveClick = async (id: string) => {\n    if (buttonLoading) return; // Prevent double click\n    setButtonLoading(id);\n    setArchiveDocId(id);\n    setChangeSummary(\"\");\n    setArchiveErrorMsg(\"\");\n    setShowArchiveModal(true);\n  };\n\n  const handleArchiveSubmit = async () => {\n    if (!changeSummary.trim()) {\n      setArchiveErrorMsg(\"Change summary is required.\");\n      return;\n    }\n    if (!archiveDocId) return;\n    setShowArchiveModal(false);\n    setButtonLoading(archiveDocId);\n    await archiveDocument(archiveDocId, changeSummary);\n    setArchiveDocId(null);\n    setChangeSummary(\"\");\n    setButtonLoading(null);\n  };\n\n  const archiveDocument = async (id: string, summary: string) => {\n    setLoading(true);\n    if (!user?.auth_id) {\n      alert(\"Cannot archive: user not loaded. Please refresh and try again.\");\n      setLoading(false);\n      return;\n    }\n\n    const { data: doc, error: fetchError } = await supabase\n      .from(\"documents\")\n      .select(\"*\")\n      .eq(\"id\", id)\n      .single();\n    if (fetchError || !doc) {\n      alert(\"Failed to fetch document for archiving.\");\n      setLoading(false);\n      return;\n    }\n\n    const { data: archiveData, error: archiveError } = await supabase\n      .from(\"document_archive\")\n      .insert({\n        document_id: doc.id,\n        archived_version: doc.current_version || 1,\n        title: doc.title,\n        reference_code: doc.reference_code,\n        file_url: doc.file_url,\n        document_type: doc.document_type,\n        notes: doc.notes || null,\n        section_id: doc.section_id || null,\n        created_at: doc.created_at || null,\n        change_summary: summary,\n        change_date: new Date().toISOString(),\n        archived_by_auth_id: user.auth_id,\n      });\n\n    if (archiveError) {\n      console.error(\"Error archiving document:\", archiveError);\n      alert(\"Failed to archive document: \" + archiveError.message);\n      setLoading(false);\n      return;\n    }\n\n    const { error } = await supabase\n      .from(\"documents\")\n      .update({ archived: true })\n      .eq(\"id\", id);\n    if (error) {\n      alert(\"Failed to archive document.\");\n    } else {\n      setDocuments((prev) => prev.filter((doc) => doc.id !== id));\n      alert(\"Document archived.\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {/* Archive Modal */}\n      <Modal\n        open={showArchiveModal}\n        onClose={() => {\n          setShowArchiveModal(false);\n          setArchiveDocId(null);\n          setChangeSummary(\"\");\n          setButtonLoading(null);\n        }}\n      >\n        <NeonForm\n          title=\"Archive Document\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleArchiveSubmit();\n          }}\n          submitLabel={buttonLoading ? \"Archiving...\" : \"Archive\"}\n          onCancel={() => {\n            setShowArchiveModal(false);\n            setArchiveDocId(null);\n            setChangeSummary(\"\");\n            setButtonLoading(null);\n          }}\n        >\n          <label className=\"neon-label\" htmlFor=\"changeSummary\">\n            Change Summary <span className=\"danger-text\">*</span>\n          </label>\n          <textarea\n            id=\"changeSummary\"\n            value={changeSummary}\n            onChange={(e) => setChangeSummary(e.target.value)}\n            className=\"neon-input mb-2\"\n            placeholder=\"Describe why this document is being archived...\"\n            required\n            rows={3}\n          />\n          {archiveErrorMsg && (\n            <p className=\"danger-text mb-2\">{archiveErrorMsg}</p>\n          )}\n        </NeonForm>\n      </Modal>\n\n      <div className=\"document-section-controls neon-panel neon-form-padding\">\n        <div className=\"document-section-controls-filters\">\n          <select\n            value={filterType}\n            onChange={(e) => setFilterType(e.target.value)}\n            className=\"neon-input neon-select\"\n          >\n            <option value=\"\">All Types</option>\n            <option value=\"policy\">Policy</option>\n            <option value=\"ssow\">SSOW</option>\n            <option value=\"work_instruction\">Work Instruction</option>\n          </select>\n          <select\n            value={filterSection}\n            onChange={(e) => setFilterSection(e.target.value)}\n            className=\"neon-input neon-select\"\n          >\n            <option value=\"\">All Sections</option>\n            {sections.map((s) => (\n              <option key={s.id} value={s.id}>\n                {s.code} ‚Äì {s.title}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"document-section-controls-actions\">\n          <button\n            onClick={() => router.push(\"/admin/documents/add\")}\n            className=\"neon-btn neon-btn-add\"\n            title=\"Add Document\"\n            disabled={!!buttonLoading}\n          >\n            <FiPlus size={22} />\n            <span className=\"sr-only\">Add Document</span>\n          </button>\n          <button\n            onClick={() => router.push(\"/admin/documents/archived\")}\n            className=\"neon-btn neon-btn-archive\"\n            title=\"View Archived Documents\"\n            disabled={!!buttonLoading}\n          >\n            <FiArchive size={22} />\n            <span className=\"sr-only\">Archived Documents</span>\n          </button>\n        </div>\n      </div>\n\n      {loading ? (\n        <p className=\"neon-loading\">Loading...</p>\n      ) : (\n        <>\n          <div className=\"document-section-table-wrapper neon-panel neon-form-padding\">\n            <NeonTable\n              columns={[\n                { header: \"Title\", accessor: \"title\" },\n                { header: \"Type\", accessor: \"document_type\" },\n                { header: \"Section\", accessor: \"section\" },\n                { header: \"Created\", accessor: \"created\" },\n                { header: \"Version\", accessor: \"version\" },\n                { header: \"Edit\", accessor: \"edit\" },\n                { header: \"Archive\", accessor: \"archive\" },\n              ]}\n              data={filtered\n                .filter(\n                  (doc) =>\n                    isValidUUID(doc.id) &&\n                    (!doc.section_id || isValidUUID(doc.section_id)),\n                )\n                .map((doc: Document) => {\n                  const section = sections.find((s) => s.id === doc.section_id);\n                  let typeIcon = null;\n                  if (doc.document_type === \"policy\") {\n                    typeIcon = (\n                      <FiFileText\n                        size={18}\n                        className=\"neon-icon\"\n                        title=\"Policy\"\n                      />\n                    );\n                  } else if (doc.document_type === \"ssow\") {\n                    typeIcon = (\n                      <FiClipboard\n                        size={18}\n                        className=\"neon-icon\"\n                        title=\"SSOW\"\n                      />\n                    );\n                  } else if (doc.document_type === \"work_instruction\") {\n                    typeIcon = (\n                      <FiBookOpen\n                        size={18}\n                        className=\"neon-icon\"\n                        title=\"Work Instruction\"\n                      />\n                    );\n                  }\n                  return {\n                    title: doc.title,\n                    document_type: (\n                      <div className=\"document-type-icon-cell neon-label\">\n                        {typeIcon}\n                      </div>\n                    ),\n                    section: section\n                      ? `${section.code} ‚Äì ${section.title}`\n                      : \"‚Äî\",\n                    created: doc.created_at\n                      ? new Date(doc.created_at).toLocaleDateString(\"en-GB\")\n                      : \"‚Äî\",\n                    version: (\n                      <div className=\"document-version-cell neon-label\">\n                        {doc.current_version || \"‚Äî\"}\n                      </div>\n                    ),\n                    edit: (\n                      <div className=\"document-edit-cell\">\n                        <a\n                          href={`/admin/documents/edit/${doc.id}`}\n                          title=\"Edit document\"\n                        >\n                          <NeonIconButton\n                            variant=\"edit\"\n                            title=\"Edit document\"\n                            aria-label=\"Edit document\"\n                          />\n                        </a>\n                      </div>\n                    ),\n                    archive: user?.auth_id ? (\n                      <div className=\"document-archive-cell\">\n                        <NeonIconButton\n                          variant=\"archive\"\n                          icon={<FiArchive size={18} />}\n                          title=\"Archive document\"\n                          aria-label=\"Archive document\"\n                          onClick={() => handleArchiveClick(doc.id)}\n                        />\n                      </div>\n                    ) : (\n                      \"‚Äî\"\n                    ),\n                  };\n                })}\n              toolbar={\n                <p className=\"document-section-table-count neon-label\">\n                  Showing {filtered.length} matching documents\n                </p>\n              }\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/FolderTabs.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":69,"column":49,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":69,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":69,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":59},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":72,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1689,1689],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1689,1689],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport type Tab = {\n  key: string;\n  label: string;\n  icon?: React.ReactNode;\n};\n\ninterface FolderTabsProps {\n  tabs: Tab[];\n  activeTab: string;\n  onChange: (tabKey: string) => void;\n}\n\nexport default function FolderTabs({\n  tabs,\n  activeTab,\n  onChange,\n}: FolderTabsProps) {\n  return (\n    <div className=\"folder-tabs\">\n      {tabs.map((tab) => (\n        <div\n          key={tab.key}\n          className={`folder-tab${activeTab === tab.key ? \" active\" : \"\"}`}\n          onClick={() => onChange(tab.key)}\n          tabIndex={0}\n          role=\"button\"\n          aria-pressed={activeTab === tab.key}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") {\n              onChange(tab.key);\n            }\n          }}\n        >\n          {tab.icon && (\n            <span\n              className=\"folder-tab-icon neon-icon-white\"\n              aria-hidden=\"true\"\n            >\n              {tab.icon}\n            </span>\n          )}\n          <span className=\"folder-tab-label\">{tab.label}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\ntype Category = {\n  id: string;\n  name: string;\n  // Add other fields if needed\n};\n\nexport function FolderTabView() {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [activeTab, setActiveTab] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: cats } = await supabase\n        .from(\"document_categories\")\n        .select(\"*\");\n\n      setCategories(cats || []);\n      if (cats && cats.length > 0) setActiveTab(cats[0].id);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"folder-container\">\n      <FolderTabs\n        tabs={categories.map((cat) => ({ key: cat.id, label: cat.name }))}\n        activeTab={activeTab || \"\"}\n        onChange={setActiveTab}\n      />\n\n      <div className=\"folder-content\">\n        {activeTab && (\n          <div className=\"text-neon\">\n            {/* Content for the active tab can be placed here */}\n            Active Tab ID: {activeTab}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/GlobalFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/GlobalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ModuleSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/NeonFeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/NeonForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/NeonModuleForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/NeonPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/NeonTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-base-to-string","severity":2,"message":"'value' will use Object's default stringification format ('[object Object]') when stringified.","line":32,"column":32,"nodeType":"Identifier","messageId":"baseToString","endLine":32,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { FiChevronLeft, FiChevronRight, FiSearch } from \"react-icons/fi\";\n\ntype Column = {\n  header: string;\n  accessor: string;\n  render?: (value: unknown, row: Record<string, unknown>) => React.ReactNode;\n};\n\ntype NeonTableProps = {\n  columns: Column[];\n  data: Record<string, unknown>[];\n  toolbar?: React.ReactNode; // Optional toolbar section\n};\n\nexport default function NeonTable({ columns, data, toolbar }: NeonTableProps) {\n  const [sortBy, setSortBy] = useState<string | null>(null);\n  const [sortDir, setSortDir] = useState<\"asc\" | \"desc\">(\"asc\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(50);\n  const [search, setSearch] = useState(\"\");\n\n  // Filter data by search\n  const filteredData = React.useMemo(() => {\n    if (!search.trim()) return data;\n    const lower = search.toLowerCase();\n    return data.filter((row) =>\n      columns.some((col) => {\n        const value = row[col.accessor];\n        return value && String(value).toLowerCase().includes(lower);\n      }),\n    );\n  }, [data, columns, search]);\n\n  // Sort data\n  const sortedData = React.useMemo(() => {\n    if (!sortBy) return filteredData;\n    return [...filteredData].sort((a, b) => {\n      const aValue = a[sortBy] as string | number;\n      const bValue = b[sortBy] as string | number;\n      if (aValue < bValue) return sortDir === \"asc\" ? -1 : 1;\n      if (aValue > bValue) return sortDir === \"asc\" ? 1 : -1;\n      return 0;\n    });\n  }, [filteredData, sortBy, sortDir]);\n\n  // Pagination logic\n  const totalRows = sortedData.length;\n  const totalPages = Math.max(1, Math.ceil(totalRows / pageSize));\n  const paginatedData = sortedData.slice(\n    (currentPage - 1) * pageSize,\n    currentPage * pageSize,\n  );\n\n  // Handlers\n  const handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setPageSize(Number(e.target.value));\n    setCurrentPage(1);\n  };\n  const handlePrev = () => setCurrentPage((p) => Math.max(1, p - 1));\n  const handleNext = () => setCurrentPage((p) => Math.min(totalPages, p + 1));\n\n  return (\n    <div>\n      {/* Controls Row: Search (left), Toolbar (center, optional), Pagination (right) in-line */}\n      <div\n        className=\"neon-table-controls-row\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          gap: \"1.5rem\",\n          marginBottom: \"1.5rem\",\n          padding: \"1rem 0\",\n        }}\n      >\n        {/* Search Bar (left) */}\n        <div\n          className=\"neon-table-search-bar\"\n          style={{\n            flex: \"1 1 320px\",\n            minWidth: 220,\n            maxWidth: 320,\n            paddingLeft: \"1rem\",\n          }}\n        >\n          <div style={{ position: \"relative\" }}>\n            <FiSearch\n              style={{\n                position: \"absolute\",\n                left: 10,\n                top: \"50%\",\n                transform: \"translateY(-50%)\",\n                color: \"var(--neon)\",\n              }}\n            />\n            <input\n              id=\"neon-table-search\"\n              type=\"search\"\n              className=\"neon-input\"\n              style={{ paddingLeft: 36 }}\n              placeholder=\"Search...\"\n              value={search}\n              onChange={(e) => {\n                setSearch(e.target.value);\n                setCurrentPage(1);\n              }}\n              autoComplete=\"off\"\n            />\n          </div>\n        </div>\n        {/* Toolbar (center, optional) */}\n        {toolbar && (\n          <div\n            className=\"neon-table-toolbar\"\n            style={{\n              flex: \"0 0 auto\",\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"0.5rem\",\n            }}\n          >\n            {toolbar}\n          </div>\n        )}\n        {/* Pagination Controls (right) */}\n        <div\n          className=\"neon-pagination-controls\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"1.5rem\",\n            marginLeft: \"auto\",\n          }}\n        >\n          <select\n            id=\"page-size-select\"\n            value={pageSize}\n            onChange={handlePageSizeChange}\n            className=\"neon-table-page-size-select\"\n            style={{ width: \"auto\", minWidth: 0 }}\n          >\n            <option value={10}>10</option>\n            <option value={25}>25</option>\n            <option value={50}>50</option>\n          </select>\n          <button\n            onClick={handlePrev}\n            disabled={currentPage === 1}\n            className=\"neon-btn-square neon-btn-back\"\n            type=\"button\"\n            aria-label=\"Previous page\"\n          >\n            <FiChevronLeft size={20} />\n          </button>\n          <span className=\"neon-table-pagination-label\">\n            Page {currentPage} of {totalPages}\n          </span>\n          <button\n            onClick={handleNext}\n            disabled={currentPage === totalPages}\n            className=\"neon-btn-square neon-btn-next\"\n            type=\"button\"\n            aria-label=\"Next page\"\n          >\n            <FiChevronRight size={20} />\n          </button>\n        </div>\n      </div>\n      <table className=\"neon-table\">\n        <thead>\n          <tr>\n            {columns.map((col) => (\n              <th\n                key={col.accessor}\n                className=\"text-center font-bold tracking-wide cursor-pointer select-none\"\n                onClick={() => {\n                  if (sortBy === col.accessor) {\n                    setSortDir((prev) => (prev === \"asc\" ? \"desc\" : \"asc\"));\n                  } else {\n                    setSortBy(col.accessor);\n                    setSortDir(\"asc\");\n                  }\n                }}\n              >\n                {col.header}\n                {sortBy === col.accessor && (\n                  <span className=\"ml-2\">{sortDir === \"asc\" ? \"‚ñ≤\" : \"‚ñº\"}</span>\n                )}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {paginatedData.length === 0 ? (\n            <tr>\n              <td colSpan={columns.length} className=\"text-center py-6\">\n                No data available.\n              </td>\n            </tr>\n          ) : (\n            paginatedData.map((row, i) => (\n              <tr key={i} className=\"neon-table-row\">\n                {columns.map((col) => (\n                  <td key={col.accessor} className=\"neon-table-cell\">\n                    {col.render\n                      ? col.render(row[col.accessor], row)\n                      : (row[col.accessor] as React.ReactNode)}\n                  </td>\n                ))}\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/QuestionEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/QuestionTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":51,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":51,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1480,1480],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1480,1480],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":101,"column":13,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":101,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/QuestionTab.tsx\n\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport QuestionEditor from \"./QuestionEditor\";\nimport type { Question, Department } from \"@/types\";\n\nexport default function QuestionTab() {\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [err, setErr] = useState<string | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    setLoading(true);\n    setErr(null);\n\n    const [qRes, dRes] = await Promise.all([\n      supabase\n        .from(\"audit_questions\")\n        .select(\"*\")\n        .order(\"question_text\", { ascending: true }),\n      supabase\n        .from(\"departments\")\n        .select(\"*\")\n        .order(\"name\", { ascending: true }),\n    ]);\n\n    if (qRes.error) {\n      console.error(\"audit_questions load error:\", qRes.error);\n      setErr(qRes.error.message);\n      setQuestions([]);\n    } else {\n      setQuestions((qRes.data as Question[]) ?? []);\n    }\n\n    if (dRes.error) {\n      console.error(\"departments load error:\", dRes.error);\n      // Don‚Äôt block the page if departments fails; just leave it empty\n      setDepartments([]);\n      if (!err) setErr(dRes.error.message);\n    } else {\n      setDepartments((dRes.data as Department[]) ?? []);\n    }\n\n    setLoading(false);\n  }, [err]);\n\n  useEffect(() => {\n    fetchAll();\n  }, [fetchAll]);\n\n  const updateQuestion = async (\n    id: string,\n    field: keyof Question,\n    value: unknown,\n  ) => {\n    setErr(null);\n    const patch: Partial<Question> = { [field]: value };\n\n    const { error } = await supabase\n      .from(\"audit_questions\")\n      .update(patch)\n      .eq(\"id\", id);\n\n    if (error) {\n      console.error(\"updateQuestion error:\", error);\n      setErr(error.message);\n      return;\n    }\n\n    setQuestions((prev) =>\n      prev\n        .map((q) => (q.id === id ? { ...q, ...patch } : q))\n        .sort((a, b) =>\n          (a.question_text || \"\").localeCompare(b.question_text || \"\"),\n        ),\n    );\n  };\n\n  const removeQuestion = async (id: string) => {\n    setErr(null);\n    const { error } = await supabase\n      .from(\"audit_questions\")\n      .delete()\n      .eq(\"id\", id);\n\n    if (error) {\n      console.error(\"removeQuestion error:\", error);\n      setErr(error.message);\n      return;\n    }\n\n    setQuestions((prev) => prev.filter((q) => q.id !== id));\n  };\n\n  const addQuestion = async () => {\n    setErr(null);\n    // Use a non-empty default to avoid NOT NULL or CHECK constraints\n    const { data, error } = await supabase\n      .from(\"audit_questions\")\n      .insert({ question_text: \"New question\", fail_department_id: null })\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"addQuestion error:\", error);\n      setErr(error.message);\n      return;\n    }\n\n    if (data) {\n      setQuestions((prev) =>\n        [...prev, data as Question].sort((a, b) =>\n          (a.question_text || \"\").localeCompare(b.question_text || \"\"),\n        ),\n      );\n    }\n  };\n\n  const bulkAddQuestions = async (bulkText: string) => {\n    setErr(null);\n    const lines = bulkText\n      .split(\"\\n\")\n      .map((l) => l.trim())\n      .filter((l) => l.length > 0);\n\n    if (lines.length === 0) return;\n\n    const rows = lines.map((question_text) => ({\n      question_text,\n      fail_department_id: null,\n    }));\n\n    const { data, error } = await supabase\n      .from(\"audit_questions\")\n      .insert(rows)\n      .select();\n\n    if (error) {\n      console.error(\"bulkAddQuestions error:\", error);\n      setErr(error.message);\n      return;\n    }\n\n    if (data) {\n      setQuestions((prev) =>\n        [...prev, ...(data as Question[])].sort((a, b) =>\n          (a.question_text || \"\").localeCompare(b.question_text || \"\"),\n        ),\n      );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"text-[#40E0D0] text-center py-8\">\n        Loading questions...\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {err && <div className=\"mb-3 text-sm text-red-400\">{err}</div>}\n\n      <QuestionEditor\n        questions={questions}\n        departments={departments}\n        updateQuestion={updateQuestion}\n        removeQuestion={removeQuestion}\n        addQuestion={addQuestion}\n        bulkAddQuestions={bulkAddQuestions}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/RequireAccess.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/SearchableDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/SubmissionsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":41,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":190,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1118,1118],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1118,1118],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/SubmissionsTab.tsx\n\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport { FiSearch } from \"react-icons/fi\";\n\ntype SubmissionRow = {\n  id: string;\n  assignment_id: string | null;\n  audit_id: string;\n  submitted_by_auth_id: string;\n  status: string; // 'in_progress' | 'submitted' | others if you add\n  submitted_at: string | null;\n};\n\ntype EnrichedRow = {\n  id: string;\n  audit_title: string;\n  user_name: string;\n  department: string;\n  status: string;\n  submitted_at: string | null; // ISO\n  submitted_at_display: string; // pretty\n  due_at_display: string | null; // pretty or null\n};\n\nexport default function SubmissionsTab() {\n  const [rows, setRows] = useState<EnrichedRow[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [err, setErr] = useState<string | null>(null);\n  const [query, setQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<\n    \"All\" | \"submitted\" | \"in_progress\"\n  >(\"All\");\n\n  useEffect(() => {\n    let alive = true;\n\n    (async () => {\n      setLoading(true);\n      setErr(null);\n\n      // 1) Base submissions (latest first)\n      const { data: subs, error } = await supabase\n        .from(\"audit_submissions\")\n        .select(\n          \"id, assignment_id, audit_id, submitted_by_auth_id, status, submitted_at\",\n        )\n        .order(\"submitted_at\", { ascending: false })\n        .limit(200);\n\n      if (!alive) return;\n\n      if (error) {\n        console.error(\"Error loading submissions:\", error.message);\n        setErr(error.message);\n        setRows([]);\n        setLoading(false);\n        return;\n      }\n\n      const base: SubmissionRow[] = (subs ?? []) as SubmissionRow[];\n\n      // 2) Collect IDs to enrich\n      const auditIds = Array.from(new Set(base.map((b) => b.audit_id)));\n      const userIds = Array.from(\n        new Set(base.map((b) => b.submitted_by_auth_id)),\n      );\n      const assignIds = Array.from(\n        new Set(base.map((b) => b.assignment_id).filter(Boolean)),\n      ) as string[];\n\n      // 3) Fetch audit titles (if table exists)\n      const titleMap = new Map<string, string>();\n      if (auditIds.length) {\n        try {\n          const { data: audits } = await supabase\n            .from(\"audits\")\n            .select(\"id, name, title\")\n            .in(\"id\", auditIds);\n          (audits ?? []).forEach(\n            (a: { id: string; name?: string; title?: string }) => {\n              titleMap.set(a.id, (a.title || a.name || a.id));\n            },\n          );\n        } catch {\n          // audits table might not exist yet; fallback to id below\n        }\n      }\n\n      // 4) Fetch user names + departments\n      const userMap = new Map<\n        string,\n        {\n          first_name?: string | null;\n          last_name?: string | null;\n          email?: string | null;\n          department?: string;\n        }\n      >();\n      if (userIds.length) {\n        const { data: users, error: uErr } = await supabase\n          .from(\"users\")\n          .select(\"auth_id, first_name, last_name, email, departments(name)\")\n          .in(\"auth_id\", userIds);\n\n        if (!uErr && users) {\n          users.forEach(\n            (u: {\n              auth_id: string;\n              first_name?: string | null;\n              last_name?: string | null;\n              email?: string | null;\n              departments?: { name?: string }[] | { name?: string };\n            }) => {\n              const dep = Array.isArray(u.departments)\n                ? u.departments[0]?.name\n                : u.departments?.name;\n              userMap.set(u.auth_id, {\n                first_name: u.first_name,\n                last_name: u.last_name,\n                email: u.email,\n                department: dep || \"‚Äî\",\n              });\n            },\n          );\n        }\n      }\n\n      // 5) Fetch due dates from assignments (if table exists)\n      const dueMap = new Map<string, string | null>();\n      if (assignIds.length) {\n        try {\n          const { data: assigns } = await supabase\n            .from(\"user_assignments\")\n            .select(\"id, due_at\")\n            .in(\"id\", assignIds);\n          (assigns ?? []).forEach(\n            (a: { id: string; due_at?: string | null }) => {\n              dueMap.set(a.id, a.due_at ?? null);\n            },\n          );\n        } catch {\n          // table or RLS might block; leave dueMap empty\n        }\n      }\n\n      // 6) Build enriched rows\n      const enriched: EnrichedRow[] = base.map((b) => {\n        const user = userMap.get(b.submitted_by_auth_id) || {};\n        const name =\n          `${(user.first_name || \"\").trim()} ${(user.last_name || \"\").trim()}`.trim() ||\n          user.email ||\n          b.submitted_by_auth_id;\n\n        const auditTitle = titleMap.get(b.audit_id) ?? b.audit_id;\n\n        const prettySubmitted = b.submitted_at\n          ? new Date(b.submitted_at).toLocaleString()\n          : \"Not submitted\";\n\n        const dueIso = b.assignment_id\n          ? (dueMap.get(b.assignment_id) ?? null)\n          : null;\n        const prettyDue = dueIso\n          ? new Date(dueIso).toLocaleString(undefined, {\n              year: \"numeric\",\n              month: \"short\",\n              day: \"2-digit\",\n            })\n          : null;\n\n        return {\n          id: b.id,\n          audit_title: auditTitle,\n          user_name: name,\n          department: user.department || \"‚Äî\",\n          status: b.status || \"in_progress\",\n          submitted_at: b.submitted_at,\n          submitted_at_display: prettySubmitted,\n          due_at_display: prettyDue,\n        };\n      });\n\n      if (!alive) return;\n      setRows(enriched);\n      setLoading(false);\n    })();\n\n    return () => {\n      alive = false;\n    };\n  }, []);\n\n  // Filters & search\n  const filtered = useMemo(() => {\n    let list = rows;\n    if (statusFilter !== \"All\") {\n      list = list.filter(\n        (r) => (r.status || \"\").toLowerCase() === statusFilter,\n      );\n    }\n    if (query.trim()) {\n      const q = query.toLowerCase();\n      list = list.filter(\n        (r) =>\n          r.user_name.toLowerCase().includes(q) ||\n          r.department.toLowerCase().includes(q) ||\n          r.audit_title.toLowerCase().includes(q),\n      );\n    }\n    // recent first\n    return [...list].sort((a, b) => {\n      const A = a.submitted_at ? Date.parse(a.submitted_at) : 0;\n      const B = b.submitted_at ? Date.parse(b.submitted_at) : 0;\n      return B - A;\n    });\n  }, [rows, query, statusFilter]);\n\n  // Status options from data\n  const statusOptions = useMemo(\n    () =>\n      [\n        \"All\",\n        ...Array.from(\n          new Set(rows.map((r) => (r.status || \"\").toLowerCase())),\n        ).filter(Boolean),\n      ] as (\"All\" | \"submitted\" | \"in_progress\")[],\n    [rows],\n  );\n\n  return (\n    <NeonPanel\n      bgColor=\"#012f34\"\n      glowColor=\"#40E0D0\"\n      className=\"submissions-tab-panel\"\n    >\n      <h3 className=\"submissions-tab-title\">Audit Submissions</h3>\n\n      {/* Controls */}\n      <div className=\"flex items-center gap-3 mb-3\">\n        <div className=\"relative grow max-w-md\">\n          <FiSearch className=\"absolute left-2 top-2.5 opacity-70\" />\n          <input\n            type=\"search\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder=\"Search by user, department, or audit‚Ä¶\"\n            className=\"pl-8 neon-input w-full\"\n          />\n        </div>\n\n        <select\n          className=\"neon-input\"\n          value={statusFilter}\n          onChange={(e) =>\n            setStatusFilter(\n              e.target.value as \"All\" | \"submitted\" | \"in_progress\",\n            )\n          }\n        >\n          {statusOptions.map((opt) => (\n            <option key={opt} value={opt}>\n              {opt === \"All\" ? \"All statuses\" : opt}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Body */}\n      {err && (\n        <p className=\"text-red-400 text-sm mb-2\">Failed to load: {err}</p>\n      )}\n\n      {loading ? (\n        <p className=\"submissions-tab-loading-msg\">Loading‚Ä¶</p>\n      ) : filtered.length === 0 ? (\n        <p className=\"submissions-tab-empty-msg\">No submissions yet.</p>\n      ) : (\n        <ul className=\"submissions-tab-list\">\n          {filtered.map((s) => (\n            <li key={s.id} className=\"submissions-tab-list-item\">\n              <div className=\"submissions-tab-list-item-content\">\n                <p>\n                  <strong>Submission ID:</strong> {s.id}\n                </p>\n                <p>\n                  <strong>Audit:</strong> {s.audit_title}\n                </p>\n                <p>\n                  <strong>User:</strong> {s.user_name}\n                </p>\n                <p>\n                  <strong>Department:</strong> {s.department}\n                </p>\n                <p>\n                  <strong>Status:</strong> {s.status || \"in_progress\"}\n                </p>\n                <p>\n                  <strong>Submitted At:</strong> {s.submitted_at_display}\n                </p>\n                {s.due_at_display && (\n                  <p>\n                    <strong>Due:</strong> {s.due_at_display}\n                  </p>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/TaskItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/TriggerFakeUserButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":18,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":18,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Record<string, unknown> | null>`.","line":19,"column":18,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":19,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function TriggerFakeUserButton() {\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState<Record<string, unknown> | null>(null);\n\n  const handleClick = async () => {\n    setLoading(true);\n    setResults(null);\n\n    try {\n      const res = await fetch(\"/api/register-fake-users\", {\n        method: \"POST\",\n      });\n\n      const data = await res.json();\n      setResults(data);\n    } catch {\n      setResults({ error: \"Something went wrong\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"trigger-fake-user-root\">\n      <button\n        onClick={handleClick}\n        disabled={loading}\n        className=\"trigger-fake-user-btn\"\n      >\n        {loading ? \"Creating Fake Users...\" : \"Register Fake Users\"}\n      </button>\n\n      {results && (\n        <pre className=\"trigger-fake-user-results\">\n          {JSON.stringify(results, null, 2)}\n        </pre>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/UserProfileCardSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ViewAuditTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":38,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":62,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1197,1197],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1197,1197],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/ViewAuditTab.tsx\n\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\ntype TemplateRow = {\n  id: string;\n  title?: string | null; // some schemas use 'title'\n  template_title?: string | null; // others use 'template_title'\n  description?: string | null;\n  frequency?: string | null;\n  version?: string | null;\n  standard_section_id?: string | null;\n  archived?: string | boolean | null;\n  created_at?: string | null;\n};\n\nexport default function ViewAuditTab() {\n  const [templates, setTemplates] = useState<TemplateRow[]>([]);\n  const [expanded, setExpanded] = useState<string | null>(null);\n  const [questionsMap, setQuestionsMap] = useState<Record<string, string[]>>(\n    {},\n  );\n  const [loading, setLoading] = useState(true);\n  const [err, setErr] = useState<string | null>(null);\n\n  const isArchived = (v: TemplateRow[\"archived\"]) => {\n    if (typeof v === \"boolean\") return v;\n    if (v == null) return false;\n    const s = String(v).trim().toLowerCase();\n    return s === \"yes\" || s === \"true\" || s === \"1\";\n  };\n\n  useEffect(() => {\n    let alive = true;\n    (async () => {\n      setLoading(true);\n      setErr(null);\n\n      // keep select wide enough to support both 'title' and 'template_title'\n      const { data, error } = await supabase\n        .from(\"audit_templates\")\n        .select(\n          \"id, title, template_title, description, frequency, version, standard_section_id, archived\",\n        )\n        .order(\"title\", { ascending: true });\n\n      if (!alive) return;\n\n      if (error) {\n        setErr(error.message);\n        setTemplates([]);\n      } else {\n        const visible = (data ?? []).filter(\n          (t: TemplateRow) => !isArchived(t.archived),\n        );\n        setTemplates(visible);\n      }\n      setLoading(false);\n    })();\n    return () => {\n      alive = false;\n    };\n  }, []);\n\n  const displayTitle = (tpl: TemplateRow) =>\n    tpl.title?.trim() || tpl.template_title?.trim() || \"(untitled)\";\n\n  const toggleExpand = async (templateId: string) => {\n    setErr(null);\n    if (expanded === templateId) {\n      setExpanded(null);\n      return;\n    }\n    // fetch questions lazily on first expand\n    if (!questionsMap[templateId]) {\n      const { data: linkRows, error: linkErr } = await supabase\n        .from(\"audit_template_questions_status\")\n        .select(\"question_id\")\n        .eq(\"template_id\", templateId);\n\n      if (linkErr) {\n        setErr(linkErr.message);\n        setQuestionsMap((m) => ({ ...m, [templateId]: [] }));\n        setExpanded(templateId);\n        return;\n      }\n\n      const ids = (linkRows ?? [])\n        .map((r: { question_id: string }) => r.question_id)\n        .filter(Boolean);\n      if (ids.length === 0) {\n        setQuestionsMap((m) => ({ ...m, [templateId]: [] }));\n        setExpanded(templateId);\n        return;\n      }\n\n      const { data: qs, error: qErr } = await supabase\n        .from(\"audit_questions\")\n        .select(\"question_text\")\n        .in(\"id\", ids);\n\n      if (qErr) {\n        setErr(qErr.message);\n        setQuestionsMap((m) => ({ ...m, [templateId]: [] }));\n      } else {\n        const texts = (qs ?? [])\n          .map((q: { question_text: string }) => q.question_text)\n          .filter(Boolean);\n        setQuestionsMap((m) => ({ ...m, [templateId]: texts }));\n      }\n    }\n    setExpanded(templateId);\n  };\n\n  const list = useMemo(\n    () =>\n      templates.map((tpl) => ({\n        id: tpl.id,\n        title: displayTitle(tpl),\n        description: tpl.description ?? \"\",\n        frequency: tpl.frequency ?? \"‚Äî\",\n        version: tpl.version ?? \"‚Äî\",\n      })),\n    [templates],\n  );\n\n  return (\n    <NeonPanel className=\"neon-panel-audit space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"neon-form-title drop-shadow-glow\">Audit Templates</h3>\n        {/* Quick route to assignment tab if you want */}\n        {/* <button className=\"neon-link-audit\" onClick={() => setActiveTab('assign')}>Go to Assign</button> */}\n      </div>\n\n      {err && <div className=\"text-red-400 text-sm\">{err}</div>}\n      {loading ? (\n        <div className=\"opacity-80 text-sm p-3\">Loading‚Ä¶</div>\n      ) : list.length === 0 ? (\n        <div className=\"opacity-70 text-sm p-3\">No audit templates found.</div>\n      ) : (\n        <ul className=\"neon-list-audit space-y-4\">\n          {list.map((tpl) => (\n            <li key={tpl.id} className=\"neon-list-item-audit\">\n              <div className=\"neon-list-item-header\">\n                <div>\n                  <h4 className=\"neon-list-item-title\">{tpl.title}</h4>\n                  <p className=\"neon-list-item-meta\">\n                    Version: {tpl.version} &nbsp;|&nbsp; Frequency:{\" \"}\n                    {tpl.frequency}\n                  </p>\n                </div>\n                <div className=\"neon-list-item-actions\">\n                  <button\n                    type=\"button\"\n                    className=\"neon-link-audit\"\n                    onClick={() => toggleExpand(tpl.id)}\n                  >\n                    {expanded === tpl.id ? \"Hide Details\" : \"View Details\"}\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"neon-link-archive\"\n                    onClick={async () => {\n                      const { error } = await supabase\n                        .from(\"audit_templates\")\n                        .update({ archived: \"yes\" })\n                        .eq(\"id\", tpl.id);\n                      if (error) {\n                        alert(\"Failed to archive: \" + error.message);\n                      } else {\n                        setTemplates((prev) =>\n                          prev.filter((t) => t.id !== tpl.id),\n                        );\n                        if (expanded === tpl.id) setExpanded(null);\n                      }\n                    }}\n                  >\n                    Archive\n                  </button>\n                </div>\n              </div>\n\n              {expanded === tpl.id && (\n                <div className=\"mt-4 border-t border-[#40E0D0] pt-4 text-sm text-[#b2f1ec] space-y-2\">\n                  {templates.find((t) => t.id === tpl.id)?.description && (\n                    <p>\n                      <strong>Description:</strong>{\" \"}\n                      {templates.find((t) => t.id === tpl.id)?.description}\n                    </p>\n                  )}\n\n                  <p className=\"opacity-80\">\n                    <strong>Questions:</strong>\n                  </p>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    {Array.isArray(questionsMap[tpl.id]) &&\n                    questionsMap[tpl.id].length > 0 ? (\n                      questionsMap[tpl.id].map((q, i) => (\n                        <li key={`${tpl.id}-${i}`}>{q}</li>\n                      ))\n                    ) : (\n                      <li className=\"opacity-70\">No questions linked.</li>\n                    )}\n                  </ul>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/RoleProfileCreate.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":61,"column":23,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":61,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":75,"column":17,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":75,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":75,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":76,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":76,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":76,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":76,"endColumn":43},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":129,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":129,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4207,4207],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4207,4207],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":159,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":159,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5078,5078],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5078,5078],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":200,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":200,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":230,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":230,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":241,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":252,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":252,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":263,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":263,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":272,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":272,"endColumn":11}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport toast from \"react-hot-toast\";\nimport ContentHeader from \"@/components/headersandfooters/ContentHeader\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\nimport DocumentSelectorWidget from \"./widgets/DocumentSelectorWidget\";\nimport BehaviourSelectorWidget from \"./widgets/BehaviourSelectorWidget\";\nimport AssignmentSelectorWidget from \"./widgets/AssignmentSelectorWidget\";\nimport { FiArrowLeft, FiArrowRight, FiSave } from \"react-icons/fi\";\nimport NeonDualListbox from \"@/components/ui/NeonDualListbox\";\n\nconst steps = [\n  { label: \"Modules\" },\n  { label: \"Documents\" },\n  { label: \"Behaviours\" },\n  { label: \"Assignments\" },\n];\n\ntype TargetType = \"user\" | \"role\" | \"department\";\n\nexport default function RoleProfileCreate({\n  onSubmit,\n  onCancel,\n  profileId,\n}: {\n  onSubmit?: (data: {\n    id: string;\n    name: string;\n    description: string;\n    selectedModules: string[];\n    selectedDocuments: string[];\n    selectedBehaviours: string[];\n    selectedAssignments: { type: TargetType; id: string; label: string }[];\n  }) => void;\n  onCancel?: () => void;\n  profileId?: string;\n}) {\n  const [step, setStep] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedModules, setSelectedModules] = useState<string[]>([]);\n  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);\n  const [selectedBehaviours, setSelectedBehaviours] = useState<string[]>([]);\n  const [selectedAssignments, setSelectedAssignments] = useState<\n    { type: TargetType; id: string; label: string }[]\n  >([]);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [modules, setModules] = useState<{ id: string; label: string }[]>([]);\n\n  // ---------- Prefill when editing ----------\n  useEffect(() => {\n    let cancelled = false;\n    if (!profileId) return;\n\n    const fetchProfile = async () => {\n      try {\n        const { data: profile, error: profileErr } = await supabase\n          .from(\"role_profiles\")\n          .select(\"*\")\n          .eq(\"id\", profileId)\n          .maybeSingle();\n\n        if (profileErr) throw profileErr;\n        if (!profile) {\n          // profile missing ‚Äî show message but don‚Äôt crash\n          toast.error(\"Role profile not found\");\n          return;\n        }\n\n        if (cancelled) return;\n        setName(profile.name || \"\");\n        setDescription(profile.description || \"\");\n\n        const [mods, docs, behs, targets] = await Promise.all([\n          supabase\n            .from(\"role_profile_modules\")\n            .select(\"module_id\")\n            .eq(\"role_profile_id\", profileId),\n          supabase\n            .from(\"role_profile_documents\")\n            .select(\"document_id\")\n            .eq(\"role_profile_id\", profileId),\n          supabase\n            .from(\"role_profile_behaviours\")\n            .select(\"behaviour_id\")\n            .eq(\"role_profile_id\", profileId),\n          supabase\n            .from(\"role_profile_targets\")\n            .select(\"target_type, target_id, label\")\n            .eq(\"role_profile_id\", profileId),\n        ]);\n\n        if (cancelled) return;\n        setSelectedModules(\n          (mods.data ?? []).map((m: { module_id: string }) => m.module_id),\n        );\n        setSelectedDocuments(\n          (docs.data ?? []).map((d: { document_id: string }) => d.document_id),\n        );\n        setSelectedBehaviours(\n          (behs.data ?? []).map(\n            (b: { behaviour_id: string }) => b.behaviour_id,\n          ),\n        );\n        setSelectedAssignments(\n          (targets.data ?? []).map(\n            (t: {\n              target_type: TargetType;\n              target_id: string;\n              label?: string;\n            }) => ({\n              type: t.target_type,\n              id: t.target_id,\n              label: t.label ?? \"\",\n            }),\n          ),\n        );\n      } catch (e: unknown) {\n        const errMsg = e instanceof Error ? e.message : String(e);\n        console.error(\"Prefill error:\", errMsg);\n        toast.error(errMsg || \"Failed to load role profile\");\n      }\n    };\n\n    fetchProfile();\n    return () => {\n      cancelled = true;\n    };\n  }, [profileId]);\n\n  // ---------- Load selectable modules for dual listbox ----------\n  useEffect(() => {\n    let cancelled = false;\n    const fetchModules = async () => {\n      try {\n        const { data, error } = await supabase\n          .from(\"modules\")\n          .select(\"id, name\")\n          .order(\"name\", { ascending: true });\n        if (error) throw error;\n        if (!cancelled && data) {\n          setModules(\n            data.map((m: { id: string; name: string }) => ({\n              id: m.id,\n              label: m.name,\n            })),\n          );\n        }\n      } catch (e: unknown) {\n        const errMsg = e instanceof Error ? e.message : String(e);\n        console.error(\"Load modules error:\", errMsg);\n        toast.error(errMsg || \"Failed to load modules\");\n      }\n    };\n    fetchModules();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  const handleNext = () => setStep((s) => Math.min(s + 1, steps.length - 1));\n  const handleBack = () => setStep((s) => Math.max(s - 1, 0));\n\n  // ---------- Save via one API call ----------\n  const handleSave = async () => {\n    if (saving) return;\n    setSaving(true);\n    setError(\"\");\n\n    if (!name.trim()) {\n      setError(\"Profile name is required.\");\n      setSaving(false);\n      return;\n    }\n\n    try {\n      let profileRow;\n      if (profileId) {\n        // Update existing profile\n        const { error: updateErr } = await supabase\n          .from(\"role_profiles\")\n          .update({ name, description })\n          .eq(\"id\", profileId);\n        if (updateErr) throw updateErr;\n        profileRow = { id: profileId };\n      } else {\n        // Insert new profile\n        const { data, error: insertErr } = await supabase\n          .from(\"role_profiles\")\n          .insert([{ name, description }])\n          .select(\"id\")\n          .single();\n        if (insertErr) throw insertErr;\n        profileRow = data;\n      }\n      const id = profileRow.id;\n\n      // Remove old module/document/behaviour/assignment links if editing\n      if (profileId) {\n        await Promise.all([\n          supabase\n            .from(\"role_profile_modules\")\n            .delete()\n            .eq(\"role_profile_id\", id),\n          supabase\n            .from(\"role_profile_documents\")\n            .delete()\n            .eq(\"role_profile_id\", id),\n          supabase\n            .from(\"role_profile_behaviours\")\n            .delete()\n            .eq(\"role_profile_id\", id),\n          supabase\n            .from(\"role_profile_targets\")\n            .delete()\n            .eq(\"role_profile_id\", id),\n        ]);\n      }\n\n      // Insert new module links\n      if (selectedModules.length > 0) {\n        await supabase\n          .from(\"role_profile_modules\")\n          .insert(\n            selectedModules.map((module_id) => ({\n              role_profile_id: id,\n              module_id,\n            })),\n          );\n      }\n      // Insert new document links\n      if (selectedDocuments.length > 0) {\n        await supabase\n          .from(\"role_profile_documents\")\n          .insert(\n            selectedDocuments.map((document_id) => ({\n              role_profile_id: id,\n              document_id,\n            })),\n          );\n      }\n      // Insert new behaviour links\n      if (selectedBehaviours.length > 0) {\n        await supabase\n          .from(\"role_profile_behaviours\")\n          .insert(\n            selectedBehaviours.map((behaviour_id) => ({\n              role_profile_id: id,\n              behaviour_id,\n            })),\n          );\n      }\n      // Insert new assignment links\n      if (selectedAssignments.length > 0) {\n        await supabase\n          .from(\"role_profile_targets\")\n          .insert(\n            selectedAssignments.map((a) => ({\n              role_profile_id: id,\n              target_type: a.type,\n              target_id: a.id,\n              label: a.label,\n            })),\n          );\n      }\n\n      onSubmit?.({\n        id,\n        name,\n        description,\n        selectedModules,\n        selectedDocuments,\n        selectedBehaviours,\n        selectedAssignments,\n      });\n\n      if (!profileId) {\n        setName(\"\");\n        setDescription(\"\");\n        setSelectedModules([]);\n        setSelectedDocuments([]);\n        setSelectedBehaviours([]);\n        setSelectedAssignments([]);\n        setStep(0);\n      }\n\n      toast.success(\"‚úÖ Role profile saved and assignments materialized\");\n    } catch (e) {\n      setError((e as Error)?.message || \"Failed to save role profile\");\n      toast.error((e as Error)?.message || \"Failed to save role profile\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <>\n      <ContentHeader title=\"Create Role Profile\" />\n\n      <NeonPanel className=\"neon-panel-lg\">\n        <div className=\"mt-8 pt-6\">\n          <div className=\"mb-6\">\n            <div className=\"neon-flex items-center gap-2 text-lg font-bold\">\n              Step {step + 1} of {steps.length}: {steps[step].label}\n            </div>\n            <div className=\"mt-2 neon-flex gap-2\">\n              {steps.map((s, i) => (\n                <div\n                  key={s.label}\n                  className={`h-2 w-8 rounded-full ${i <= step ? \"neon-progress\" : \"neon-progress-inactive\"}`}\n                />\n              ))}\n            </div>\n          </div>\n\n          {step === 0 && (\n            <>\n              <div className=\"mb-6\">\n                <label className=\"neon-form-title\">Profile Name</label>\n                <input\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  className=\"neon-input w-full\"\n                  placeholder=\"Enter profile name\"\n                />\n              </div>\n              <div className=\"mb-6\">\n                <label className=\"neon-form-title\">Description</label>\n                <textarea\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"neon-input w-full\"\n                  placeholder=\"Enter description\"\n                />\n              </div>\n              <div className=\"mb-6\">\n                <NeonDualListbox\n                  items={modules}\n                  selected={selectedModules}\n                  onChange={setSelectedModules}\n                  titleLeft=\"Available Modules\"\n                  titleRight=\"Selected Modules\"\n                />\n              </div>\n            </>\n          )}\n\n          <div className=\"mb-6\">\n            {step === 1 && (\n              <DocumentSelectorWidget\n                selectedDocuments={selectedDocuments}\n                onChange={setSelectedDocuments}\n              />\n            )}\n            {step === 2 && (\n              <BehaviourSelectorWidget\n                selectedBehaviours={selectedBehaviours}\n                onChange={setSelectedBehaviours}\n              />\n            )}\n            {step === 3 && (\n              <AssignmentSelectorWidget\n                selectedAssignments={selectedAssignments}\n                onChange={setSelectedAssignments}\n              />\n            )}\n          </div>\n\n          {error && (\n            <div className=\"neon-message neon-message-error mb-4\">{error}</div>\n          )}\n\n          <div className=\"neon-flex gap-4 justify-between\">\n            <button\n              className=\"neon-btn neon-btn-danger neon-btn-icon\"\n              onClick={step === 0 ? onCancel : handleBack}\n              type=\"button\"\n              aria-label={step === 0 ? \"Cancel\" : \"Back\"}\n              data-tooltip={step === 0 ? \"Cancel\" : \"Back\"}\n              disabled={saving}\n            >\n              <FiArrowLeft />\n            </button>\n            {step < steps.length - 1 ? (\n              <button\n                className=\"neon-btn neon-btn-next neon-btn-icon\"\n                onClick={handleNext}\n                type=\"button\"\n                aria-label=\"Next\"\n                data-tooltip=\"Next\"\n                disabled={saving}\n              >\n                <FiArrowRight />\n              </button>\n            ) : (\n              <button\n                className=\"neon-btn neon-btn-save neon-btn-icon\"\n                onClick={handleSave}\n                type=\"button\"\n                aria-label=\"Submit Role Profile\"\n                data-tooltip=\"Submit Role Profile\"\n                disabled={saving}\n              >\n                <FiSave />\n              </button>\n            )}\n          </div>\n        </div>\n      </NeonPanel>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/RoleProfileEdit.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":52,"column":21,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":52,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":59,"column":15,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":59,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":59,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":60,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":60,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":60,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":51,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":61,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":73,"column":53,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":73,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":79,"column":57,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":79,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":85,"column":59,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":85,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":47,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":57,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":98,"column":55,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":98,"endColumn":64},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":103,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":103,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3823,3823],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3823,3823],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport toast from \"react-hot-toast\";\nimport ContentHeader from \"@/components/headersandfooters/ContentHeader\";\nimport DocumentSelectorWidget from \"./widgets/DocumentSelectorWidget\";\nimport BehaviourSelectorWidget from \"./widgets/BehaviourSelectorWidget\";\nimport NeonIconButton from \"../../ui/NeonIconButton\";\nimport { FiArrowLeft, FiArrowRight, FiSave } from \"react-icons/fi\";\nimport NeonDualListbox from \"@/components/ui/NeonDualListbox\";\n\nexport default function RoleProfileEdit({\n  roleProfileId,\n  onSubmit,\n  onCancel,\n}: {\n  roleProfileId: string;\n  onSubmit?: (data: {\n    roleProfileId: string;\n    name: string;\n    description: string;\n    selectedModules: string[];\n    selectedDocuments: string[];\n    selectedBehaviours: string[];\n    selectedRoles: string[];\n  }) => void;\n  onCancel?: () => void;\n}) {\n  const [step, setStep] = useState(0);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedModules, setSelectedModules] = useState<string[]>([]);\n  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);\n  const [selectedBehaviours, setSelectedBehaviours] = useState<string[]>([]);\n  const [selectedRoles, setSelectedRoles] = useState<string[]>([]);\n\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const [editNameDesc, setEditNameDesc] = useState<boolean | null>(null);\n  const [editModules, setEditModules] = useState<boolean | null>(null);\n  const [editDocuments, setEditDocuments] = useState<boolean | null>(null);\n  const [editBehaviours, setEditBehaviours] = useState<boolean | null>(null);\n\n  const [modules, setModules] = useState<{ id: string; label: string }[]>([]);\n  const [roles, setRoles] = useState<{ id: string; label: string }[]>([]);\n\n  useEffect(() => {\n    const fetchProfile = async () => {\n      const { data: profile, error } = await supabase\n        .from(\"role_profiles\")\n        .select(\"*\")\n        .eq(\"id\", roleProfileId)\n        .single();\n\n      if (error || !profile) return setError(\"Failed to load profile\");\n      setName(profile.name || \"\");\n      setDescription(profile.description || \"\");\n\n      // Fetch all modules for dual listbox\n      const { data: allModules } = await supabase\n        .from(\"modules\")\n        .select(\"id, name\");\n      setModules((allModules || []).map((m) => ({ id: m.id, label: m.name })));\n\n      // Fetch selected modules\n      const { data: modules } = await supabase\n        .from(\"role_profile_modules\")\n        .select(\"module_id\")\n        .eq(\"role_profile_id\", roleProfileId);\n      setSelectedModules((modules || []).map((m) => m.module_id));\n\n      const { data: documents } = await supabase\n        .from(\"role_profile_documents\")\n        .select(\"document_id\")\n        .eq(\"role_profile_id\", roleProfileId);\n      setSelectedDocuments((documents || []).map((d) => d.document_id));\n\n      const { data: behaviours } = await supabase\n        .from(\"role_profile_behaviours\")\n        .select(\"behaviour_id\")\n        .eq(\"role_profile_id\", roleProfileId);\n      setSelectedBehaviours((behaviours || []).map((b) => b.behaviour_id));\n\n      // Fetch all roles for dual listbox\n      const { data: allRoles } = await supabase\n        .from(\"roles\")\n        .select(\"id, name\");\n      setRoles((allRoles || []).map((r) => ({ id: r.id, label: r.name })));\n\n      // Fetch selected roles\n      const { data: assignments } = await supabase\n        .from(\"role_profile_assignments\")\n        .select(\"role_id\")\n        .eq(\"role_profile_id\", roleProfileId);\n      setSelectedRoles((assignments || []).map((a) => a.role_id));\n\n      setLoading(false);\n    };\n\n    fetchProfile();\n  }, [roleProfileId]);\n\n  const handleSave = async () => {\n    setSaving(true);\n    setError(\"\");\n\n    const { error: profileError } = await supabase\n      .from(\"role_profiles\")\n      .update({ name, description })\n      .eq(\"id\", roleProfileId);\n\n    if (profileError) {\n      setError(\"Failed to update profile\");\n      setSaving(false);\n      return;\n    }\n\n    // Replace all role-profile link tables\n    await supabase\n      .from(\"role_profile_modules\")\n      .delete()\n      .eq(\"role_profile_id\", roleProfileId);\n    if (selectedModules.length > 0) {\n      await supabase\n        .from(\"role_profile_modules\")\n        .insert(\n          selectedModules.map((module_id) => ({\n            role_profile_id: roleProfileId,\n            module_id,\n          })),\n        );\n    }\n\n    await supabase\n      .from(\"role_profile_documents\")\n      .delete()\n      .eq(\"role_profile_id\", roleProfileId);\n    if (selectedDocuments.length > 0) {\n      await supabase\n        .from(\"role_profile_documents\")\n        .insert(\n          selectedDocuments.map((document_id) => ({\n            role_profile_id: roleProfileId,\n            document_id,\n          })),\n        );\n    }\n\n    await supabase\n      .from(\"role_profile_behaviours\")\n      .delete()\n      .eq(\"role_profile_id\", roleProfileId);\n    if (selectedBehaviours.length > 0) {\n      await supabase\n        .from(\"role_profile_behaviours\")\n        .insert(\n          selectedBehaviours.map((behaviour_id) => ({\n            role_profile_id: roleProfileId,\n            behaviour_id,\n          })),\n        );\n    }\n\n    await supabase\n      .from(\"role_profile_assignments\")\n      .delete()\n      .eq(\"role_profile_id\", roleProfileId);\n    if (selectedRoles.length > 0) {\n      await supabase\n        .from(\"role_profile_assignments\")\n        .insert(\n          selectedRoles.map((role_id) => ({\n            role_profile_id: roleProfileId,\n            role_id,\n          })),\n        );\n    }\n\n    setSaving(false);\n    toast.success(\"‚úÖ Role profile updated\");\n    onSubmit?.({\n      roleProfileId,\n      name,\n      description,\n      selectedModules,\n      selectedDocuments,\n      selectedBehaviours,\n      selectedRoles,\n    });\n  };\n\n  if (loading)\n    return <div className=\"text-center py-10 text-white\">Loading...</div>;\n\n  return (\n    <>\n      <ContentHeader title=\"Edit Role Profile\" />\n      <div className=\"role-profile-edit-content\">\n        {step === 0 && (\n          <>\n            {editNameDesc === null ? (\n              <YesNoQuestion\n                question=\"Do you want to edit the name or description?\"\n                onYes={() => setEditNameDesc(true)}\n                onNo={() => setEditNameDesc(false)}\n              />\n            ) : (\n              editNameDesc && (\n                <>\n                  <InputField\n                    label=\"Profile Name\"\n                    value={name}\n                    onChange={setName}\n                  />\n                  <TextareaField\n                    label=\"Description\"\n                    value={description}\n                    onChange={setDescription}\n                  />\n                </>\n              )\n            )}\n          </>\n        )}\n\n        {step === 1 && (\n          <>\n            {editModules === null ? (\n              <YesNoQuestion\n                question=\"Do you want to edit modules?\"\n                onYes={() => setEditModules(true)}\n                onNo={() => setEditModules(false)}\n              />\n            ) : (\n              editModules && (\n                <NeonDualListbox\n                  items={modules}\n                  selected={selectedModules}\n                  onChange={setSelectedModules}\n                  titleLeft=\"Available Modules\"\n                  titleRight=\"Selected Modules\"\n                />\n              )\n            )}\n          </>\n        )}\n\n        {step === 2 && (\n          <>\n            {editDocuments === null ? (\n              <YesNoQuestion\n                question=\"Do you want to edit documents?\"\n                onYes={() => setEditDocuments(true)}\n                onNo={() => setEditDocuments(false)}\n              />\n            ) : (\n              editDocuments && (\n                <DocumentSelectorWidget\n                  selectedDocuments={selectedDocuments}\n                  onChange={setSelectedDocuments}\n                />\n              )\n            )}\n          </>\n        )}\n\n        {step === 3 && (\n          <>\n            {editBehaviours === null ? (\n              <YesNoQuestion\n                question=\"Do you want to edit behaviours?\"\n                onYes={() => setEditBehaviours(true)}\n                onNo={() => setEditBehaviours(false)}\n              />\n            ) : (\n              editBehaviours && (\n                <BehaviourSelectorWidget\n                  selectedBehaviours={selectedBehaviours}\n                  onChange={setSelectedBehaviours}\n                />\n              )\n            )}\n          </>\n        )}\n\n        {step === 4 && (\n          <>\n            <NeonDualListbox\n              items={roles}\n              selected={selectedRoles}\n              onChange={setSelectedRoles}\n              titleLeft=\"Available Roles\"\n              titleRight=\"Assigned Roles\"\n            />\n          </>\n        )}\n\n        {/* Controls */}\n        <div className=\"neon-mt-8 neon-flex justify-between items-center\">\n          <NeonIconButton\n            variant=\"back\"\n            icon={<FiArrowLeft />}\n            title={step === 0 ? \"Cancel\" : \"Back\"}\n            onClick={step === 0 ? onCancel : () => setStep(step - 1)}\n          />\n\n          {step < 4 ? (\n            <NeonIconButton\n              variant=\"next\"\n              icon={<FiArrowRight />}\n              title=\"Next\"\n              onClick={() => setStep(step + 1)}\n            />\n          ) : (\n            <NeonIconButton\n              variant=\"save\"\n              icon={<FiSave />}\n              title=\"Save Changes\"\n              onClick={handleSave}\n              disabled={saving}\n            />\n          )}\n        </div>\n\n        {error && <div className=\"neon-error mt-4\">{error}</div>}\n      </div>\n    </>\n  );\n}\n\n// Utility Components\n\nfunction YesNoQuestion({\n  question,\n  onYes,\n  onNo,\n}: {\n  question: string;\n  onYes: () => void;\n  onNo: () => void;\n}) {\n  return (\n    <div className=\"mb-6\">\n      <p className=\"neon-form-title mb-2\">{question}</p>\n      <div className=\"flex gap-4\">\n        <button className=\"neon-btn neon-btn-edit\" onClick={onYes}>\n          Yes\n        </button>\n        <button className=\"neon-btn neon-btn-view\" onClick={onNo}>\n          No\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction InputField({\n  label,\n  value,\n  onChange,\n}: {\n  label: string;\n  value: string;\n  onChange: (v: string) => void;\n}) {\n  return (\n    <div className=\"mb-6\">\n      <label className=\"neon-form-title\">{label}</label>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"neon-input w-full\"\n      />\n    </div>\n  );\n}\n\nfunction TextareaField({\n  label,\n  value,\n  onChange,\n}: {\n  label: string;\n  value: string;\n  onChange: (v: string) => void;\n}) {\n  return (\n    <div className=\"mb-6\">\n      <label className=\"neon-form-title\">{label}</label>\n      <textarea\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        className=\"neon-input w-full\"\n        rows={3}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/RoleProfileViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/AssignmentSelectorWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":48,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":58,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":66,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":67,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":67,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":72,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":72,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1991,1991],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1991,1991],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/role-profiles/widgets/AssignmentSelectorWidget.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\ntype Assignment = {\n  type: \"user\" | \"role\" | \"department\";\n  id: string;\n  label: string;\n};\ntype UserAssignment = Assignment & { role_id: string; department_id: string };\n\ntype Props = {\n  selectedAssignments: Assignment[];\n  onChange: (assignments: Assignment[]) => void;\n};\n\nexport default function AssignmentSelectorWidget({\n  selectedAssignments,\n  onChange,\n}: Props) {\n  const [users, setUsers] = useState<UserAssignment[]>([]);\n  const [roles, setRoles] = useState<Assignment[]>([]);\n  const [departments, setDepartments] = useState<Assignment[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"\");\n  const [deptFilter, setDeptFilter] = useState(\"\");\n\n  const [showDepts, setShowDepts] = useState(false);\n  const [showRoles, setShowRoles] = useState(false);\n  const [showUsers, setShowUsers] = useState(false);\n\n  useEffect(() => {\n    const loadData = async () => {\n      const [u, r, d] = await Promise.all([\n        supabase\n          .from(\"users\")\n          .select(\"auth_id, first_name, last_name, role_id, department_id\"),\n        supabase.from(\"roles\").select(\"id, title\"),\n        supabase.from(\"departments\").select(\"id, name\"),\n      ]);\n\n      setUsers(\n        u.data?.map((u) => ({\n          type: \"user\",\n          id: u.auth_id,\n          label: `${u.first_name} ${u.last_name}`,\n          role_id: u.role_id,\n          department_id: u.department_id,\n        })) || [],\n      );\n\n      setRoles(\n        r.data?.map((r) => ({\n          type: \"role\",\n          id: r.id,\n          label: r.title,\n        })) || [],\n      );\n\n      setDepartments(\n        d.data?.map((d) => ({\n          type: \"department\",\n          id: d.id,\n          label: d.name,\n        })) || [],\n      );\n    };\n\n    loadData();\n  }, []);\n\n  const isSelected = (a: Assignment) =>\n    selectedAssignments.some((sa) => sa.id === a.id && sa.type === a.type);\n\n  const toggle = (assignment: Assignment) => {\n    if (isSelected(assignment)) {\n      onChange(\n        selectedAssignments.filter(\n          (a) => !(a.id === assignment.id && a.type === assignment.type),\n        ),\n      );\n    } else {\n      onChange([...selectedAssignments, assignment]);\n    }\n  };\n\n  const filteredUsers = users.filter((u) => {\n    const matchesSearch = u.label.toLowerCase().includes(search.toLowerCase());\n    const matchesRole = !roleFilter || u.role_id === roleFilter;\n    const matchesDept = !deptFilter || u.department_id === deptFilter;\n    return matchesSearch && matchesRole && matchesDept;\n  });\n\n  const filteredRoles = roles.filter((r) =>\n    r.label.toLowerCase().includes(search.toLowerCase()),\n  );\n  const filteredDepts = departments.filter((d) =>\n    d.label.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  return (\n    <NeonPanel className=\"neon-panel mt-6\">\n      <h3 className=\"neon-section-title\">Assign To</h3>\n\n      <input\n        type=\"text\"\n        placeholder=\"Search users, roles, departments...\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        className=\"neon-input\"\n      />\n\n      <div className=\"neon-row\">\n        <select\n          value={roleFilter}\n          onChange={(e) => setRoleFilter(e.target.value)}\n          className=\"neon-input\"\n        >\n          <option value=\"\">All Roles</option>\n          {roles.map((r) => (\n            <option key={r.id} value={r.id}>\n              {r.label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={deptFilter}\n          onChange={(e) => setDeptFilter(e.target.value)}\n          className=\"neon-input\"\n        >\n          <option value=\"\">All Departments</option>\n          {departments.map((d) => (\n            <option key={d.id} value={d.id}>\n              {d.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Departments */}\n      <div>\n        <button\n          type=\"button\"\n          className=\"neon-btn neon-section-toggle\"\n          aria-label={showDepts ? \"Hide Departments\" : \"Show Departments\"}\n          onClick={() => setShowDepts((v) => !v)}\n        >\n          {showDepts ? (\n            <span className=\"neon-btn-label\">‚ûñ</span>\n          ) : (\n            <span className=\"neon-btn-label\">‚ûï</span>\n          )}\n        </button>\n        {showDepts && (\n          <div className=\"neon-grid\">\n            {filteredDepts.map((d) => (\n              <label key={d.id} className=\"neon-checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={isSelected(d)}\n                  onChange={() => toggle(d)}\n                  className=\"neon-checkbox\"\n                />\n                {d.label}\n              </label>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Roles */}\n      <div>\n        <button\n          type=\"button\"\n          className=\"neon-btn neon-section-toggle\"\n          aria-label={showRoles ? \"Hide Roles\" : \"Show Roles\"}\n          onClick={() => setShowRoles((v) => !v)}\n        >\n          {showRoles ? (\n            <span className=\"neon-btn-label\">‚ûñ</span>\n          ) : (\n            <span className=\"neon-btn-label\">‚ûï</span>\n          )}\n        </button>\n        {showRoles && (\n          <div className=\"neon-grid\">\n            {filteredRoles.map((r) => (\n              <label key={r.id} className=\"neon-checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={isSelected(r)}\n                  onChange={() => toggle(r)}\n                  className=\"neon-checkbox\"\n                />\n                {r.label}\n              </label>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Users */}\n      <div>\n        <button\n          type=\"button\"\n          className=\"neon-btn neon-section-toggle\"\n          aria-label={showUsers ? \"Hide Users\" : \"Show Users\"}\n          onClick={() => setShowUsers((v) => !v)}\n        >\n          {showUsers ? (\n            <span className=\"neon-btn-label\">‚ûñ</span>\n          ) : (\n            <span className=\"neon-btn-label\">‚ûï</span>\n          )}\n        </button>\n        {showUsers && (\n          <div className=\"neon-grid\">\n            {filteredUsers.map((u) => (\n              <label key={u.id} className=\"neon-checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={isSelected(u)}\n                  onChange={() => toggle(u)}\n                  className=\"neon-checkbox\"\n                />\n                {u.label}\n              </label>\n            ))}\n          </div>\n        )}\n      </div>\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/BehaviourSelectorWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":45,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":45,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1130,1130],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1130,1130],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/role-profiles/widgets/BehaviourSelectorWidget.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n} from \"@radix-ui/react-tooltip\";\nimport * as FiIcons from \"react-icons/fi\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\ninterface Behaviour {\n  id: string;\n  name: string;\n  description: string;\n  icon: keyof typeof FiIcons;\n}\n\ntype Props = {\n  selectedBehaviours: string[];\n  onChange: (ids: string[]) => void;\n};\n\nexport default function BehaviourSelectorWidget({\n  selectedBehaviours,\n  onChange,\n}: Props) {\n  const [behaviours, setBehaviours] = useState<Behaviour[]>([]);\n  const [showBehaviours, setShowBehaviours] = useState(false);\n\n  useEffect(() => {\n    const fetchBehaviours = async () => {\n      const { data, error } = await supabase\n        .from(\"behaviours\")\n        .select(\"id, name, description, icon\");\n      if (error) {\n        console.error(\"Error fetching behaviours:\", error);\n        return;\n      }\n      if (data) setBehaviours(data);\n    };\n    fetchBehaviours();\n  }, []);\n\n  const toggleBehaviour = (id: string) => {\n    if (selectedBehaviours.includes(id)) {\n      onChange(selectedBehaviours.filter((bid) => bid !== id));\n    } else if (selectedBehaviours.length < 5) {\n      onChange([...selectedBehaviours, id]);\n    }\n  };\n\n  return (\n    <NeonPanel className=\"space-y-4\">\n      <button\n        type=\"button\"\n        className=\"neon-btn neon-section-toggle\"\n        data-tooltip={showBehaviours ? \"Hide Behaviours\" : \"Show Behaviours\"}\n        onClick={() => setShowBehaviours((v) => !v)}\n        aria-label={showBehaviours ? \"Hide Behaviours\" : \"Show Behaviours\"}\n      >\n        {showBehaviours ? (\n          <FiIcons.FiMinus className=\"neon-icon\" />\n        ) : (\n          <FiIcons.FiPlus className=\"neon-icon\" />\n        )}\n      </button>\n      {showBehaviours && (\n        <div className=\"neon-grid\">\n          <TooltipProvider>\n            {behaviours.map((b) => {\n              const Icon = FiIcons[b.icon] || FiIcons.FiHelpCircle;\n              const selected = selectedBehaviours.includes(b.id);\n              return (\n                <Tooltip key={b.id}>\n                  <TooltipTrigger asChild>\n                    <button\n                      type=\"button\"\n                      onClick={() => toggleBehaviour(b.id)}\n                      className={`neon-btn neon-behaviour-btn${selected ? \" selected\" : \"\"}`}\n                      data-tooltip={b.name}\n                      aria-label={b.name}\n                    >\n                      <Icon className=\"neon-icon\" />\n                    </button>\n                  </TooltipTrigger>\n                  <TooltipContent side=\"top\">\n                    <p className=\"neon-tooltip\">{b.description}</p>\n                  </TooltipContent>\n                </Tooltip>\n              );\n            })}\n          </TooltipProvider>\n        </div>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/DocumentSelectorWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":41,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":41,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1249,1249],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1249,1249],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/role-profiles/widgets/DocumentSelectorWidget.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport React from \"react\";\n\ntype Document = {\n  id: string;\n  name: string;\n  document_type: string;\n};\n\ntype Props = {\n  selectedDocuments: string[];\n  onChange: (ids: string[]) => void;\n};\n\ntype DocumentType = \"all\" | \"policy\" | \"ssow\" | \"work_instruction\";\n\nexport default function DocumentSelectorWidget({\n  selectedDocuments,\n  onChange,\n}: Props) {\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<DocumentType>(\"all\");\n  const [showDocuments, setShowDocuments] = useState(true);\n  const [selectedAvailable, setSelectedAvailable] = useState<string[]>([]);\n  const [selectedAttached, setSelectedAttached] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchDocuments = async () => {\n      const { data, error } = await supabase\n        .from(\"documents\")\n        .select(\"id, name, document_type\");\n      if (error) console.error(\"Error fetching documents:\", error);\n      else setDocuments(data);\n    };\n    fetchDocuments();\n  }, []);\n\n  // Split documents into available and attached\n  const availableDocs = documents.filter(\n    (doc) => !selectedDocuments.includes(doc.id),\n  );\n  const attachedDocs = documents.filter((doc) =>\n    selectedDocuments.includes(doc.id),\n  );\n\n  // Filter available docs by search and type\n  const filteredAvailable = availableDocs.filter((doc) => {\n    const matchesSearch = doc.name.toLowerCase().includes(search.toLowerCase());\n    const matchesType =\n      typeFilter === \"all\" || doc.document_type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  // Add selected available docs to attached\n  const handleAdd = () => {\n    onChange([...selectedDocuments, ...selectedAvailable]);\n    setSelectedAvailable([]);\n  };\n\n  // Remove selected attached docs\n  const handleRemove = () => {\n    onChange(selectedDocuments.filter((id) => !selectedAttached.includes(id)));\n    setSelectedAttached([]);\n  };\n\n  return (\n    <NeonPanel>\n      <button\n        type=\"button\"\n        className=\"neon-btn neon-section-toggle\"\n        data-tooltip={showDocuments ? \"Hide Documents\" : \"Show Documents\"}\n        onClick={() => setShowDocuments((v) => !v)}\n        aria-label={showDocuments ? \"Hide Documents\" : \"Show Documents\"}\n      >\n        {showDocuments ? (\n          <svg className=\"neon-icon\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 13H5v-2h14v2z\" />\n          </svg>\n        ) : (\n          <svg className=\"neon-icon\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z\" />\n          </svg>\n        )}\n      </button>\n      {showDocuments && (\n        <div className=\"neon-flex-col gap-4\">\n          <div className=\"neon-flex gap-3 mb-2\">\n            <input\n              type=\"text\"\n              placeholder=\"Search documents...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"neon-input\"\n            />\n            <select\n              value={typeFilter}\n              onChange={(e) => setTypeFilter(e.target.value as DocumentType)}\n              className=\"neon-input\"\n            >\n              <option value=\"all\">All Types</option>\n              <option value=\"policy\">Policy</option>\n              <option value=\"ssow\">Safe System of Work</option>\n              <option value=\"work_instruction\">Work Instruction</option>\n            </select>\n          </div>\n          <div className=\"neon-flex gap-6 w-full\">\n            {/* Available Documents */}\n            <div className=\"flex-1\">\n              <div className=\"neon-label mb-1\">Available Documents</div>\n              <select\n                multiple\n                className=\"neon-input h-48 w-full\"\n                value={selectedAvailable}\n                onChange={(e) => {\n                  const options = Array.from(e.target.selectedOptions).map(\n                    (o) => o.value,\n                  );\n                  setSelectedAvailable(options);\n                }}\n              >\n                {filteredAvailable.map((doc) => (\n                  <option key={doc.id} value={doc.id}>\n                    {doc.name} ({doc.document_type})\n                  </option>\n                ))}\n              </select>\n            </div>\n            {/* Add/Remove Buttons */}\n            <div className=\"neon-flex-col justify-center gap-2\">\n              <button\n                type=\"button\"\n                className=\"neon-btn\"\n                onClick={handleAdd}\n                disabled={selectedAvailable.length === 0}\n                aria-label=\"Add selected documents\"\n              >\n                Add &rarr;\n              </button>\n              <button\n                type=\"button\"\n                className=\"neon-btn neon-btn-danger\"\n                onClick={handleRemove}\n                disabled={selectedAttached.length === 0}\n                aria-label=\"Remove selected documents\"\n              >\n                &larr; Remove\n              </button>\n            </div>\n            {/* Attached Documents */}\n            <div className=\"flex-1\">\n              <div className=\"neon-label mb-1\">Attached Documents</div>\n              <select\n                multiple\n                className=\"neon-input h-48 w-full\"\n                value={selectedAttached}\n                onChange={(e) => {\n                  const options = Array.from(e.target.selectedOptions).map(\n                    (o) => o.value,\n                  );\n                  setSelectedAttached(options);\n                }}\n              >\n                {attachedDocs.map((doc) => (\n                  <option key={doc.id} value={doc.id}>\n                    {doc.name} ({doc.document_type})\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/ModuleSelectorWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":52,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":52,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1329,1329],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1329,1329],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/role-profiles/widgets/ModuleSelectorWidget.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport { FiSearch } from \"react-icons/fi\";\n\ntype Module = {\n  id: string;\n  title: string;\n  description?: string;\n  version?: string;\n};\n\ntype Props = {\n  selectedModules: string[];\n  onChange: (ids: string[]) => void;\n};\n\nexport default function ModuleSelectorWidget({\n  selectedModules,\n  onChange,\n}: Props) {\n  const [modules, setModules] = useState<Module[]>([]);\n  const [showModules, setShowModules] = useState(false);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    const fetchModules = async () => {\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"id, name, description, version\");\n      if (error) console.error(\"Error fetching modules:\", error);\n      else\n        setModules(\n          data.map(\n            (m: {\n              id: string;\n              name: string;\n              description?: string;\n              version?: string;\n            }) => ({\n              id: m.id,\n              title: m.name,\n              description: m.description,\n              version: m.version,\n            }),\n          ),\n        );\n    };\n    fetchModules();\n  }, []);\n\n  const filtered = modules.filter(\n    (mod) =>\n      mod.title.toLowerCase().includes(search.toLowerCase()) ||\n      (mod.description &&\n        mod.description.toLowerCase().includes(search.toLowerCase())),\n  );\n\n  const toggleSelection = (id: string) => {\n    if (selectedModules.includes(id)) {\n      onChange(selectedModules.filter((mid) => mid !== id));\n    } else {\n      onChange([...selectedModules, id]);\n    }\n  };\n\n  return (\n    <NeonPanel>\n      <button\n        type=\"button\"\n        className=\"neon-btn neon-section-toggle\"\n        data-tooltip={showModules ? \"Hide Modules\" : \"Show Modules\"}\n        onClick={() => setShowModules((v) => !v)}\n        aria-label={showModules ? \"Hide Modules\" : \"Show Modules\"}\n      >\n        {showModules ? (\n          <svg className=\"neon-icon\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 13H5v-2h14v2z\" />\n          </svg>\n        ) : (\n          <svg className=\"neon-icon\" viewBox=\"0 0 24 24\">\n            <path d=\"M19 13H13V19H11V13H5V11H11V5H13V11H19V13Z\" />\n          </svg>\n        )}\n      </button>\n      {showModules && (\n        <div className=\"neon-flex-col gap-4\">\n          <div className=\"neon-flex gap-2 mb-2\">\n            <FiSearch className=\"neon-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search modules by name or description...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"neon-input\"\n            />\n          </div>\n          <div className=\"neon-grid\">\n            {filtered.map((mod) => (\n              <label\n                key={mod.id}\n                className=\"neon-checkbox-label neon-feature-card\"\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={selectedModules.includes(mod.id)}\n                  onChange={() => toggleSelection(mod.id)}\n                  className=\"neon-checkbox\"\n                />\n                <div>\n                  <div className=\"font-bold neon-feature-card-title\">\n                    {mod.title}\n                  </div>\n                  {mod.description && (\n                    <div className=\"neon-feature-card-text\">\n                      {mod.description}\n                    </div>\n                  )}\n                  {mod.version && (\n                    <div className=\"neon-feature-card-meta\">\n                      Version: {mod.version}\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/RoleAssignmentWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":35,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":35,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[801,801],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[801,801],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonPanel from \"@/components/NeonPanel\";\n\ntype Props = {\n  selectedRoles: string[];\n  onChange: (roles: string[]) => void;\n};\n\ntype Role = {\n  id: string;\n  title: string;\n};\n\nexport default function RoleAssignmentWidget({\n  selectedRoles,\n  onChange,\n}: Props) {\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [showRoles, setShowRoles] = useState(true);\n\n  useEffect(() => {\n    const loadRoles = async () => {\n      const { data, error } = await supabase.from(\"roles\").select(\"id, title\");\n      if (error) {\n        console.error(\"Error loading roles:\", error);\n        return;\n      }\n      setRoles(data || []);\n    };\n\n    loadRoles();\n  }, []);\n\n  const toggleRole = (id: string) => {\n    if (selectedRoles.includes(id)) {\n      onChange(selectedRoles.filter((r) => r !== id));\n    } else {\n      onChange([...selectedRoles, id]);\n    }\n  };\n\n  const filteredRoles = roles.filter((r) =>\n    r.title.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  return (\n    <NeonPanel className=\"mt-6\">\n      <h3 className=\"neon-section-title\">Assign Role Profile to Roles</h3>\n\n      <input\n        type=\"text\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        placeholder=\"Search roles...\"\n        className=\"neon-input mb-4\"\n      />\n\n      <button\n        type=\"button\"\n        className=\"neon-btn neon-section-toggle mb-2\"\n        data-tooltip={showRoles ? \"Hide Roles\" : \"Show Roles\"}\n        onClick={() => setShowRoles((prev) => !prev)}\n      >\n        {showRoles ? (\n          <span className=\"neon-icon\">‚ûñ</span>\n        ) : (\n          <span className=\"neon-icon\">‚ûï</span>\n        )}\n      </button>\n\n      {showRoles && (\n        <div className=\"neon-grid mt-2\">\n          {filteredRoles.map((role) => (\n            <label key={role.id} className=\"neon-checkbox-label\">\n              <input\n                type=\"checkbox\"\n                className=\"neon-checkbox\"\n                checked={selectedRoles.includes(role.id)}\n                onChange={() => toggleRole(role.id)}\n              />\n              {role.title}\n            </label>\n          ))}\n        </div>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/RoleProfileBuilderPage.tsx","messages":[{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'search' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setSearch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":53,"column":15,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":53,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":54,"column":22,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":54,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":75,"column":51,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":75,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":76,"column":55,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":76,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":77,"column":57,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":77,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":80,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role_id on an `any` value.","line":80,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":81,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user_id on an `any` value.","line":81,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role_id on an `any` value.","line":81,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .department_id on an `any` value.","line":81,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":26,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":28},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3473,3473],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3473,3473],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":125,"column":21,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":125,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":137,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":137,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":137,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":187,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":187,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":193,"column":42,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":193,"endColumn":51}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'search' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":16,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSearch' is assigned a value but never used.","line":37,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":18,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { syncRoleProfileAssignments } from \"@/lib/syncRoleProfileAssignments\";\nimport { FiSave, FiArrowLeft, FiUserPlus, FiAlertCircle } from \"react-icons/fi\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport ModuleSelectorWidget from \"@/components/admin/role-profiles/widgets/ModuleSelectorWidget\";\nimport DocumentSelectorWidget from \"@/components/admin/role-profiles/widgets/DocumentSelectorWidget\";\nimport BehaviourSelectorWidget from \"@/components/admin/role-profiles/widgets/BehaviourSelectorWidget\";\nimport AssignmentSelectorWidget from \"@/components/admin/role-profiles/widgets/AssignmentSelectorWidget\";\nimport ContentHeader from \"@/components/headersandfooters/ContentHeader\";\n\nexport default function RoleProfileBuilderPage() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const profileId = searchParams.get(\"id\");\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedModules, setSelectedModules] = useState<string[]>([]);\n  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);\n  const [selectedBehaviours, setSelectedBehaviours] = useState<string[]>([]);\n  const [selectedAssignments, setSelectedAssignments] = useState<\n    {\n      type: \"user\" | \"role\" | \"department\";\n      id: string;\n      label: string;\n    }[]\n  >([]);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [showPostSavePrompt, setShowPostSavePrompt] = useState(false);\n  const [savedProfileId, setSavedProfileId] = useState<string | null>(null);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    if (!profileId) return;\n    const fetchProfile = async () => {\n      const { data: profile, error: profileError } = await supabase\n        .from(\"role_profiles\")\n        .select(\"id, name, description\")\n        .eq(\"id\", profileId)\n        .single();\n\n      if (profileError || !profile) {\n        setError(\"Failed to load role profile.\");\n        return;\n      }\n\n      setName(profile.name);\n      setDescription(profile.description);\n\n      const [modules, documents, behaviours, assignments] = await Promise.all([\n        supabase\n          .from(\"role_profile_modules\")\n          .select(\"module_id\")\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_documents\")\n          .select(\"document_id\")\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_behaviours\")\n          .select(\"behaviour_id\")\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_assignments\")\n          .select(\"*\")\n          .eq(\"role_profile_id\", profileId),\n      ]);\n\n      setSelectedModules(modules.data?.map((m) => m.module_id) || []);\n      setSelectedDocuments(documents.data?.map((d) => d.document_id) || []);\n      setSelectedBehaviours(behaviours.data?.map((b) => b.behaviour_id) || []);\n      setSelectedAssignments(\n        assignments.data?.map((a) => {\n          const type = a.user_id ? \"user\" : a.role_id ? \"role\" : \"department\";\n          const id = a.user_id || a.role_id || a.department_id;\n          return { type, id, label: \"\" };\n        }) || [],\n      );\n    };\n    fetchProfile();\n  }, [profileId]);\n\n  const handleSubmit = async () => {\n    setSaving(true);\n    setError(\"\");\n\n    let id = profileId;\n    if (profileId) {\n      const { error: updateError } = await supabase\n        .from(\"role_profiles\")\n        .update({ name, description })\n        .eq(\"id\", profileId);\n\n      if (updateError) {\n        setError(\"Failed to update role profile.\");\n        setSaving(false);\n        return;\n      }\n\n      await Promise.all([\n        supabase\n          .from(\"role_profile_modules\")\n          .delete()\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_documents\")\n          .delete()\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_behaviours\")\n          .delete()\n          .eq(\"role_profile_id\", profileId),\n        supabase\n          .from(\"role_profile_assignments\")\n          .delete()\n          .eq(\"role_profile_id\", profileId),\n      ]);\n    } else {\n      const { data: profile, error: insertError } = await supabase\n        .from(\"role_profiles\")\n        .insert({ name, description })\n        .select()\n        .single();\n\n      if (insertError || !profile) {\n        setError(\"Failed to save role profile.\");\n        setSaving(false);\n        return;\n      }\n\n      id = profile.id;\n    }\n\n    await supabase\n      .from(\"role_profile_modules\")\n      .insert(\n        selectedModules.map((moduleId) => ({\n          role_profile_id: id,\n          module_id: moduleId,\n        })),\n      );\n\n    await supabase\n      .from(\"role_profile_documents\")\n      .insert(\n        selectedDocuments.map((documentId) => ({\n          role_profile_id: id,\n          document_id: documentId,\n        })),\n      );\n\n    await supabase\n      .from(\"role_profile_behaviours\")\n      .insert(\n        selectedBehaviours.map((behaviourId) => ({\n          role_profile_id: id,\n          behaviour_id: behaviourId,\n        })),\n      );\n\n    await supabase.from(\"role_profile_assignments\").insert(\n      selectedAssignments.map((a) => ({\n        role_profile_id: id,\n        user_id: a.type === \"user\" ? a.id : null,\n        role_id: a.type === \"role\" ? a.id : null,\n        department_id: a.type === \"department\" ? a.id : null,\n      })),\n    );\n\n    // üîÅ Auto-sync training for assigned users, roles, departments\n    const userIds = new Set<string>();\n\n    for (const a of selectedAssignments) {\n      if (a.type === \"user\") {\n        userIds.add(a.id);\n      } else if (a.type === \"role\") {\n        const { data } = await supabase\n          .from(\"users\")\n          .select(\"auth_id\")\n          .eq(\"role_id\", a.id);\n        data?.forEach((u) => userIds.add(u.auth_id));\n      } else if (a.type === \"department\") {\n        const { data } = await supabase\n          .from(\"users\")\n          .select(\"auth_id\")\n          .eq(\"department_id\", a.id);\n        data?.forEach((u) => userIds.add(u.auth_id));\n      }\n    }\n\n    await Promise.all(\n      [...userIds].map((authId) => syncRoleProfileAssignments(authId)),\n    );\n\n    setSavedProfileId(id);\n    setSaving(false);\n    setShowPostSavePrompt(true);\n  };\n\n  return (\n    <>\n      <ContentHeader\n        title={profileId ? \"Edit Role Profile\" : \"Create Role Profile\"}\n      />\n      <NeonPanel className=\"neon-panel-lg\">\n        {error && (\n          <div className=\"neon-message neon-message-error mb-2 flex items-center gap-2\">\n            <FiAlertCircle className=\"inline-block\" /> {error}\n          </div>\n        )}\n        <div className=\"space-y-2\">\n          <label className=\"neon-form-title\">Profile Name</label>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            className=\"neon-input w-full\"\n          />\n        </div>\n        <div className=\"space-y-2\">\n          <label className=\"neon-form-title\">Description</label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            className=\"neon-input w-full\"\n          />\n        </div>\n        <div>\n          <h2 className=\"neon-section-title\">\n            <FiUserPlus /> Add Modules\n          </h2>\n          <ModuleSelectorWidget\n            selectedModules={selectedModules}\n            onChange={setSelectedModules}\n          />\n        </div>\n        <div>\n          <h2 className=\"neon-section-title\">\n            <FiUserPlus /> Add Documents\n          </h2>\n          <DocumentSelectorWidget\n            selectedDocuments={selectedDocuments}\n            onChange={setSelectedDocuments}\n          />\n        </div>\n        <div>\n          <h2 className=\"neon-section-title\">\n            <FiUserPlus /> Add Behaviours\n          </h2>\n          <BehaviourSelectorWidget\n            selectedBehaviours={selectedBehaviours}\n            onChange={setSelectedBehaviours}\n          />\n        </div>\n        <div>\n          <h2 className=\"neon-section-title\">\n            <FiUserPlus /> Assign Profile\n          </h2>\n          <AssignmentSelectorWidget\n            selectedAssignments={selectedAssignments}\n            onChange={setSelectedAssignments}\n          />\n        </div>\n        <div className=\"pt-4 neon-flex gap-4\">\n          <button\n            onClick={handleSubmit}\n            disabled={saving}\n            className=\"neon-btn neon-btn-save neon-btn-icon\"\n            data-tooltip={\n              saving\n                ? \"Saving...\"\n                : profileId\n                  ? \"Update Role Profile\"\n                  : \"Save Role Profile\"\n            }\n          >\n            <FiSave />\n          </button>\n          <button\n            className=\"neon-btn neon-btn-view neon-btn-icon\"\n            data-tooltip=\"Back to Profiles\"\n            onClick={() => router.push(\"/admin/role-profiles\")}\n            type=\"button\"\n          >\n            <FiArrowLeft />\n          </button>\n        </div>\n        {showPostSavePrompt && savedProfileId && (\n          <div className=\"fixed inset-0 neon-modal-overlay flex items-center justify-center z-50\">\n            <div className=\"neon-modal p-6 max-w-sm w-full text-center\">\n              <h2 className=\"neon-modal-title mb-2 flex items-center gap-2\">\n                <FiSave /> Role Profile Saved\n              </h2>\n              <p className=\"mb-4\">Would you like to assign this profile now?</p>\n              <div className=\"neon-flex justify-center gap-4\">\n                <button\n                  className=\"neon-btn neon-btn-edit neon-btn-icon\"\n                  data-tooltip=\"Assign Now\"\n                  onClick={() =>\n                    router.push(\n                      `/admin/role-profiles/assign?id=${savedProfileId}`,\n                    )\n                  }\n                >\n                  <FiUserPlus />\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-view neon-btn-icon\"\n                  data-tooltip=\"Maybe Later\"\n                  onClick={() => router.push(\"/admin/role-profiles\")}\n                >\n                  <FiArrowLeft />\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </NeonPanel>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/admin/role-profiles/widgets/RoleProfileWidgets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/compliance/ComplianceDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":38,"column":21,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<ComplianceRow[]>`.","line":47,"column":15,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":47,"endColumn":25},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":50,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":50,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1768,1768],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1768,1768],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":65,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":65,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2439,2439],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2439,2439],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function 'handleCSVExport' has no 'await' expression.","line":68,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":68,"endColumn":38,"suggestions":[{"messageId":"removeAsync","fix":{"range":[2492,2498],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport Papa from \"papaparse\";\nimport NeonTable from \"@/components/NeonTable\";\nimport ContentHeader from \"@/components/headersandfooters/ContentHeader\";\n\ninterface ComplianceRow {\n  auth_id: string;\n  user_name: string;\n  department: string;\n  role: string;\n  module: string;\n  status: string;\n  completed_at?: string;\n}\n\nexport default function ComplianceDashboard() {\n  const [data, setData] = useState<ComplianceRow[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Filters (expand as needed)\n  const [selectedDept, setSelectedDept] = useState<string>(\"all\");\n  const [selectedRole, setSelectedRole] = useState<string>(\"all\");\n  const [selectedModule, setSelectedModule] = useState<string>(\"all\");\n\n  // Fetch filter options\n  const [deptOptions, setDeptOptions] = useState<string[]>([]);\n  const [roleOptions, setRoleOptions] = useState<string[]>([]);\n  const [moduleOptions, setModuleOptions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      // TODO: Replace with your actual compliance query or API call\n      // Example: fetch all required modules and completion status for all users\n      const { data: rows, error } = await supabase.rpc(\n        \"compliance_dashboard_view\",\n        {\n          department: selectedDept !== \"all\" ? selectedDept : null,\n          role: selectedRole !== \"all\" ? selectedRole : null,\n          module: selectedModule !== \"all\" ? selectedModule : null,\n        },\n      );\n      if (error) setError(error.message);\n      setData(rows || []);\n      setLoading(false);\n    };\n    fetchData();\n  }, [selectedDept, selectedRole, selectedModule]);\n\n  useEffect(() => {\n    // Fetch filter options on mount\n    const fetchOptions = async () => {\n      const { data: depts } = await supabase.from(\"departments\").select(\"name\");\n      setDeptOptions(depts ? depts.map((d: { name: string }) => d.name) : []);\n      const { data: roles } = await supabase.from(\"roles\").select(\"title\");\n      setRoleOptions(roles ? roles.map((r: { title: string }) => r.title) : []);\n      const { data: modules } = await supabase.from(\"modules\").select(\"name\");\n      setModuleOptions(\n        modules ? modules.map((m: { name: string }) => m.name) : [],\n      );\n    };\n    fetchOptions();\n  }, []);\n\n  const handleCSVExport = async () => {\n    // TODO: Implement CSV export logic\n    // Example: Convert current data view to CSV and trigger download\n    const csv = Papa.unparse(data);\n    const blob = new Blob([csv], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"compliance_data.csv\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <>\n      <ContentHeader title=\"Compliance Dashboard\" />\n      <div className=\"neon-panel\">\n        <h2 className=\"neon-form-title\">Compliance Dashboard</h2>\n        {/* Filters */}\n        <div className=\"neon-form-actions\" style={{ flexWrap: \"wrap\" }}>\n          <div>\n            <label>Department</label>\n            <select\n              value={selectedDept}\n              onChange={(e) => setSelectedDept(e.target.value)}\n              className=\"neon-input\"\n            >\n              <option value=\"all\">All</option>\n              {deptOptions.map((opt) => (\n                <option key={opt} value={opt}>\n                  {opt}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label>Role</label>\n            <select\n              value={selectedRole}\n              onChange={(e) => setSelectedRole(e.target.value)}\n              className=\"neon-input\"\n            >\n              <option value=\"all\">All</option>\n              {roleOptions.map((opt) => (\n                <option key={opt} value={opt}>\n                  {opt}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label>Module</label>\n            <select\n              value={selectedModule}\n              onChange={(e) => setSelectedModule(e.target.value)}\n              className=\"neon-input\"\n            >\n              <option value=\"all\">All</option>\n              {moduleOptions.map((opt) => (\n                <option key={opt} value={opt}>\n                  {opt}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        <div className=\"neon-form-actions neon-flex-wrap\">\n          <button type=\"button\" onClick={handleCSVExport} className=\"neon-btn\">\n            Export CSV\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              const template = [\n                {\n                  auth_id: \"\",\n                  first_name: \"\",\n                  last_name: \"\",\n                  department_id: \"\",\n                  email: \"\",\n                  nationality: \"\",\n                  access_level: \"\",\n                  shift: \"\",\n                  phone: \"\",\n                  department_name: \"\",\n                  role_title: \"\",\n                  start_date: \"\",\n                },\n              ];\n              const csv = Papa.unparse(template);\n              const blob = new Blob([csv], { type: \"text/csv\" });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement(\"a\");\n              a.href = url;\n              a.download = \"user_template.csv\";\n              document.body.appendChild(a);\n              a.click();\n              document.body.removeChild(a);\n              URL.revokeObjectURL(url);\n            }}\n            className=\"neon-btn neon-btn-orange\"\n          >\n            Download CSV Template\n          </button>\n        </div>\n        {loading ? (\n          <p>Loading...</p>\n        ) : error ? (\n          <p className=\"neon-error\">{error}</p>\n        ) : data.length === 0 ? (\n          <p>No compliance data found.</p>\n        ) : (\n          <NeonTable\n            columns={[\n              { header: \"User\", accessor: \"auth_id\" },\n              { header: \"Department\", accessor: \"department\" },\n              { header: \"Role\", accessor: \"role\" },\n              { header: \"Module\", accessor: \"module\" },\n              { header: \"Status\", accessor: \"status\" },\n              { header: \"Completed At\", accessor: \"completed_at\" },\n            ]}\n            data={data.map((row) => ({\n              auth_id: row.auth_id,\n              department: row.department,\n              role: row.role,\n              module: row.module,\n              status: row.status,\n              completed_at: row.completed_at\n                ? new Date(row.completed_at).toLocaleDateString(\"en-GB\")\n                : \"‚Äî\",\n            }))}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/headersandfooters/ContentHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/manager/DepartmentIssueAssignmentsWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":80,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":80,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2037,2037],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2037,2037],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":83,"column":34,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":83,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/lib/useUser\";\nimport { FiUserPlus } from \"react-icons/fi\"; // Add Fi icon import\nimport NeonTable from \"@/components/NeonTable\";\n\ninterface Assignment {\n  id: string;\n  title: string;\n  assigned_to: string;\n  assigned_at: string;\n  users?: {\n    auth_id: string;\n    first_name: string;\n    last_name: string;\n  };\n}\n\ninterface RawAssignment {\n  id: string;\n  title: string;\n  assigned_to: string;\n  assigned_at: string;\n  users:\n    | { auth_id: string; first_name: string; last_name: string }[]\n    | { auth_id: string; first_name: string; last_name: string };\n}\n\nexport default function DepartmentIssueAssignmentsWidget() {\n  const { user } = useUser();\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n\n    const fetchAssignments = async () => {\n      setLoading(true);\n      setError(null);\n\n      const { data, error } = await supabase\n        .from(\"issues\")\n        .select(\n          `\n          id,\n          title,\n          assigned_to,\n          assigned_at,\n          users:assigned_to (\n            auth_id,\n            first_name,\n            last_name\n          )\n        `,\n        )\n        .eq(\"department_id\", user.department_id)\n        .not(\"assigned_to\", \"is\", null)\n        .order(\"assigned_at\", { ascending: false });\n\n      if (error) {\n        console.error(\"Error loading assignments:\", error);\n        setError(\"Failed to load assignments.\");\n      } else {\n        const mapped = (data || []).map((a: RawAssignment) => ({\n          id: a.id,\n          title: a.title,\n          assigned_to: a.assigned_to,\n          assigned_at: a.assigned_at,\n          users: Array.isArray(a.users) ? a.users[0] : a.users,\n        }));\n        setAssignments(mapped);\n      }\n\n      setLoading(false);\n    };\n\n    fetchAssignments();\n\n    // Add a refresh interval\n    const interval = setInterval(fetchAssignments, 15000); // 15 seconds\n    return () => clearInterval(interval);\n  }, [user]);\n\n  // Removed unused handleAssignUser function\n\n  if (!user) return null;\n\n  return (\n    <>\n      <h2 className=\"neon-section-title mb-4 flex items-center gap-2\">\n        <FiUserPlus /> Issue Assignments\n      </h2>\n\n      {loading ? (\n        <p className=\"neon-info\">Loading...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : assignments.length === 0 ? (\n        <p className=\"neon-info\">\n          No assigned issues found for your department.\n        </p>\n      ) : (\n        <NeonTable\n          columns={[\n            { header: \"Issue\", accessor: \"issue\" },\n            { header: \"Assigned To\", accessor: \"assigned_to\" },\n            { header: \"Assigned At\", accessor: \"assigned_at\" },\n          ]}\n          data={assignments.map((a) => ({\n            issue: a.title,\n            assigned_to: a.users\n              ? `${a.users.first_name ?? \"\"} ${a.users.last_name ?? \"\"}`.trim() ||\n                a.assigned_to\n              : a.assigned_to,\n            assigned_at: a.assigned_at\n              ? new Date(a.assigned_at).toLocaleDateString(\"en-GB\")\n              : \"\",\n          }))}\n        />\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/manager/DepartmentIssuesWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":19,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2674,2674],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2674,2674],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":101,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":101,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3075,3075],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3075,3075],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":120,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":120,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3647,3647],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3647,3647],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/lib/useUser\";\nimport { Dialog } from \"@headlessui/react\";\nimport { FiAlertCircle, FiEdit, FiEye, FiX, FiCheck } from \"react-icons/fi\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonIconButton from \"../ui/NeonIconButton\";\n\ninterface Issue {\n  id: string;\n  title: string;\n  status: string;\n  priority: string;\n  created_at: string;\n  department?: { id: string; name: string };\n  assigned_to?: string;\n}\ninterface Department {\n  id: string;\n  name: string;\n}\ninterface User {\n  id: string;\n  first_name: string;\n  last_name: string;\n}\ninterface AssignIssueState {\n  mode: \"assign\" | \"reassign\";\n  issue: Issue;\n}\n\nexport default function DepartmentIssuesWidget() {\n  const { user } = useUser();\n  const [issues, setIssues] = useState<Issue[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [viewIssue, setViewIssue] = useState<Issue | null>(null);\n  const [assignIssue, setAssignIssue] = useState<AssignIssueState | null>(null);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [assignLoading, setAssignLoading] = useState(false);\n  const [assignError, setAssignError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n    const fetchIssues = async () => {\n      setLoading(true);\n      setError(null);\n      // Fetch issues for the user's department(s)\n      const { data, error } = await supabase\n        .from(\"issues\")\n        .select(\n          \"id, title, status, priority, created_at, department:departments(id, name), assigned_to\",\n        )\n        .eq(\"department_id\", user.department_id)\n        .order(\"created_at\", { ascending: false });\n      if (error) setError(\"Failed to load issues.\");\n      setIssues(\n        (data || []).map(\n          (i: {\n            id: string;\n            title: string;\n            status: string;\n            priority: string;\n            created_at: string;\n            department:\n              | { id: string; name: string }[]\n              | { id: string; name: string };\n            assigned_to?: string;\n          }) => ({\n            id: i.id,\n            title: i.title,\n            status: i.status,\n            priority: i.priority,\n            created_at: i.created_at,\n            department: Array.isArray(i.department)\n              ? i.department[0]\n              : i.department,\n            assigned_to: i.assigned_to,\n          }),\n        ),\n      );\n      setLoading(false);\n    };\n    fetchIssues();\n\n    // Fetch departments for assign/reassign\n    const fetchDepartments = async () => {\n      const { data, error } = await supabase\n        .from(\"departments\")\n        .select(\"id, name\");\n      if (!error)\n        setDepartments(\n          (data || []).map((d: { id: string; name: string }) => ({\n            id: d.id,\n            name: d.name,\n          })),\n        );\n    };\n    fetchDepartments();\n\n    // Fetch users in the same department for assignment\n    const fetchUsers = async () => {\n      const { data, error } = await supabase\n        .from(\"users\")\n        .select(\"id, first_name, last_name\")\n        .eq(\"department_id\", user.department_id);\n      if (!error)\n        setUsers(\n          (data || []).map(\n            (u: { id: string; first_name: string; last_name: string }) => ({\n              id: u.id,\n              first_name: u.first_name,\n              last_name: u.last_name,\n            }),\n          ),\n        );\n    };\n    fetchUsers();\n  }, [user]);\n\n  // Handler for assigning/reassigning\n  const handleAssign = async (issueId: string, departmentId: string) => {\n    setAssignLoading(true);\n    setAssignError(null);\n    const { error } = await supabase\n      .from(\"issues\")\n      .update({ department_id: departmentId })\n      .eq(\"id\", issueId);\n    if (error) setAssignError(\"Failed to update department.\");\n    else {\n      setIssues((issues) => issues.filter((i) => i.id !== issueId)); // Remove reassigned issue from list\n      setAssignIssue(null);\n    }\n    setAssignLoading(false);\n  };\n\n  // Handler for assigning to user in same department\n  const handleAssignUser = async (issueId: string, userId: string) => {\n    setAssignLoading(true);\n    setAssignError(null);\n    const { error } = await supabase\n      .from(\"issues\")\n      .update({ assigned_to: userId })\n      .eq(\"id\", issueId);\n    if (error) setAssignError(\"Failed to assign user.\");\n    else {\n      setIssues((issues) =>\n        issues.map((i) =>\n          i.id === issueId ? { ...i, assigned_to: userId } : i,\n        ),\n      );\n      setAssignIssue(null);\n    }\n    setAssignLoading(false);\n  };\n\n  if (!user) return null;\n\n  return (\n    <>\n      <h2 className=\"neon-section-title mb-4 flex items-center gap-2\">\n        <FiAlertCircle /> Department Issues\n      </h2>\n      {loading ? (\n        <p className=\"neon-info\">Loading...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : issues.length === 0 ? (\n        <p className=\"neon-info\">No issues found for your department.</p>\n      ) : (\n        <NeonTable\n          columns={[\n            { header: \"Title\", accessor: \"title\" },\n            { header: \"Priority\", accessor: \"priority\" },\n            { header: \"Status\", accessor: \"status\" },\n            { header: \"Created\", accessor: \"created\" },\n            { header: \"Department\", accessor: \"department\" },\n            { header: \"Actions\", accessor: \"actions\" },\n          ]}\n          data={issues.map((issue) => ({\n            title: issue.title,\n            priority: issue.priority,\n            status: issue.status,\n            created: issue.created_at\n              ? new Date(issue.created_at).toLocaleDateString(\"en-GB\")\n              : \"‚Äî\",\n            department: issue.department?.name || \"‚Äî\",\n            actions: (\n              <div className=\"flex gap-2\">\n                <NeonIconButton\n                  as=\"button\"\n                  variant=\"view\"\n                  icon={<FiEye />}\n                  title=\"View Issue\"\n                  onClick={() => setViewIssue(issue)}\n                />\n                <NeonIconButton\n                  as=\"button\"\n                  variant=\"edit\"\n                  icon={<FiEdit />}\n                  title=\"Edit Issue\"\n                  onClick={() => {\n                    /* TODO: implement edit logic or navigation */\n                  }}\n                />\n                <NeonIconButton\n                  as=\"button\"\n                  variant=\"archive\"\n                  icon={<FiCheck />}\n                  title=\"Mark as Resolved\"\n                  onClick={() => {\n                    /* TODO: implement resolve logic */\n                  }}\n                />\n              </div>\n            ),\n          }))}\n        />\n      )}\n      {/* View Issue Modal */}\n      {viewIssue && (\n        <Dialog\n          open={!!viewIssue}\n          onClose={() => setViewIssue(null)}\n          className=\"neon-modal-overlay\"\n        >\n          <div className=\"neon-modal-bg\" aria-hidden=\"true\" />\n          <div className=\"neon-modal p-6 max-w-md w-full\">\n            <h3 className=\"neon-modal-title mb-2\">Issue Details</h3>\n            <p>\n              <b>Title:</b> {viewIssue.title}\n            </p>\n            <p>\n              <b>Priority:</b> {viewIssue.priority}\n            </p>\n            <p>\n              <b>Status:</b> {viewIssue.status}\n            </p>\n            <p>\n              <b>Created:</b>{\" \"}\n              {viewIssue.created_at\n                ? new Date(viewIssue.created_at).toLocaleDateString(\"en-GB\")\n                : \"\"}\n            </p>\n            <p>\n              <b>Department:</b> {viewIssue.department?.name || \"\"}\n            </p>\n            <div className=\"flex justify-end gap-2\">\n              <NeonIconButton\n                variant=\"view\"\n                icon={<FiX />}\n                title=\"Close\"\n                onClick={() => setViewIssue(null)}\n              />\n            </div>\n          </div>\n        </Dialog>\n      )}\n      {/* Assign/Reassign Modal */}\n      {assignIssue && (\n        <Dialog\n          open={!!assignIssue}\n          onClose={() => setAssignIssue(null)}\n          className=\"neon-modal-overlay\"\n        >\n          <div className=\"neon-modal-bg\" aria-hidden=\"true\" />\n          <div className=\"neon-modal p-6 max-w-md w-full\">\n            <h3 className=\"neon-modal-title mb-2 flex items-center gap-2\">\n              <FiAlertCircle />\n              {assignIssue.mode === \"assign\"\n                ? \"Assign User\"\n                : \"Reassign Department\"}\n            </h3>\n            {assignIssue.mode === \"assign\" ? (\n              <>\n                <select\n                  className=\"neon-input mb-4\"\n                  value={assignIssue.issue.assigned_to || \"\"}\n                  onChange={(e) =>\n                    setAssignIssue((prev) =>\n                      prev\n                        ? {\n                            ...prev,\n                            issue: {\n                              ...prev.issue,\n                              assigned_to: e.target.value,\n                            },\n                          }\n                        : null,\n                    )\n                  }\n                >\n                  <option value=\"\">Select User</option>\n                  {users.map((u) => (\n                    <option key={u.id} value={u.id}>\n                      {u.first_name} {u.last_name}\n                    </option>\n                  ))}\n                </select>\n              </>\n            ) : (\n              <select\n                className=\"neon-input mb-4\"\n                value={assignIssue.issue.department?.id || \"\"}\n                onChange={(e) =>\n                  setAssignIssue((prev) =>\n                    prev\n                      ? {\n                          ...prev,\n                          issue: {\n                            ...prev.issue,\n                            department: departments.find(\n                              (d) => d.id === e.target.value,\n                            ),\n                          },\n                        }\n                      : null,\n                  )\n                }\n              >\n                <option value=\"\">Select Department</option>\n                {departments\n                  .filter((d) => d.id !== user.department_id)\n                  .map((d) => (\n                    <option key={d.id} value={d.id}>\n                      {d.name}\n                    </option>\n                  ))}\n              </select>\n            )}\n            {assignError && (\n              <p className=\"neon-error text-sm mb-2\">{assignError}</p>\n            )}\n            <div className=\"neon-flex gap-2 justify-end\">\n              <NeonIconButton\n                variant=\"cancel\"\n                icon={<FiX />}\n                title=\"Cancel\"\n                onClick={() => setAssignIssue(null)}\n                disabled={assignLoading}\n              />\n              <NeonIconButton\n                variant=\"save\"\n                icon={<FiCheck />}\n                title=\"Save\"\n                disabled={\n                  assignLoading ||\n                  (assignIssue.mode === \"assign\"\n                    ? !assignIssue.issue.assigned_to\n                    : !assignIssue.issue.department?.id)\n                }\n                onClick={() =>\n                  assignIssue.mode === \"assign\"\n                    ? handleAssignUser(\n                        assignIssue.issue.id,\n                        assignIssue.issue.assigned_to || \"\",\n                      )\n                    : handleAssign(\n                        assignIssue.issue.id,\n                        assignIssue.issue.department?.id || \"\",\n                      )\n                }\n              >\n                {assignLoading ? \"Saving...\" : \"Save\"}\n              </NeonIconButton>\n            </div>\n          </div>\n        </Dialog>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/manager/ManagerAccessGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/AddModuleTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/ArchiveModuleTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":76,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":76,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":77,"column":38,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":77,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":77,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .module on an `any` value.","line":78,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":31}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport { FiArchive } from \"react-icons/fi\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport interface Module {\n  id: string;\n  name: string;\n  is_archived?: boolean;\n}\n\n/** Minimal portal used only here; no global CSS changes required */\nfunction BodyPortal({ children }: { children: React.ReactNode }) {\n  const elRef = useRef<HTMLElement | null>(null);\n  if (!elRef.current) {\n    elRef.current = document.createElement(\"div\");\n    elRef.current.setAttribute(\"data-portal\", \"archive-module-dialog\");\n  }\n  useEffect(() => {\n    const el = elRef.current!;\n    document.body.appendChild(el);\n    return () => {\n      document.body.removeChild(el);\n    };\n  }, []);\n  return createPortal(children, elRef.current);\n}\n\nexport default function ArchiveModuleTab({\n  module,\n  onArchive,\n  useServerRoute = false,\n}: {\n  module: Module | null;\n  onArchive?: (archived: Module) => void;\n  useServerRoute?: boolean;\n}) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const openDialog = () => {\n    setError(null);\n    setDialogOpen(true);\n  };\n  const closeDialog = useCallback(() => {\n    if (loading) return;\n    setDialogOpen(false);\n  }, [loading]);\n\n  // optional: Esc to close (matches your working panel behavior)\n  useEffect(() => {\n    if (!dialogOpen) return;\n    const onKey = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") closeDialog();\n    };\n    document.addEventListener(\"keydown\", onKey, true);\n    return () => document.removeEventListener(\"keydown\", onKey, true);\n  }, [dialogOpen, closeDialog, loading]);\n\n  const handleArchive = async () => {\n    if (!module) return;\n    setLoading(true);\n    setError(null);\n\n    try {\n      let archived: Module | null = null;\n\n      if (useServerRoute) {\n        const res = await fetch(`/api/modules/${module.id}/archive`, {\n          method: \"POST\",\n        });\n        const json = await res.json();\n        if (!res.ok) throw new Error(json.error || \"Failed to archive module\");\n        archived = json.module as Module;\n      } else {\n        const { data, error } = await supabase\n          .from(\"modules\")\n          .update({ is_archived: true, updated_at: new Date().toISOString() })\n          .eq(\"id\", module.id)\n          .select(\"id,name,is_archived\")\n          .single();\n        if (error) throw error;\n        archived = data as Module;\n      }\n\n      onArchive?.(archived);\n      setDialogOpen(false);\n    } catch (e: unknown) {\n      setError(\n        `Failed to archive module: ${e instanceof Error ? e.message : \"Unknown error\"}`,\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <NeonPanel className=\"p-6\">\n        {!module || module.is_archived ? (\n          <div>No module selected.</div>\n        ) : (\n          <>\n            <h2 className=\"text-xl font-bold mb-3\">Archive Module</h2>\n            <p className=\"mb-4\">\n              Selected: <span className=\"font-semibold\">{module.name}</span>\n            </p>\n            <button\n              className=\"btn-archive neon-outline\"\n              data-tooltip=\"Archive Module\"\n              onClick={openDialog}\n            >\n              <FiArchive /> Archive\n            </button>\n          </>\n        )}\n      </NeonPanel>\n\n      {dialogOpen && (\n        <BodyPortal>\n          {/* overlay centers its child (content) using your existing CSS */}\n          <div\n            className=\"ui-dialog-overlay\"\n            style={{ zIndex: 60000 }} // higher than anything local; safe override\n            onClick={(e) => {\n              if (e.target === e.currentTarget) closeDialog();\n            }}\n          >\n            <div\n              className=\"ui-dialog-content neon-dialog\"\n              role=\"dialog\"\n              aria-modal=\"true\"\n              aria-labelledby=\"archive-title\"\n              style={{ zIndex: 60001 }}\n            >\n              <div\n                className=\"neon-form-title\"\n                id=\"archive-title\"\n                style={{ marginBottom: \"1.25rem\" }}\n              >\n                Archive Module\n              </div>\n\n              {module && (\n                <>\n                  <p className=\"mb-2\">\n                    Are you sure you want to archive{\" \"}\n                    <span className=\"font-semibold\">{module.name}</span>?\n                  </p>\n                  <div className=\"mb-4 text-sm opacity-80\">\n                    Archiving marks this module as inactive and hides it from\n                    active lists. It does not delete data.\n                  </div>\n\n                  {error && <div className=\"neon-error mb-3\">{error}</div>}\n\n                  <div\n                    className=\"neon-panel-actions\"\n                    style={{\n                      display: \"flex\",\n                      gap: \"1rem\",\n                      justifyContent: \"flex-end\",\n                      marginTop: \"1.25rem\",\n                    }}\n                  >\n                    <button\n                      className=\"btn-archive\"\n                      onClick={handleArchive}\n                      disabled={loading}\n                      autoFocus\n                    >\n                      <FiArchive /> {loading ? \"Archiving‚Ä¶\" : \"Confirm\"}\n                    </button>\n                    <button\n                      className=\"neon-btn neon-btn-danger\"\n                      onClick={closeDialog}\n                      disabled={loading}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </BodyPortal>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/AssignModuleTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":57,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":108,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1450,1450],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1450,1450],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport {\n  FiSend,\n  FiChevronLeft,\n  FiChevronRight,\n  FiCheckSquare,\n  FiSquare,\n} from \"react-icons/fi\";\n\ntype UUID = string;\n\ninterface Module {\n  id: UUID;\n  name: string;\n}\ninterface Department {\n  id: UUID | null;\n  name: string;\n}\ninterface UserRow {\n  id: UUID | null; // app user id (pk)\n  first_name?: string | null;\n  last_name?: string | null;\n  department_id: UUID | null;\n  auth_id: UUID | null;\n}\ninterface User {\n  id: UUID | null;\n  name: string;\n  department_id: UUID | null;\n  auth_id: UUID | null;\n}\n\ntype Step = 1 | 2 | 3;\n\nexport default function AssignModuleWizard() {\n  const [step, setStep] = useState<Step>(1);\n\n  const [modules, setModules] = useState<Module[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const [selectedModule, setSelectedModule] = useState<UUID>(\"\");\n  const [selectedDeptIds, setSelectedDeptIds] = useState<UUID[]>([]);\n  const [selectedUserAuthIds, setSelectedUserAuthIds] = useState<UUID[]>([]);\n\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [assigning, setAssigning] = useState(false);\n  const [feedback, setFeedback] = useState<string>(\"\");\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      setFeedback(\"\");\n      const [\n        { data: m, error: mErr },\n        { data: d, error: dErr },\n        { data: u, error: uErr },\n      ] = await Promise.all([\n        supabase\n          .from(\"modules\")\n          .select(\"id, name\")\n          .order(\"name\", { ascending: true }),\n        supabase\n          .from(\"departments\")\n          .select(\"id, name\")\n          .order(\"name\", { ascending: true }),\n        supabase\n          .from(\"users\")\n          .select(\"id, first_name, last_name, department_id, auth_id\")\n          .order(\"last_name\", { ascending: true }),\n      ]);\n\n      if (mErr || dErr || uErr) {\n        setFeedback(\n          [\n            mErr ? `Modules error: ${mErr.message}` : \"\",\n            dErr ? `Departments error: ${dErr.message}` : \"\",\n            uErr ? `Users error: ${uErr.message}` : \"\",\n          ]\n            .filter(Boolean)\n            .join(\"\\n\"),\n        );\n      }\n\n      setModules((m ?? []) as Module[]);\n      setDepartments((d ?? []) as Department[]);\n\n      // Cook users, skipping any rows that lack an auth_id (can‚Äôt assign without it)\n      const cooked: User[] = (u ?? [])\n        .map((row: UserRow) => ({\n          id: row.id ?? null,\n          name:\n            `${row.first_name ?? \"\"} ${row.last_name ?? \"\"}`.trim() ||\n            \"(no name)\",\n          department_id: row.department_id ?? null,\n          auth_id: row.auth_id ?? null,\n        }))\n        .filter((u) => !!u.auth_id); // keep only users with a valid auth_id\n\n      setUsers(cooked);\n      setLoading(false);\n    })();\n  }, []);\n\n  // Step 3: users drawn from selected departments (with search)\n  const filteredUsers: User[] = useMemo(() => {\n    const pool = selectedDeptIds.length\n      ? users.filter(\n          (u) => !!u.department_id && selectedDeptIds.includes(u.department_id),\n        )\n      : [];\n    const q = userSearch.trim().toLowerCase();\n    return q ? pool.filter((u) => u.name.toLowerCase().includes(q)) : pool;\n  }, [users, selectedDeptIds, userSearch]);\n\n  const deptUserCount = useMemo(() => {\n    if (!selectedDeptIds.length) return 0;\n    return users.filter(\n      (u) => u.department_id && selectedDeptIds.includes(u.department_id),\n    ).length;\n  }, [users, selectedDeptIds]);\n\n  const canGoNextFrom1 = !!selectedModule;\n  const canGoNextFrom2 = selectedDeptIds.length > 0;\n  const canAssign = selectedUserAuthIds.length > 0 && !!selectedModule;\n\n  // Toggle helpers\n  const toggleDept = (deptId: UUID | null) => {\n    if (!deptId) return; // ignore departments without IDs\n    setSelectedUserAuthIds([]); // reset selections when department changes\n    setSelectedDeptIds((prev) =>\n      prev.includes(deptId)\n        ? prev.filter((id) => id !== deptId)\n        : [...prev, deptId],\n    );\n  };\n\n  const allVisibleAuthIds = useMemo(\n    () => filteredUsers.map((u) => u.auth_id!).filter(Boolean),\n    [filteredUsers],\n  );\n\n  const allChecked = useMemo(\n    () =>\n      allVisibleAuthIds.length > 0 &&\n      allVisibleAuthIds.every((id) => selectedUserAuthIds.includes(id)),\n    [allVisibleAuthIds, selectedUserAuthIds],\n  );\n\n  const toggleSelectAllVisible = () => {\n    if (allChecked) {\n      setSelectedUserAuthIds((prev) =>\n        prev.filter((id) => !allVisibleAuthIds.includes(id)),\n      );\n    } else {\n      setSelectedUserAuthIds((prev) =>\n        Array.from(new Set([...prev, ...allVisibleAuthIds])),\n      );\n    }\n  };\n\n  const toggleUser = (authId: UUID | null) => {\n    if (!authId) return;\n    setSelectedUserAuthIds((prev) =>\n      prev.includes(authId)\n        ? prev.filter((id) => id !== authId)\n        : [...prev, authId],\n    );\n  };\n\n  // Assign action\n  const handleAssign = async () => {\n    setFeedback(\"\");\n    if (!canAssign) {\n      setFeedback(\"Select at least one user.\");\n      return;\n    }\n    setAssigning(true);\n    try {\n      const uniqueAuthIds = Array.from(\n        new Set(selectedUserAuthIds.filter(Boolean)),\n      );\n      const rows = uniqueAuthIds.map((auth_id) => ({\n        auth_id,\n        item_id: selectedModule,\n        item_type: \"module\" as const,\n      }));\n\n      const { error } = await supabase\n        .from(\"user_assignments\")\n        .upsert(rows, { onConflict: \"auth_id,item_id,item_type\" });\n\n      if (error) {\n        setFeedback(`Assignment failed: ${error.message}\nIf this persists, check Row Level Security policies on \"user_assignments\".`);\n        return;\n      }\n\n      setFeedback(\n        `Assigned \"${modules.find((m) => m.id === selectedModule)?.name ?? \"Module\"}\" to ${rows.length} user(s).`,\n      );\n      // Reset selections\n      setSelectedDeptIds([]);\n      setSelectedUserAuthIds([]);\n      setStep(1);\n    } catch (e: unknown) {\n      const errMsg = e instanceof Error ? e.message : String(e);\n      setFeedback(`Unexpected error: ${errMsg}`);\n    } finally {\n      setAssigning(false);\n    }\n  };\n\n  if (loading)\n    return (\n      <div className=\"neon-loading\" style={{ padding: \"1rem\" }}>\n        Loading‚Ä¶\n      </div>\n    );\n\n  return (\n    <div className=\"neon-panel-module\" style={{ display: \"grid\", gap: \"1rem\" }}>\n      <h3\n        className=\"neon-section-title\"\n        style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}\n      >\n        <NeonIconButton\n          variant=\"edit\"\n          icon={<FiSend />}\n          title=\"Assign Training Module\"\n        />\n        Bulk Assignment Wizard\n      </h3>\n\n      {/* Steps indicator */}\n      <div\n        style={{ display: \"flex\", gap: 8, alignItems: \"center\", fontSize: 14 }}\n      >\n        <StepDot active={step === 1} label=\"1) Module\" />\n        <div>‚Äî</div>\n        <StepDot active={step === 2} label=\"2) Departments\" />\n        <div>‚Äî</div>\n        <StepDot active={step === 3} label=\"3) Users\" />\n      </div>\n\n      {/* Step 1 */}\n      {step === 1 && (\n        <div style={{ display: \"grid\", gap: 8 }}>\n          <label className=\"neon-label\">Select Module</label>\n          <select\n            className=\"neon-input\"\n            value={selectedModule}\n            onChange={(e) => setSelectedModule(e.target.value)}\n          >\n            <option value=\"\">-- Choose Module --</option>\n            {modules.map((m) => (\n              <option key={m.id} value={m.id}>\n                {m.name}\n              </option>\n            ))}\n          </select>\n\n          <div\n            style={{\n              display: \"flex\",\n              gap: 8,\n              justifyContent: \"flex-end\",\n              marginTop: 8,\n            }}\n          >\n            <button\n              className=\"neon-btn\"\n              disabled={!canGoNextFrom1}\n              onClick={() => setStep(2)}\n              title=\"Next: choose departments\"\n              style={{ display: \"inline-flex\", alignItems: \"center\", gap: 6 }}\n            >\n              Next <FiChevronRight />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Step 2 */}\n      {step === 2 && (\n        <div style={{ display: \"grid\", gap: 8 }}>\n          <label className=\"neon-label\">Select Department(s)</label>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"repeat(auto-fill, minmax(220px, 1fr))\",\n              gap: 8,\n              border: \"1px solid var(--border, #2b2b2b)\",\n              padding: 8,\n              borderRadius: 8,\n            }}\n          >\n            {departments.map((d, idx) => {\n              const id = d.id ?? null;\n              const checked = !!id && selectedDeptIds.includes(id);\n              return (\n                <label\n                  key={id ?? `dept-${idx}`}\n                  className=\"neon-checkbox\"\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: 8,\n                    padding: 8,\n                    borderRadius: 8,\n                    cursor: id ? \"pointer\" : \"not-allowed\",\n                    opacity: id ? 1 : 0.5,\n                    background: checked ? \"rgba(0,0,0,0.12)\" : \"transparent\",\n                  }}\n                >\n                  <input\n                    type=\"checkbox\"\n                    disabled={!id}\n                    checked={checked}\n                    onChange={() => id && toggleDept(id)}\n                  />\n                  <span>{d.name}</span>\n                </label>\n              );\n            })}\n          </div>\n\n          <div style={{ fontSize: 13, opacity: 0.8 }}>\n            {selectedDeptIds.length\n              ? `Selected ${selectedDeptIds.length} dept(s) containing ${deptUserCount} user(s).`\n              : \"Pick at least one department to continue.\"}\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              gap: 8,\n              justifyContent: \"space-between\",\n              marginTop: 8,\n            }}\n          >\n            <button\n              className=\"neon-btn ghost\"\n              onClick={() => setStep(1)}\n              style={{ display: \"inline-flex\", alignItems: \"center\", gap: 6 }}\n            >\n              <FiChevronLeft /> Back\n            </button>\n            <button\n              className=\"neon-btn\"\n              disabled={!canGoNextFrom2}\n              onClick={() => {\n                setSelectedUserAuthIds([]);\n                setStep(3);\n              }}\n              style={{ display: \"inline-flex\", alignItems: \"center\", gap: 6 }}\n              title=\"Next: choose users\"\n            >\n              Next <FiChevronRight />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Step 3 */}\n      {step === 3 && (\n        <div style={{ display: \"grid\", gap: 10 }}>\n          <div\n            style={{\n              display: \"flex\",\n              gap: 8,\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n              <button\n                className=\"neon-btn ghost\"\n                onClick={() => setStep(2)}\n                style={{ display: \"inline-flex\", alignItems: \"center\", gap: 6 }}\n              >\n                <FiChevronLeft /> Back\n              </button>\n              <div style={{ fontSize: 13, opacity: 0.9 }}>\n                {filteredUsers.length} user(s) in selected department(s)\n              </div>\n            </div>\n            <div style={{ display: \"flex\", gap: 8, alignItems: \"center\" }}>\n              <button\n                className=\"neon-btn\"\n                onClick={toggleSelectAllVisible}\n                title={\n                  allChecked ? \"Unselect all visible\" : \"Select all visible\"\n                }\n                style={{ display: \"inline-flex\", alignItems: \"center\", gap: 6 }}\n              >\n                {allChecked ? <FiCheckSquare /> : <FiSquare />}\n                {allChecked ? \"Unselect All\" : \"Select All\"}\n              </button>\n              <input\n                className=\"neon-input\"\n                placeholder=\"Search users‚Ä¶\"\n                value={userSearch}\n                onChange={(e) => setUserSearch(e.target.value)}\n                style={{ width: 240 }}\n              />\n            </div>\n          </div>\n\n          <div\n            style={{\n              border: \"1px solid var(--border, #2b2b2b)\",\n              borderRadius: 8,\n              maxHeight: 360,\n              overflow: \"auto\",\n              padding: 8,\n              display: \"grid\",\n              gap: 6,\n            }}\n          >\n            {filteredUsers.map((u, idx) => {\n              const deptName = u.department_id\n                ? departments.find((d) => d.id === u.department_id)?.name\n                : \"No Dept\";\n              const key = u.auth_id ?? u.id ?? `user-${idx}`;\n              const checked =\n                !!u.auth_id && selectedUserAuthIds.includes(u.auth_id);\n              return (\n                <label\n                  key={key}\n                  style={{\n                    display: \"grid\",\n                    gridTemplateColumns: \"auto 1fr auto\",\n                    alignItems: \"center\",\n                    gap: 10,\n                    padding: \"8px 10px\",\n                    borderRadius: 8,\n                    background: checked ? \"rgba(0,0,0,0.12)\" : \"transparent\",\n                    cursor: u.auth_id ? \"pointer\" : \"not-allowed\",\n                    opacity: u.auth_id ? 1 : 0.5,\n                  }}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    disabled={!u.auth_id}\n                    onChange={() => toggleUser(u.auth_id)}\n                  />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <strong>{u.name}</strong>\n                    <span style={{ fontSize: 12, opacity: 0.8 }}>\n                      {deptName}\n                    </span>\n                  </div>\n                  <code style={{ fontSize: 11, opacity: 0.7 }}>\n                    {u.auth_id ?? \"no auth_id\"}\n                  </code>\n                </label>\n              );\n            })}\n            {!filteredUsers.length && (\n              <div style={{ padding: 12, opacity: 0.8 }}>\n                No users match your filters.\n              </div>\n            )}\n          </div>\n\n          <div style={{ display: \"flex\", gap: 8, justifyContent: \"flex-end\" }}>\n            <NeonIconButton\n              variant=\"edit\"\n              icon={<FiSend />}\n              title={assigning ? \"Assigning‚Ä¶\" : \"Assign Module\"}\n              onClick={handleAssign}\n              disabled={assigning || !canAssign}\n            />\n          </div>\n        </div>\n      )}\n\n      {feedback && (\n        <div\n          className=\"neon-info\"\n          style={{ marginTop: 6, whiteSpace: \"pre-line\" }}\n        >\n          {feedback}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction StepDot({ active, label }: { active: boolean; label: string }) {\n  return (\n    <span\n      style={{\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        gap: 6,\n        padding: \"4px 10px\",\n        borderRadius: 999,\n        background: active\n          ? \"var(--dot-active, rgba(0,0,0,0.2))\"\n          : \"var(--dot, rgba(0,0,0,0.08))\",\n        fontWeight: active ? 600 : 500,\n      }}\n    >\n      <span\n        style={{\n          width: 8,\n          height: 8,\n          borderRadius: \"50%\",\n          background: active ? \"var(--accent, #0ea5e9)\" : \"rgba(0,0,0,0.25)\",\n          display: \"inline-block\",\n        }}\n      />\n      {label}\n    </span>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/ModuleAssignmentPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":60,"column":19,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":60,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1508,1508],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1508,1508],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface Role {\n  id: string;\n  title: string;\n  department_id: string;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\ninterface AssignmentCheckbox {\n  role_id: string;\n  department_id: string;\n}\n\ninterface Props {\n  moduleId: string;\n}\n\nexport default function ModuleAssignmentPanel({ moduleId }: Props) {\n  const router = useRouter();\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [assigned, setAssigned] = useState<AssignmentCheckbox[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    const load = async () => {\n      const [\n        { data: d, error: dErr },\n        { data: r, error: rErr },\n        { data: current, error: cErr },\n      ] = await Promise.all([\n        supabase.from(\"departments\").select(\"id, name\"),\n        supabase.from(\"roles\").select(\"id, title, department_id\"),\n        supabase\n          .from(\"module_roles\")\n          .select(\"role_id, department_id\")\n          .eq(\"module_id\", moduleId),\n      ]);\n\n      if (dErr || rErr || cErr) {\n        console.error(\"Failed to load data:\", dErr, rErr, cErr);\n      }\n\n      setDepartments(d || []);\n      setRoles(r || []);\n      setAssigned(current || []);\n      setLoading(false);\n    };\n\n    if (moduleId) load();\n  }, [moduleId]);\n\n  const isChecked = (role_id: string, department_id: string) =>\n    assigned.some(\n      (a) => a.role_id === role_id && a.department_id === department_id,\n    );\n\n  const toggle = (role_id: string, department_id: string) => {\n    setAssigned((prev) => {\n      const exists = prev.find(\n        (a) => a.role_id === role_id && a.department_id === department_id,\n      );\n      return exists\n        ? prev.filter(\n            (a) =>\n              !(a.role_id === role_id && a.department_id === department_id),\n          )\n        : [...prev, { role_id, department_id }];\n    });\n  };\n\n  const handleSave = async () => {\n    setSaving(true);\n\n    const { error: deleteError } = await supabase\n      .from(\"module_roles\")\n      .delete()\n      .eq(\"module_id\", moduleId);\n\n    if (deleteError) {\n      console.error(\"Delete error:\", deleteError);\n      setSaving(false);\n      return;\n    }\n\n    if (assigned.length > 0) {\n      const { error: insertError } = await supabase.from(\"module_roles\").insert(\n        assigned.map((a) => ({\n          module_id: moduleId,\n          role_id: a.role_id,\n          department_id: a.department_id,\n        })),\n      );\n\n      if (insertError) {\n        console.error(\"Insert error:\", insertError);\n      }\n    }\n\n    setSaving(false);\n  };\n\n  if (loading) return <p className=\"neon-loading\">Loading assignments...</p>;\n\n  return (\n    <div className=\"module-assignment-panel\">\n      <h3 className=\"module-assignment-title\">\n        <span\n          className=\"module-assignment-title-icon\"\n          aria-label=\"Assign Roles and Departments\"\n          role=\"img\"\n        >\n          üéØ\n        </span>{\" \"}\n        Assign Roles & Departments\n      </h3>\n\n      {departments.map((dep) => (\n        <div key={dep.id} className=\"module-assignment-department\">\n          <h4 className=\"module-assignment-department-title\">{dep.name}</h4>\n          <div className=\"module-assignment-role-list\">\n            {roles\n              .filter((r) => r.department_id === dep.id)\n              .map((role) => (\n                <label key={role.id} className=\"module-assignment-role-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={isChecked(role.id, dep.id)}\n                    onChange={() => toggle(role.id, dep.id)}\n                  />\n                  {role.title}\n                </label>\n              ))}\n          </div>\n        </div>\n      ))}\n\n      <div className=\"module-assignment-actions\">\n        <button\n          onClick={handleSave}\n          disabled={saving}\n          className=\"neon-btn neon-btn-save module-assignment-save-btn\"\n          data-variant=\"save\"\n        >\n          {saving ? (\n            <>\n              <span style={{ marginRight: \"0.5em\" }}>Saving...</span>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"feather feather-save\"\n              >\n                <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                <polyline points=\"7 3 7 8 15 8\"></polyline>\n              </svg>\n            </>\n          ) : (\n            <>\n              <span style={{ marginRight: \"0.5em\" }}>Save Assignments</span>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className=\"feather feather-save\"\n              >\n                <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\n                <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\n                <polyline points=\"7 3 7 8 15 8\"></polyline>\n              </svg>\n            </>\n          )}\n        </button>\n        <button\n          type=\"button\"\n          className=\"neon-btn neon-btn-edit module-assignment-edit-btn\"\n          data-variant=\"edit\"\n          onClick={() => router.push(`/admin/modules/edit/${moduleId}`)}\n        >\n          <span style={{ marginRight: \"0.5em\" }}>Edit Module</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-edit\"\n          >\n            <path d=\"M11 4h2a2 2 0 0 1 2 2v2\"></path>\n            <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L7 20.5 2.5 16 18.5 2.5z\"></path>\n          </svg>\n        </button>\n        <button\n          type=\"button\"\n          className=\"neon-btn neon-btn-view module-assignment-view-btn\"\n          data-variant=\"view\"\n          onClick={() => router.push(`/admin/modules/${moduleId}`)}\n        >\n          <span style={{ marginRight: \"0.5em\" }}>View Module</span>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-eye\"\n          >\n            <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n            <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/ModuleTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/TrainingModuleManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":84,"column":48,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":95,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":86,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .learning_objectives on an `any` value.","line":86,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_duration on an `any` value.","line":87,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delivery_format on an `any` value.","line":88,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":89,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_audience on an `any` value.","line":89,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":90,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .prerequisites on an `any` value.","line":90,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":91,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":91,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .thumbnail_url on an `any` value.","line":91,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":91,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":92,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":92,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tags on an `any` value.","line":92,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":92,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":93,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":93,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .created_at on an `any` value.","line":93,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":94,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":94,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .updated_at on an `any` value.","line":94,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":33},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":99,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":99,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2727,2727],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2727,2727],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport NeonTable from \"@/components/NeonTable\";\nimport FolderTabs from \"@/components/FolderTabs\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiClipboard,\n  FiHelpCircle,\n  FiPlus,\n  FiSend,\n  FiArchive,\n  FiEdit,\n} from \"react-icons/fi\";\n\nimport AddModuleTab from \"@/components/modules/AddModuleTab\";\nimport { ViewModuleTab } from \"@/components/modules/ViewModuleTab\";\nimport AssignModuleTab from \"@/components/modules/AssignModuleTab\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\nimport \"./folder-tabs-equal-width.css\";\n\n// Define Module type inline\ninterface Module {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  is_archived: boolean;\n  group_id: string;\n  learning_objectives?: string;\n  estimated_duration?: string;\n  delivery_format?: string;\n  target_audience?: string;\n  prerequisites?: string[];\n  tags?: string[];\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport default function TrainingModuleManager() {\n  const [activeTab, setActiveTab] = useState<\n    \"add\" | \"view\" | \"assign\" | \"archive\"\n  >(\"view\");\n  const [modules, setModules] = useState<Module[]>([]);\n  const [selectedModule, setSelectedModule] = useState<Module | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const [archiveLoading, setArchiveLoading] = useState(false);\n\n  const tabList = [\n    {\n      key: \"add\",\n      label: \"\",\n      icon: <FiPlus className=\"training-module-manager-tab-icon\" />,\n    },\n    {\n      key: \"view\",\n      label: \"\",\n      icon: <FiClipboard className=\"training-module-manager-tab-icon\" />,\n    },\n    {\n      key: \"assign\",\n      label: \"\",\n      icon: <FiSend className=\"training-module-manager-tab-icon\" />,\n    },\n    {\n      key: \"archive\",\n      label: \"\",\n      icon: <FiHelpCircle className=\"training-module-manager-tab-icon\" />,\n    },\n  ];\n\n  useEffect(() => {\n    const fetchModules = async () => {\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"*\")\n        .order(\"created_at\", { ascending: false });\n\n      if (error) {\n        return;\n      }\n\n      const cleaned = (data || []).map((m) => ({\n        ...m,\n        learning_objectives: m.learning_objectives ?? \"\",\n        estimated_duration: m.estimated_duration ?? \"\",\n        delivery_format: m.delivery_format ?? \"\",\n        target_audience: m.target_audience ?? \"\",\n        prerequisites: m.prerequisites ?? [],\n        thumbnail_url: m.thumbnail_url ?? \"\",\n        tags: m.tags ?? [],\n        created_at: m.created_at ?? new Date().toISOString(),\n        updated_at: m.updated_at ?? new Date().toISOString(),\n      }));\n      setModules(cleaned);\n    };\n\n    fetchModules();\n  }, []);\n\n  const filteredModules = modules.filter(\n    (m) =>\n      m.name.toLowerCase().includes(search.toLowerCase()) ||\n      m.description.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  // Fix: convert version to number for ViewModuleTab\n  const selectedModuleForView = selectedModule\n    ? { ...selectedModule, version: Number(selectedModule.version) }\n    : null;\n\n  return (\n    <div className=\"training-module-manager-container\">\n      <FolderTabs\n        tabs={tabList}\n        activeTab={activeTab}\n        onChange={(tabKey) => {\n          setActiveTab(tabKey as typeof activeTab);\n          setSelectedModule(null);\n        }}\n      />\n      <div className=\"training-module-manager-tab-spacer\" />\n      {activeTab === \"add\" && (\n        <div className=\"training-module-manager-tab-content\">\n          <AddModuleTab onSuccess={() => setActiveTab(\"view\")} />\n        </div>\n      )}\n      {activeTab === \"view\" && (\n        <div className=\"training-module-manager-tab-content\">\n          <div className=\"training-module-manager-search-row\">\n            <input\n              type=\"text\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search modules...\"\n              className=\"training-module-manager-search-input\"\n            />\n          </div>\n          <NeonTable\n            columns={[\n              { header: \"Name\", accessor: \"name\" },\n              { header: \"Description\", accessor: \"description\" },\n              { header: \"Version\", accessor: \"version\" },\n              { header: \"Status\", accessor: \"status\" },\n              { header: \"Actions\", accessor: \"actions\" },\n            ]}\n            data={filteredModules.map((m) => ({\n              ...m,\n              status: m.is_archived ? \"Archived\" : \"Active\",\n              actions: (\n                <div className=\"training-module-manager-actions-row\">\n                  <NeonIconButton\n                    variant=\"edit\"\n                    icon={<FiEdit />}\n                    title=\"Edit Module\"\n                    onClick={() =>\n                      (window.location.href = `/admin/modules/edit/${m.id}`)\n                    }\n                  />\n                </div>\n              ),\n            }))}\n          />\n          {selectedModuleForView && (\n            <ViewModuleTab module={selectedModuleForView} />\n          )}\n        </div>\n      )}\n      {activeTab === \"assign\" && (\n        <div className=\"training-module-manager-tab-content\">\n          <AssignModuleTab />\n        </div>\n      )}\n      {activeTab === \"archive\" && (\n        <div className=\"training-module-manager-tab-content\">\n          <div className=\"training-module-manager-search-row\">\n            <input\n              type=\"text\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              placeholder=\"Search modules to archive...\"\n              className=\"training-module-manager-search-input\"\n            />\n          </div>\n          <NeonTable\n            columns={[\n              { header: \"Name\", accessor: \"name\" },\n              { header: \"Description\", accessor: \"description\" },\n              { header: \"Version\", accessor: \"version\" },\n              { header: \"Archive\", accessor: \"archive\" },\n            ]}\n            data={modules\n              .filter((m) => !m.is_archived)\n              .map((m) => ({\n                ...m,\n                archive: (\n                  <div className=\"training-module-manager-actions-row\">\n                    <NeonIconButton\n                      variant=\"archive\"\n                      icon={<FiArchive />}\n                      title=\"Archive Module\"\n                      onClick={() => setSelectedModule(m)}\n                    />\n                  </div>\n                ),\n              }))}\n          />\n          {selectedModule && (\n            <div className=\"training-module-manager-archive-confirm\">\n              <h2 className=\"training-module-manager-archive-title\">\n                Archive Module\n              </h2>\n              <p className=\"training-module-manager-archive-desc\">\n                Are you sure you want to archive{\" \"}\n                <span className=\"training-module-manager-archive-module-name\">\n                  {selectedModule.name}\n                </span>\n                ? This action cannot be undone.\n              </p>\n              <div className=\"training-module-manager-archive-actions\">\n                <NeonIconButton\n                  variant=\"archive\"\n                  icon={\n                    <FiArchive className=\"training-module-manager-btn-archive-icon\" />\n                  }\n                  title=\"Archive\"\n                  onClick={async () => {\n                    setArchiveLoading(true);\n                    await supabase\n                      .from(\"modules\")\n                      .update({\n                        is_archived: true,\n                        updated_at: new Date().toISOString(),\n                      })\n                      .eq(\"id\", selectedModule.id);\n                    setModules((modules) =>\n                      modules.map((mod) =>\n                        mod.id === selectedModule.id\n                          ? { ...mod, is_archived: true }\n                          : mod,\n                      ),\n                    );\n                    setSelectedModule(null);\n                    setArchiveLoading(false);\n                  }}\n                  disabled={archiveLoading}\n                />\n                <NeonIconButton\n                  variant=\"cancel\"\n                  icon={<span style={{ fontSize: \"1.2em\" }}>‚úñ</span>}\n                  title=\"Cancel\"\n                  onClick={() => setSelectedModule(null)}\n                  disabled={archiveLoading}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/modules/ViewModuleTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":143,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":143,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":156,"column":15,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":156,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":156,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":156,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":157,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":157,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":157,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<number>`.","line":159,"column":9,"nodeType":"ConditionalExpression","messageId":"unsafeArgument","endLine":161,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version on an `any` value.","line":159,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version on an `any` value.","line":160,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .version on an `any` value.","line":161,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":163,"column":18,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":163,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .group_id on an `any` value.","line":163,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":164,"column":29,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":164,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .learning_objectives on an `any` value.","line":164,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":164,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":165,"column":28,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":165,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_duration on an `any` value.","line":165,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":165,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":166,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":166,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delivery_format on an `any` value.","line":166,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":166,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":167,"column":25,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":167,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_audience on an `any` value.","line":167,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string[]>`.","line":169,"column":9,"nodeType":"ConditionalExpression","messageId":"unsafeArgument","endLine":169,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .prerequisites on an `any` value.","line":169,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .prerequisites on an `any` value.","line":169,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string>`.","line":171,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":171,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .thumbnail_url on an `any` value.","line":171,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":171,"endColumn":41},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":175,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":175,"endColumn":11,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5662,5662],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5662,5662],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useRouter, useParams, usePathname } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonModuleForm, {\n  NeonModuleFormField,\n} from \"@/components/NeonModuleForm\";\n\n// --- helpers ---\nconst isUuid = (v: unknown): v is string =>\n  typeof v === \"string\" &&\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$/.test(\n    v,\n  );\n\nconst extractUuidFromPath = (path: string | null) => {\n  if (!path) return null;\n  const m = path.match(\n    /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}/,\n  );\n  return m ? m[0] : null;\n};\n\nexport interface Module {\n  id: string;\n  name: string;\n  description?: string;\n  version?: number;\n  is_archived?: boolean;\n  group_id?: string;\n  learning_objectives?: string;\n  estimated_duration?: string;\n  delivery_format?: string;\n  target_audience?: string;\n  prerequisites?: string[];\n  tags?: string[];\n  thumbnail_url?: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport function ViewModuleTab({ module }: { module: Module }) {\n  // Display module details in read-only mode\n  return (\n    <div className=\"view-module-tab\">\n      <h2 className=\"view-module-title\">{module.name}</h2>\n      <p className=\"view-module-description\">{module.description}</p>\n      <div className=\"view-module-meta\">\n        Version: <span>{module.version}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Status: <span>{module.is_archived ? \"Archived\" : \"Active\"}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Group ID: <span>{module.group_id}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Learning Objectives: <span>{module.learning_objectives || \"‚Äî\"}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Estimated Duration: <span>{module.estimated_duration || \"‚Äî\"}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Delivery Format: <span>{module.delivery_format || \"‚Äî\"}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Target Audience: <span>{module.target_audience || \"‚Äî\"}</span>\n      </div>\n      <div className=\"view-module-meta\">\n        Prerequisites:{\" \"}\n        <span>\n          {module.prerequisites && module.prerequisites.length > 0\n            ? module.prerequisites.join(\", \")\n            : \"‚Äî\"}\n        </span>\n      </div>\n      <div className=\"view-module-meta\">\n        Tags:{\" \"}\n        <span>\n          {module.tags && module.tags.length > 0 ? module.tags.join(\", \") : \"‚Äî\"}\n        </span>\n      </div>\n      <div className=\"view-module-meta\">\n        Created At:{\" \"}\n        <span>\n          {module.created_at\n            ? new Date(module.created_at).toLocaleString()\n            : \"‚Äî\"}\n        </span>\n      </div>\n      <div className=\"view-module-meta\">\n        Updated At:{\" \"}\n        <span>\n          {module.updated_at\n            ? new Date(module.updated_at).toLocaleString()\n            : \"‚Äî\"}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default function EditModulePage() {\n  const router = useRouter();\n  const params = useParams<{ id?: string | string[] }>();\n  const pathname = usePathname();\n\n  // derive id safely from params, else try the pathname\n  const derivedId = useMemo(() => {\n    const fromParams = Array.isArray(params?.id) ? params?.id?.[0] : params?.id;\n    if (isUuid(fromParams)) return fromParams || null;\n    const fromPath = extractUuidFromPath(pathname);\n    return isUuid(fromPath) ? fromPath : null;\n  }, [params?.id, pathname]);\n\n  // ui state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [showVersionModal, setShowVersionModal] = useState(false);\n\n  // form state\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [version, setVersion] = useState<number>(1);\n  const [groupId, setGroupId] = useState(\"\");\n  const [learningObjectives, setLearningObjectives] = useState(\"\");\n  const [estimatedDuration, setEstimatedDuration] = useState(\"\");\n  const [deliveryFormat, setDeliveryFormat] = useState(\"\");\n  const [targetAudience, setTargetAudience] = useState(\"\");\n  const [prerequisites, setPrerequisites] = useState<string[]>([]);\n  const [thumbnailUrl, setThumbnailUrl] = useState(\"\");\n\n  // fetch module\n  useEffect(() => {\n    const run = async () => {\n      if (!derivedId) {\n        setError(\"Invalid or missing module ID in URL.\");\n        setLoading(false);\n        return;\n      }\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"*\")\n        .eq(\"id\", derivedId)\n        .eq(\"is_archived\", false) // Only fetch non-archived modules\n        .single();\n\n      if (error || !data) {\n        setError(\"Module not found\");\n        setLoading(false);\n        return;\n      }\n\n      setName(data.name || \"\");\n      setDescription(data.description || \"\");\n      setVersion(\n        typeof data.version === \"number\"\n          ? data.version\n          : Number(data.version ?? 1) || 1,\n      );\n      setGroupId(data.group_id || \"\");\n      setLearningObjectives(data.learning_objectives || \"\");\n      setEstimatedDuration(data.estimated_duration || \"\");\n      setDeliveryFormat(data.delivery_format || \"\");\n      setTargetAudience(data.target_audience || \"\");\n      setPrerequisites(\n        Array.isArray(data.prerequisites) ? data.prerequisites : [],\n      );\n      setThumbnailUrl(data.thumbnail_url || \"\");\n      setLoading(false);\n    };\n\n    run();\n  }, [derivedId]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setShowVersionModal(true);\n  };\n\n  const handleVersionConfirm = async (isNewVersion: boolean) => {\n    setShowVersionModal(false);\n    setError(null);\n\n    if (!derivedId) {\n      setError(\"Invalid module ID.\");\n      return;\n    }\n\n    let newVersion = version;\n    if (isNewVersion) {\n      newVersion = Number(version) + 1;\n      setVersion(newVersion);\n    }\n\n    const { error } = await supabase\n      .from(\"modules\")\n      .update({\n        name,\n        description,\n        version: newVersion,\n        group_id: groupId,\n        learning_objectives: learningObjectives,\n        estimated_duration: estimatedDuration,\n        delivery_format: deliveryFormat,\n        target_audience: targetAudience,\n        prerequisites,\n        thumbnail_url: thumbnailUrl,\n        updated_at: new Date().toISOString(),\n      })\n      .eq(\"id\", derivedId);\n\n    if (error) {\n      setError(\"Failed to update module\");\n    } else {\n      setSuccess(true);\n      setTimeout(() => {\n        setSuccess(false);\n        router.push(\"/admin/modules\"); // back to modules list\n      }, 1200);\n    }\n  };\n\n  if (loading) return <p className=\"neon-loading\">Loading module...</p>;\n  if (error) return <p className=\"neon-error\">{error}</p>;\n\n  const fields: NeonModuleFormField[] = [\n    {\n      key: \"name\",\n      label: \"Name\",\n      type: \"text\",\n      value: name,\n      onChange: (v) => setName(String(v)),\n      required: true,\n    },\n    {\n      key: \"description\",\n      label: \"Description\",\n      type: \"text\",\n      value: description,\n      onChange: (v) => setDescription(String(v)),\n    },\n    {\n      key: \"learningObjectives\",\n      label: \"Learning Objectives\",\n      type: \"textarea\",\n      value: learningObjectives,\n      onChange: (v) => setLearningObjectives(String(v)),\n      rows: 2,\n    },\n    {\n      key: \"groupId\",\n      label: \"Group ID\",\n      type: \"text\",\n      value: groupId,\n      onChange: (v) => setGroupId(String(v)),\n      required: true,\n    },\n    {\n      key: \"estimatedDuration\",\n      label: \"Estimated Duration\",\n      type: \"text\",\n      value: estimatedDuration,\n      onChange: (v) => setEstimatedDuration(String(v)),\n      placeholder: \"Enter duration (e.g. 1h 30m)\",\n    },\n    {\n      key: \"deliveryFormat\",\n      label: \"Delivery Format\",\n      type: \"text\",\n      value: deliveryFormat,\n      onChange: (v) => setDeliveryFormat(String(v)),\n    },\n    {\n      key: \"targetAudience\",\n      label: \"Target Audience\",\n      type: \"text\",\n      value: targetAudience,\n      onChange: (v) => setTargetAudience(String(v)),\n    },\n    {\n      key: \"thumbnailUrl\",\n      label: \"Thumbnail URL\",\n      type: \"text\",\n      value: thumbnailUrl,\n      onChange: (v) => setThumbnailUrl(String(v)),\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"mt-8\">\n        <NeonModuleForm\n          title=\"Edit Module\"\n          fields={fields}\n          onSubmit={handleSubmit}\n          error={error}\n          success={success}\n        />\n      </div>\n\n      {showVersionModal && (\n        <div\n          className=\"ui-dialog-overlay\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) setShowVersionModal(false);\n          }}\n        >\n          <div\n            className=\"ui-dialog-content neon-dialog\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            aria-labelledby=\"version-title\"\n            style={{ maxWidth: 420 }}\n          >\n            <h2 id=\"version-title\" className=\"font-title neon-text mb-2\">\n              Is this a new version of the module?\n            </h2>\n            <p className=\"font-body mb-4\">\n              If yes, the version number will be incremented automatically.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <button\n                className=\"neon-utility-btn neon-btn-save\"\n                onClick={() => handleVersionConfirm(true)}\n                style={{ minWidth: 140 }}\n              >\n                Yes, new version\n              </button>\n              <button\n                className=\"neon-utility-btn neon-btn-edit\"\n                onClick={() => handleVersionConfirm(false)}\n                style={{ minWidth: 140 }}\n              >\n                No, keep version\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/reporting/ReportBuilder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/reporting/ReportViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/AddAuditorWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":39,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":39,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":46,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":35},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":52,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":52,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1406,1406],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1406,1406],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/task/AddAuditorWidget.tsx\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport default function AddAuditorWidget({\n  onAdded,\n}: {\n  onAdded?: () => void;\n}) {\n  const [authId, setAuthId] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [userInfo, setUserInfo] = useState<{\n    firstName: string;\n    lastName: string;\n    role: string;\n  } | null>(null);\n\n  useEffect(() => {\n    if (!authId) {\n      setUserInfo(null);\n      return;\n    }\n    const fetchUserInfo = async () => {\n      const { data, error } = await supabase\n        .from(\"users\")\n        .select(\"first_name, last_name, role(title)\")\n        .eq(\"auth_id\", authId)\n        .single();\n      if (error || !data) {\n        setUserInfo(null);\n      } else {\n        let roleTitle = \"\";\n        const role = data.role;\n        if (Array.isArray(role)) {\n          roleTitle = role[0]?.title || \"\";\n        } else if (role && typeof role === \"object\" && \"title\" in role) {\n          roleTitle = (role as { title?: string })?.title || \"\";\n        } else {\n          roleTitle = \"\";\n        }\n        setUserInfo({\n          firstName: data.first_name,\n          lastName: data.last_name,\n          role: roleTitle,\n        });\n      }\n    };\n    fetchUserInfo();\n  }, [authId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n    setSuccess(false);\n    if (!authId) {\n      setError(\"Please enter an Auth ID.\");\n      setLoading(false);\n      return;\n    }\n    const { error: insertError } = await supabase\n      .from(\"auditor_list\")\n      .insert([{ auth_id: authId }]);\n    setLoading(false);\n    if (insertError) {\n      setError(insertError.message);\n    } else {\n      setSuccess(true);\n      setAuthId(\"\");\n      if (onAdded) onAdded();\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"neon-panel\"\n      style={{ maxWidth: 400 }}\n    >\n      <h2 className=\"neon-section-title\">Add User to Auditor List</h2>\n      <input\n        className=\"neon-input\"\n        placeholder=\"Auth ID\"\n        value={authId}\n        onChange={(e) => setAuthId(e.target.value)}\n        required\n      />\n      {userInfo && (\n        <div className=\"neon-info\" style={{ marginBottom: 8 }}>\n          <strong>Name:</strong> {userInfo.firstName} {userInfo.lastName}\n          <br />\n          <strong>Role:</strong> {userInfo.role}\n        </div>\n      )}\n      {error && <p className=\"neon-error\">{error}</p>}\n      {success && <p className=\"neon-success\">User added to auditor list!</p>}\n      <button type=\"submit\" className=\"neon-btn\" disabled={loading}>\n        {loading ? \"Adding...\" : \"Add Auditor\"}\n      </button>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/AuditorsListWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":61,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":61,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1849,1849],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1849,1849],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/task/AuditorsListWidget.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface SupabaseAuditorRow {\n  id: number;\n  users?:\n    | {\n        first_name?: string;\n        last_name?: string;\n        role?: { title?: string } | { title?: string }[];\n      }\n    | {\n        first_name?: string;\n        last_name?: string;\n        role?: { title?: string } | { title?: string }[];\n      }[];\n}\n\nexport default function AuditorsListWidget() {\n  const [auditors, setAuditors] = useState<\n    Array<{ id: number; firstName: string; lastName: string; role: string }>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const fetchAuditors = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"auditor_list\")\n        .select(\"id, users(first_name, last_name, role(title))\")\n        .order(\"created_at\", { ascending: false });\n      if (error || !data) {\n        setError(\"Failed to load auditors.\");\n        setAuditors([]);\n      } else {\n        setAuditors(\n          data.map((row: SupabaseAuditorRow) => {\n            const userObj = Array.isArray(row.users) ? row.users[0] : row.users;\n            let roleTitle = \"\";\n            const role = userObj?.role;\n            if (Array.isArray(role)) {\n              roleTitle = role[0]?.title || \"\";\n            } else if (role && typeof role === \"object\" && \"title\" in role) {\n              roleTitle = role.title || \"\";\n            }\n            return {\n              id: row.id,\n              firstName: userObj?.first_name || \"\",\n              lastName: userObj?.last_name || \"\",\n              role: roleTitle,\n            };\n          }),\n        );\n      }\n      setLoading(false);\n    };\n    fetchAuditors();\n  }, []);\n\n  return (\n    <div className=\"neon-panel max-w-lg mx-auto mt-6\">\n      <h2 className=\"neon-section-title\">Auditor List</h2>\n      {loading ? (\n        <p className=\"neon-info\">Loading auditors...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : auditors.length === 0 ? (\n        <p className=\"neon-info\">No auditors found.</p>\n      ) : (\n        <table className=\"neon-table w-full\">\n          <thead>\n            <tr>\n              <th className=\"neon-th\">First Name</th>\n              <th className=\"neon-th\">Last Name</th>\n              <th className=\"neon-th\">Role</th>\n            </tr>\n          </thead>\n          <tbody>\n            {auditors.map((auditor) => (\n              <tr key={auditor.id} className=\"neon-tr\">\n                <td className=\"neon-td\">{auditor.firstName}</td>\n                <td className=\"neon-td\">{auditor.lastName}</td>\n                <td className=\"neon-td\">{auditor.role}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/MyTasksWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1817,1817],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1817,1817],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/context/UserContext\";\nimport { FiClipboard } from \"react-icons/fi\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\nexport default function MyTasksWidget() {\n  const { user, loading: userLoading } = useUser();\n  type TaskAssignment = {\n    id: number;\n    due_date: string | null;\n    status: string;\n    task: {\n      id: number;\n      title: string;\n      description: string;\n    } | null;\n  };\n\n  const [tasks, setTasks] = useState<TaskAssignment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!userLoading && user?.auth_id) {\n      setLoading(true);\n      setError(null);\n      const fetchTasks = async () => {\n        const { data, error } = await supabase\n          .from(\"task_assignments\")\n          .select(\"id, due_date, status, task:tasks(id, title, description)\")\n          .eq(\"assigned_to\", user.auth_id)\n          .order(\"due_date\", { ascending: true });\n\n        if (error) setError(\"Failed to load tasks.\");\n        setTasks(\n          (data || []).map(\n            (item: {\n              id: number;\n              due_date: string | null;\n              status: string;\n              task:\n                | { id: number; title: string; description: string }[]\n                | { id: number; title: string; description: string }\n                | null;\n            }) => ({\n              ...item,\n              task: Array.isArray(item.task)\n                ? item.task[0] || null\n                : (item.task ?? null),\n            }),\n          ),\n        );\n        setLoading(false);\n      };\n      fetchTasks();\n    }\n  }, [userLoading, user]);\n\n  if (userLoading) return <p className=\"neon-loading\">Loading user...</p>;\n  if (!user) return null;\n\n  return (\n    <div>\n      <h2 className=\"neon-section-title\">\n        <FiClipboard /> My Tasks\n      </h2>\n\n      {loading ? (\n        <p className=\"neon-loading\">Loading tasks...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : tasks.length === 0 ? (\n        <p className=\"neon-muted\">No tasks assigned to you.</p>\n      ) : (\n        <NeonTable\n          columns={[\n            { header: \"Task\", accessor: \"task\" },\n            { header: \"Description\", accessor: \"description\" },\n            { header: \"Due Date\", accessor: \"due_date\" },\n            { header: \"Status\", accessor: \"status\" },\n            {\n              header: \"Actions\",\n              accessor: \"id\",\n              render: () => (\n                <NeonIconButton\n                  variant=\"view\"\n                  title=\"View Task\"\n                  aria-label=\"View Task\"\n                />\n              ),\n            },\n          ]}\n          data={tasks.map((t) => ({\n            task: t.task?.title || \"Untitled\",\n            description: t.task?.description || \"‚Äî\",\n            due_date: t.due_date\n              ? (() => {\n                  if (typeof window === \"undefined\") return \"‚Äî\";\n                  try {\n                    return new Date(t.due_date).toLocaleDateString(\"en-GB\");\n                  } catch {\n                    return \"‚Äî\";\n                  }\n                })()\n              : \"‚Äî\",\n            status: t.status || \"Pending\",\n            id: t.id,\n          }))}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/RecurringTaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":89,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":89,"endColumn":12,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2460,2460],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2460,2460],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/lib/useUser\";\nimport { FiRepeat } from \"react-icons/fi\"; // Add Fi icon import\nimport NeonTable from \"@/components/NeonTable\";\n\nexport default function RecurringTaskList() {\n  const { user } = useUser();\n  type RecurringTask = {\n    id: number;\n    frequency: string;\n    interval_count: number;\n    next_due_at: string | null;\n    turkus_tasks: {\n      id: number;\n      title: string;\n    } | null;\n  };\n\n  const [recurring, setRecurring] = useState<RecurringTask[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const load = async () => {\n      if (!user?.auth_id) return;\n\n      const { data: userMeta, error: userError } = await supabase\n        .from(\"users\")\n        .select(\"department_id\")\n        .eq(\"auth_id\", user.auth_id)\n        .single();\n\n      if (userError || !userMeta?.department_id) {\n        setError(\"Could not determine your department.\");\n        setLoading(false);\n        return;\n      }\n\n      const { data, error: recurringError } = await supabase\n        .from(\"recurring_assignments\")\n        .select(\n          `\n          id,\n          frequency,\n          interval_count,\n          next_due_at,\n          turkus_tasks (\n            id,\n            title\n          )\n        `,\n        )\n        .eq(\"department_id\", userMeta.department_id);\n\n      if (recurringError) {\n        setError(\"Failed to load recurring tasks.\");\n        console.error(recurringError);\n      } else {\n        setRecurring(\n          (data || []).map((item) => {\n            let turkusTask = null;\n            if (Array.isArray(item.turkus_tasks)) {\n              const t = item.turkus_tasks[0];\n              if (\n                t &&\n                typeof t.id !== \"undefined\" &&\n                typeof t.title !== \"undefined\"\n              ) {\n                turkusTask = { id: Number(t.id), title: String(t.title) };\n              }\n            }\n            return {\n              id: Number(item.id),\n              frequency: String(item.frequency),\n              interval_count: Number(item.interval_count),\n              next_due_at: item.next_due_at ? String(item.next_due_at) : null,\n              turkus_tasks: turkusTask,\n            };\n          }),\n        );\n      }\n\n      setLoading(false);\n    };\n\n    load();\n  }, [user]);\n\n  return (\n    <div>\n      <h2 className=\"neon-section-title\">\n        <FiRepeat className=\"recurring-task-list-title-icon\" />\n      </h2>\n\n      {loading ? (\n        <p className=\"neon-loading\">Loading recurring tasks...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : recurring.length === 0 ? (\n        <p className=\"neon-muted\">No recurring tasks found.</p>\n      ) : (\n        <NeonTable\n          columns={[\n            { header: \"Task\", accessor: \"task\" },\n            { header: \"Frequency\", accessor: \"frequency\" },\n            { header: \"Interval\", accessor: \"interval\" },\n            { header: \"Next Due\", accessor: \"next_due\" },\n          ]}\n          data={recurring.map((r) => ({\n            task: r.turkus_tasks?.title || \"Unknown Task\",\n            frequency: r.frequency,\n            interval: r.interval_count,\n            next_due: r.next_due_at\n              ? typeof window !== \"undefined\"\n                ? new Date(r.next_due_at).toLocaleDateString(\"en-GB\", {\n                    year: \"numeric\",\n                    month: \"short\",\n                    day: \"numeric\",\n                  })\n                : \"‚Äî\"\n              : \"‚Äî\",\n          }))}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskAmendWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":43,"column":24,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":43,"endColumn":37,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1486,1486],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1486,1486],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/context/UserContext\";\nimport { FiEdit, FiTrash2 } from \"react-icons/fi\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\nexport default function TaskAmendWidget() {\n  const { user, loading: userLoading } = useUser();\n  type Task = {\n    id: string;\n    title: string;\n    area: string;\n    frequency: string;\n    instructions: string;\n    created_by: string;\n  };\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [selectedTask, setSelectedTask] = useState<string>(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [area, setArea] = useState(\"\");\n  const [frequency, setFrequency] = useState(\"\");\n  const [instructions, setInstructions] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  // Fetch tasks for the current user\n  const fetchTasks = useCallback(async () => {\n    const { data, error } = await supabase\n      .from(\"tasks\")\n      .select(\"id, title, area, frequency, instructions, created_by\")\n      .eq(\"created_by\", user?.auth_id);\n\n    if (error) setError(\"Failed to load tasks.\");\n    setTasks(data || []);\n  }, [user?.auth_id]);\n\n  useEffect(() => {\n    if (user?.auth_id) fetchTasks();\n  }, [user, fetchTasks]);\n\n  const handleEdit = (taskId: string) => {\n    const task = tasks.find((t) => t.id === taskId);\n    if (task) {\n      setSelectedTask(taskId);\n      setTitle(task.title);\n      setArea(task.area);\n      setFrequency(task.frequency);\n      setInstructions(task.instructions);\n      setSuccess(false);\n      setError(null);\n    }\n  };\n\n  const handleSave = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n    setError(null);\n    setSuccess(false);\n\n    const { error } = await supabase\n      .from(\"tasks\")\n      .update({ title, area, frequency, instructions })\n      .eq(\"id\", selectedTask);\n\n    if (error) setError(\"Failed to save changes.\");\n    else {\n      setSuccess(true);\n      await fetchTasks();\n    }\n\n    setSaving(false);\n  };\n\n  const handleDelete = async () => {\n    if (!selectedTask) return;\n    const confirm = window.confirm(\n      \"Are you sure you want to delete this task?\",\n    );\n    if (!confirm) return;\n\n    setDeleting(true);\n    setError(null);\n    setSuccess(false);\n\n    const { error } = await supabase\n      .from(\"tasks\")\n      .delete()\n      .eq(\"id\", selectedTask);\n\n    if (error) setError(\"Failed to delete task.\");\n    else {\n      setSelectedTask(\"\");\n      setTitle(\"\");\n      setArea(\"\");\n      setFrequency(\"\");\n      setInstructions(\"\");\n      await fetchTasks();\n    }\n\n    setDeleting(false);\n  };\n\n  if (userLoading) return <p className=\"neon-info\">Loading user...</p>;\n\n  return (\n    <div>\n      <div>\n        <span className=\"neon-icon-bg\">\n          <FiEdit />\n        </span>\n        <h2 className=\"neon-section-title\">Amend Task</h2>\n      </div>\n\n      <ul className=\"neon-list\">\n        {tasks.length === 0 ? (\n          <li className=\"neon-info\">\n            You have not created any tasks to amend.\n          </li>\n        ) : (\n          tasks.map((t) => (\n            <li key={t.id}>\n              <button className=\"neon-link\" onClick={() => handleEdit(t.id)}>\n                {t.title}\n              </button>\n            </li>\n          ))\n        )}\n      </ul>\n\n      {selectedTask && (\n        <NeonForm title=\"Amend Task\" onSubmit={handleSave}>\n          <div className=\"neon-grid\">\n            <input\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              className=\"neon-input\"\n              placeholder=\"Title\"\n            />\n            <input\n              value={area}\n              onChange={(e) => setArea(e.target.value)}\n              className=\"neon-input\"\n              placeholder=\"Area\"\n            />\n          </div>\n          <input\n            value={frequency}\n            onChange={(e) => setFrequency(e.target.value)}\n            className=\"neon-input\"\n            placeholder=\"Frequency\"\n          />\n          <textarea\n            value={instructions}\n            onChange={(e) => setInstructions(e.target.value)}\n            className=\"neon-input\"\n            placeholder=\"Instructions\"\n            rows={4}\n          />\n          <div className=\"neon-panel-actions\">\n            <NeonIconButton\n              type=\"submit\"\n              variant=\"edit\"\n              icon={<FiEdit />}\n              title={saving ? \"Saving...\" : \"Save Changes\"}\n              disabled={saving}\n            />\n            <NeonIconButton\n              type=\"button\"\n              variant=\"delete\"\n              icon={<FiTrash2 />}\n              title={deleting ? \"Deleting...\" : \"Delete Task\"}\n              onClick={handleDelete}\n              disabled={deleting}\n            />\n          </div>\n          {error && <p className=\"neon-error\">{error}</p>}\n          {success && (\n            <p className=\"neon-success\">Changes saved successfully.</p>\n          )}\n        </NeonForm>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskAssignmentWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":51,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":51,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1650,1650],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1650,1650],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/context/UserContext\"; // Adjust this to your actual context\nimport { FiUserPlus } from \"react-icons/fi\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\nexport default function TaskAssignmentWidget() {\n  const { user, loading: userLoading } = useUser();\n  type Task = {\n    id: string;\n    title: string;\n    department_id: string;\n  };\n  const [tasks, setTasks] = useState<Task[]>([]);\n  type User = {\n    auth_id: string;\n    first_name: string;\n    last_name: string;\n  };\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedTask, setSelectedTask] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    if (!user?.department_id) return;\n\n    const fetchData = async () => {\n      // Fetch only tasks assigned to the user's department\n      const { data: taskData } = await supabase\n        .from(\"tasks\")\n        .select(\"id, title, department_id\")\n        .eq(\"department_id\", user.department_id);\n\n      setTasks(taskData || []);\n\n      const { data: userData } = await supabase\n        .from(\"users\")\n        .select(\"auth_id, first_name, last_name\")\n        .eq(\"department_id\", user.department_id); // Removed .neq('auth_id', user.auth_id)\n\n      setUsers(userData || []);\n    };\n\n    fetchData();\n  }, [user]);\n\n  const handleAssign = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setSuccess(false);\n\n    if (!selectedTask || !selectedUser || !dueDate || !user?.auth_id) {\n      setError(\"Please select all fields.\");\n      setLoading(false);\n      return;\n    }\n\n    const { error } = await supabase.from(\"task_assignments\").insert({\n      task_id: selectedTask,\n      assigned_to: selectedUser,\n      assigned_by: user.auth_id,\n      due_date: dueDate,\n    });\n\n    if (error) setError(\"Failed to assign task.\");\n    else setSuccess(true);\n    setLoading(false);\n  };\n\n  if (userLoading) return <p className=\"neon-info\">Loading user...</p>;\n\n  return (\n    <div>\n      <h2 className=\"neon-section-title\">\n        <FiUserPlus /> Assign Task\n      </h2>\n      <NeonForm title=\"Assign Task\" onSubmit={handleAssign}>\n        <select\n          value={selectedTask}\n          onChange={(e) => setSelectedTask(e.target.value)}\n          className=\"neon-input\"\n        >\n          <option value=\"\">Select Task</option>\n          {tasks.map((t) => (\n            <option key={t.id} value={t.id}>\n              {t.title}\n            </option>\n          ))}\n        </select>\n        <select\n          value={selectedUser}\n          onChange={(e) => setSelectedUser(e.target.value)}\n          className=\"neon-input\"\n        >\n          <option value=\"\">Select User</option>\n          {users.map((u) => (\n            <option key={u.auth_id} value={u.auth_id}>\n              {u.first_name} {u.last_name}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"date\"\n          value={dueDate}\n          onChange={(e) => setDueDate(e.target.value)}\n          className=\"neon-input\"\n        />\n        <div className=\"neon-panel-actions\">\n          <NeonIconButton\n            type=\"submit\"\n            variant=\"add\"\n            icon={<FiUserPlus />}\n            title={loading ? \"Assigning...\" : \"Assign Task\"}\n            disabled={loading}\n          />\n        </div>\n        {error && <p className=\"neon-error\">{error}</p>}\n        {success && <p className=\"neon-success\">Task assigned successfully!</p>}\n      </NeonForm>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskCreateWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskListWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":40,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":40,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1133,1133],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1133,1133],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiList } from \"react-icons/fi\";\nimport { useUser } from \"@/context/UserContext\"; // ‚Üê use your context\n\ntype Task = {\n  id: number;\n  title: string;\n  area: string | null;\n  frequency: string | null;\n  instructions: string | null;\n};\n\nexport default function TaskListWidget() {\n  const { user, loading: userLoading } = useUser();\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const departmentId = user?.department_id;\n\n  useEffect(() => {\n    if (!departmentId) return;\n\n    const fetchTasks = async () => {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from(\"tasks\")\n        .select(\"id, title, area, frequency, instructions\")\n        .eq(\"department_id\", departmentId) // üîë only tasks for user's dept\n        .order(\"title\", { ascending: true });\n\n      if (error) setError(\"Failed to load tasks.\");\n      setTasks(data || []);\n      setLoading(false);\n    };\n\n    fetchTasks();\n  }, [departmentId]);\n\n  if (userLoading) return <p className=\"neon-info\">Loading user...</p>;\n\n  return (\n    <div>\n      <h2 className=\"neon-section-title\">\n        <FiList /> Department Tasks\n      </h2>\n      {loading ? (\n        <p className=\"neon-info\">Loading tasks...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : tasks.length === 0 ? (\n        <p className=\"neon-info\">No tasks found for your department.</p>\n      ) : (\n        <ul className=\"neon-list\">\n          {tasks.map((task) => (\n            <li key={task.id} className=\"neon-list-item\">\n              <h3 className=\"neon-list-title\">{task.title}</h3>\n              <p className=\"neon-list-meta\">\n                {(task.area ?? \"\") + \" ¬∑ \" + (task.frequency ?? \"\")}\n              </p>\n              <p className=\"neon-list-desc\">{task.instructions ?? \"\"}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/task/TaskRoleManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":42,"endColumn":12,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1046,1046],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1046,1046],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":56,"column":44,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":56,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":67,"column":25,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":67,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":69,"column":36,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":69,"endColumn":38},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":78,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":78,"endColumn":28,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2014,2014],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2014,2014],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiClipboard } from \"react-icons/fi\";\n\ninterface Task {\n  id: string;\n  title: string;\n}\n\ninterface Role {\n  id: string;\n  title: string;\n  department_id: string;\n}\n\ninterface Department {\n  id: string;\n  name: string;\n}\n\nexport default function TaskRoleManager() {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n\n  useEffect(() => {\n    const load = async () => {\n      const [{ data: t }, { data: r }, { data: d }] = await Promise.all([\n        supabase.from(\"tasks\").select(\"id, title\").order(\"title\"),\n        supabase\n          .from(\"roles\")\n          .select(\"id, title, department_id\")\n          .order(\"title\"),\n        supabase.from(\"departments\").select(\"id, name\").order(\"name\"),\n      ]);\n      setTasks(t || []);\n      setRoles(r || []);\n      setDepartments(d || []);\n    };\n    load();\n  }, []);\n\n  const loadRolesWithTasks = useCallback(\n    async (deptId: string) => {\n      const { data: deptRoles } = await supabase\n        .from(\"roles\")\n        .select(\"id, title, department_id\")\n        .eq(\"department_id\", deptId);\n\n      if (!deptRoles) {\n        return;\n      }\n\n      const roleIds = deptRoles.map((r) => r.id);\n      const { data: assignments } = await supabase\n        .from(\"role_tasks\")\n        .select(\"role_id, task_id\")\n        .in(\"role_id\", roleIds);\n\n      const taskMap = new Map(tasks.map((t) => [t.id, t]));\n      deptRoles.map((role) => {\n        const taskIds =\n          assignments\n            ?.filter((a) => a.role_id === role.id)\n            .map((a) => a.task_id) || [];\n        const assignedTasks = taskIds\n          .map((id) => taskMap.get(id))\n          .filter(Boolean) as Task[];\n        return { ...role, tasks: assignedTasks, newTaskId: \"\" };\n      });\n    },\n    [tasks],\n  );\n\n  useEffect(() => {\n    loadRolesWithTasks(\"\");\n  }, [tasks, loadRolesWithTasks]);\n\n  if (departments.length === 0 || roles.length === 0) return null;\n\n  return (\n    <div>\n      <h2 className=\"neon-section-title\">\n        <FiClipboard /> Task Role Manager\n      </h2>\n      {/* ...rest of your component UI... */}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/training/CertificateTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/training/MyTeamTraining.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":40,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":40,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1227,1227],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1227,1227],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonTable from \"@/components/NeonTable\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useUser } from \"@/lib/useUser\";\n\nexport default function MyTeamTraining() {\n  const { user } = useUser();\n  const [teamTraining, setTeamTraining] = useState<\n    Array<{\n      id: string;\n      team_member: string;\n      module: string;\n      status: string;\n      completed_at?: string;\n    }>\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n    const fetchTraining = async () => {\n      setLoading(true);\n      try {\n        // Fetch all team members' training that is not completed\n        const { data, error } = await supabase\n          .from(\"training\")\n          .select(\"id, module, status, completed_at, team_member\")\n          .eq(\"manager_id\", user.auth_id)\n          .neq(\"status\", \"completed\");\n        if (error) throw error;\n        setTeamTraining(data || []);\n      } catch {\n        setError(\"Failed to load team training.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTraining();\n  }, [user]);\n\n  return (\n    <NeonPanel>\n      <h2>Team Training (Incomplete)</h2>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p className=\"error-message\">{error}</p>\n      ) : teamTraining.length === 0 ? (\n        <p>All team training is completed!</p>\n      ) : (\n        <NeonTable\n          columns={[\n            { header: \"Team Member\", accessor: \"team_member\" },\n            { header: \"Module\", accessor: \"module\" },\n            { header: \"Status\", accessor: \"status\" },\n          ]}\n          data={teamTraining}\n        />\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/training/UserTrainingDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":95,"column":21,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":95,"endColumn":28},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":125,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":125,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3744,3744],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3744,3744],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":166,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":166,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4900,4900],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4900,4900],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":224,"column":22,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":224,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":265,"column":24,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":265,"endColumn":46}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState, useCallback } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport CertificateTemplate from \"@/components/training/CertificateTemplate\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonIconButton from \"../ui/NeonIconButton\";\nimport { FiX, FiDownload, FiCheck } from \"react-icons/fi\";\n\ntype ItemType = \"module\" | \"document\" | \"behaviour\";\ntype Status = \"assigned\" | \"opened\" | \"completed\";\ntype ViewMode = \"all\" | \"grouped\";\n\ntype RpcRow = {\n  item_id: string;\n  item_type: ItemType;\n  name: string;\n  status: Status;\n  opened_at: string | null;\n  completed_at: string | null;\n};\n\ninterface Assignment {\n  id: string;\n  type: ItemType;\n  name: string;\n  status: Status;\n  opened_at: string | null;\n  completed_at: string | null;\n}\n\nexport default function UserTrainingDashboard({ authId }: { authId: string }) {\n  const [assignments, setAssignments] = useState<Assignment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const [showCert, setShowCert] = useState<{\n    name: string;\n    training: string;\n    date: string;\n  } | null>(null);\n  const [userFullName, setUserFullName] = useState(\"User\");\n\n  const [viewingModule, setViewingModule] = useState<{\n    id: string;\n    name: string;\n  } | null>(null);\n  const [viewingDocument, setViewingDocument] = useState<{\n    id: string;\n    name: string;\n  } | null>(null);\n  const [moduleContent, setModuleContent] = useState<string | null>(null);\n  const [documentContent, setDocumentContent] = useState<string | null>(null);\n\n  const [viewMode, setViewMode] = useState<ViewMode>(\"all\");\n\n  // prevent double-click spam while a completion is saving\n  const [completing, setCompleting] = useState<Set<string>>(new Set());\n  const rowKey = (a: Assignment) => `${a.type}:${a.id}`;\n\n  const fmt = (iso?: string | null) =>\n    iso\n      ? new Date(iso).toLocaleDateString(undefined, {\n          year: \"numeric\",\n          month: \"short\",\n          day: \"2-digit\",\n        })\n      : \"\";\n\n  const whenOf = (a: Assignment) =>\n    a.status === \"completed\"\n      ? fmt(a.completed_at)\n      : a.status === \"opened\"\n        ? `Opened on ${fmt(a.opened_at)}`\n        : \"‚Äî\";\n\n  const fetchAll = useCallback(async () => {\n    if (!authId) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // tolerant lookup: works if your 'users' table keys by auth_id or id\n      const { data: user, error: userErr } = await supabase\n        .from(\"users\")\n        .select(\"first_name, last_name\")\n        .or(`auth_id.eq.${authId},id.eq.${authId}`)\n        .limit(1)\n        .single();\n      if (userErr && userErr.code !== \"PGRST116\") throw userErr;\n      setUserFullName(\n        `${user?.first_name ?? \"\"} ${user?.last_name ?? \"\"}`.trim() || \"User\",\n      );\n\n      const { data: rpcData, error: rpcErr } = await supabase.rpc(\n        \"api_get_my_training\",\n        { _auth_id: authId },\n      );\n      if (rpcErr) throw rpcErr;\n\n      const rows = (rpcData as RpcRow[]) ?? [];\n      const normalized: Assignment[] = rows\n        .map((r) => ({\n          id: r.item_id,\n          type: r.item_type,\n          name: r.name ?? \"(untitled)\",\n          status: r.status,\n          opened_at: r.opened_at,\n          completed_at: r.completed_at,\n        }))\n        .sort((a, b) =>\n          a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" }),\n        );\n\n      setAssignments(normalized);\n    } catch (e: unknown) {\n      console.error(e);\n      setError(e instanceof Error ? e.message : \"Something went wrong.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [authId]);\n\n  useEffect(() => {\n    fetchAll();\n  }, [fetchAll]);\n\n  // --- Actions: write directly to user_assignments ---------------------------\n\n  const handleComplete = async (a: Assignment) => {\n    if (a.status === \"completed\") return;\n\n    const k = rowKey(a);\n    const now = new Date().toISOString();\n    setCompleting((prev) => new Set(prev).add(k));\n\n    // snapshot for rollback\n    const snapshot = { ...a };\n\n    // OPTIMISTIC\n    setAssignments((prev) =>\n      prev.map((x) =>\n        x.id === a.id && x.type === a.type\n          ? {\n              ...x,\n              status: \"completed\",\n              completed_at: now,\n              opened_at: x.opened_at ?? now,\n            }\n          : x,\n      ),\n    );\n\n    try {\n      const openedAt = a.opened_at ?? now;\n      const { error } = await supabase\n        .from(\"user_assignments\")\n        .update({ opened_at: openedAt, completed_at: now })\n        .eq(\"auth_id\", authId)\n        .eq(\"item_id\", a.id)\n        .eq(\"item_type\", a.type)\n        .select(); // forces error surface + allows checking affected rows if needed\n      if (error) throw error;\n\n      // optional: refresh to reflect any server-side changes\n      fetchAll();\n    } catch (e: unknown) {\n      console.error(e);\n      setError(e instanceof Error ? e.message : \"Failed to mark complete.\");\n      // rollback\n      setAssignments((prev) =>\n        prev.map((x) =>\n          x.id === snapshot.id && x.type === snapshot.type ? snapshot : x,\n        ),\n      );\n    } finally {\n      setCompleting((prev) => {\n        const next = new Set(prev);\n        next.delete(k);\n        return next;\n      });\n    }\n  };\n\n  const handleViewModule = async (mod: { id: string; name: string }) => {\n    setViewingModule(mod);\n    const now = new Date().toISOString();\n\n    // optimistic open state\n    setAssignments((prev) =>\n      prev.map((a) =>\n        a.id === mod.id && a.type === \"module\"\n          ? {\n              ...a,\n              opened_at: a.opened_at ?? now,\n              status: a.status === \"assigned\" ? \"opened\" : a.status,\n            }\n          : a,\n      ),\n    );\n\n    // persist open in union table\n    try {\n      const { error } = await supabase\n        .from(\"user_assignments\")\n        .update({ opened_at: now })\n        .eq(\"auth_id\", authId)\n        .eq(\"item_id\", mod.id)\n        .eq(\"item_type\", \"module\")\n        .is(\"opened_at\", null) // only set if it was null (first open)\n        .select();\n      if (error) throw error;\n    } catch (e) {\n      // ignore ‚Äî optimistic UI already applied\n      console.warn(\"open update failed (module):\", e);\n    }\n\n    // load content\n    const { data } = await supabase\n      .from(\"modules\")\n      .select(\"content\")\n      .eq(\"id\", mod.id)\n      .single();\n    setModuleContent(data?.content || \"No content available.\");\n  };\n\n  const handleViewDocument = async (doc: { id: string; name: string }) => {\n    setViewingDocument(doc);\n    const now = new Date().toISOString();\n\n    // optimistic open state\n    setAssignments((prev) =>\n      prev.map((a) =>\n        a.id === doc.id && a.type === \"document\"\n          ? {\n              ...a,\n              opened_at: a.opened_at ?? now,\n              status: a.status === \"assigned\" ? \"opened\" : a.status,\n            }\n          : a,\n      ),\n    );\n\n    // persist open in union table\n    try {\n      const { error } = await supabase\n        .from(\"user_assignments\")\n        .update({ opened_at: now })\n        .eq(\"auth_id\", authId)\n        .eq(\"item_id\", doc.id)\n        .eq(\"item_type\", \"document\")\n        .is(\"opened_at\", null)\n        .select();\n      if (error) throw error;\n    } catch (e) {\n      console.warn(\"open update failed (document):\", e);\n    }\n\n    // load link\n    const { data } = await supabase\n      .from(\"documents\")\n      .select(\"file_url\")\n      .eq(\"id\", doc.id)\n      .single();\n    setDocumentContent(data?.file_url || null);\n  };\n\n  const handleShowCertificate = (a: Assignment) => {\n    if (a.status !== \"completed\" || !a.completed_at) return;\n    setShowCert({\n      name: userFullName,\n      training: a.name,\n      date: fmt(a.completed_at),\n    });\n  };\n\n  if (!authId) return null;\n\n  // --- Derived/grouped data --------------------------------------------------\n\n  const allRows = assignments.map((a) => ({\n    name: a.name,\n    type: a.type,\n    status:\n      a.status === \"completed\"\n        ? \"Completed\"\n        : a.status === \"opened\"\n          ? \"Opened\"\n          : \"Incomplete\",\n    when: whenOf(a),\n    actions: (\n      <div className=\"flex gap-2\">\n        {a.type !== \"behaviour\" && (\n          <NeonIconButton\n            as=\"button\"\n            variant=\"view\"\n            icon={<FiDownload />}\n            title={`View ${a.type === \"module\" ? \"Module\" : \"Document\"}`}\n            onClick={() =>\n              a.type === \"module\"\n                ? handleViewModule({ id: a.id, name: a.name })\n                : handleViewDocument({ id: a.id, name: a.name })\n            }\n          />\n        )}\n        {a.status !== \"completed\" && (\n          <NeonIconButton\n            as=\"button\"\n            variant=\"save\"\n            icon={<FiCheck />}\n            title=\"Mark Complete\"\n            onClick={() => handleComplete(a)}\n            disabled={completing.has(rowKey(a))}\n          />\n        )}\n        {a.status === \"completed\" && a.completed_at && (\n          <NeonIconButton\n            as=\"button\"\n            variant=\"download\"\n            icon={<FiDownload />}\n            title=\"Certificate\"\n            onClick={() => handleShowCertificate(a)}\n          />\n        )}\n      </div>\n    ),\n  }));\n\n  const modules = assignments.filter(\n    (a) => a.type === \"module\" && a.status !== \"completed\",\n  );\n  const documents = assignments.filter(\n    (a) => a.type === \"document\" && a.status !== \"completed\",\n  );\n  const behaviours = assignments.filter(\n    (a) => a.type === \"behaviour\" && a.status !== \"completed\",\n  );\n  const completed = assignments.filter((a) => a.status === \"completed\");\n\n  return (\n    <NeonPanel className=\"w-full\">\n      {loading ? (\n        <p className=\"neon-success\">Loading...</p>\n      ) : error ? (\n        <p className=\"neon-error\">{error}</p>\n      ) : assignments.length === 0 ? (\n        <p className=\"neon-info\">No training assigned.</p>\n      ) : (\n        <>\n          {/* View switcher */}\n          <div className=\"flex items-center justify-between mb-3\">\n            <h3 className=\"neon-form-title mt-2\">Training</h3>\n            <div className=\"flex gap-2\">\n              <button\n                className={`px-3 py-1 rounded ${viewMode === \"all\" ? \"bg-[var(--neon)] text-black\" : \"bg-[var(--field)]\"}`}\n                onClick={() => setViewMode(\"all\")}\n              >\n                All (union)\n              </button>\n              <button\n                className={`px-3 py-1 rounded ${viewMode === \"grouped\" ? \"bg-[var(--neon)] text-black\" : \"bg-[var(--field)]\"}`}\n                onClick={() => setViewMode(\"grouped\")}\n              >\n                Grouped\n              </button>\n            </div>\n          </div>\n\n          {viewMode === \"all\" ? (\n            <NeonTable\n              columns={[\n                { header: \"Name\", accessor: \"name\" },\n                { header: \"Type\", accessor: \"type\" },\n                { header: \"Status\", accessor: \"status\" },\n                { header: \"When\", accessor: \"when\" },\n                { header: \"Actions\", accessor: \"actions\" },\n              ]}\n              data={allRows}\n            />\n          ) : (\n            <>\n              {/* Modules */}\n              <h4 className=\"neon-form-title mt-4 mb-2\">Modules</h4>\n              {modules.length === 0 ? (\n                <p className=\"neon-info mb-4\">No modules assigned.</p>\n              ) : (\n                <NeonTable\n                  columns={[\n                    { header: \"Name\", accessor: \"name\" },\n                    { header: \"Status\", accessor: \"status\" },\n                    { header: \"When\", accessor: \"when\" },\n                    { header: \"Action\", accessor: \"action\" },\n                  ]}\n                  data={modules.map((a) => ({\n                    name: a.name,\n                    status:\n                      a.status === \"completed\"\n                        ? \"Completed\"\n                        : a.status === \"opened\"\n                          ? \"Opened\"\n                          : \"Incomplete\",\n                    when: whenOf(a),\n                    action: (\n                      <div className=\"flex gap-2\">\n                        <NeonIconButton\n                          as=\"button\"\n                          variant=\"view\"\n                          icon={<FiDownload />}\n                          title=\"View Module\"\n                          onClick={() =>\n                            handleViewModule({ id: a.id, name: a.name })\n                          }\n                        />\n                        <NeonIconButton\n                          as=\"button\"\n                          variant=\"save\"\n                          icon={<FiCheck />}\n                          title=\"Mark Complete\"\n                          onClick={() => handleComplete(a)}\n                          disabled={completing.has(rowKey(a))}\n                        />\n                      </div>\n                    ),\n                  }))}\n                />\n              )}\n\n              {/* Documents */}\n              <h4 className=\"neon-form-title mt-4 mb-2\">Documents</h4>\n              {documents.length === 0 ? (\n                <p className=\"neon-info mb-4\">No documents assigned.</p>\n              ) : (\n                <NeonTable\n                  columns={[\n                    { header: \"Name\", accessor: \"name\" },\n                    { header: \"Status\", accessor: \"status\" },\n                    { header: \"When\", accessor: \"when\" },\n                    { header: \"Action\", accessor: \"action\" },\n                  ]}\n                  data={documents.map((a) => ({\n                    name: a.name,\n                    status:\n                      a.status === \"completed\"\n                        ? \"Completed\"\n                        : a.status === \"opened\"\n                          ? \"Opened\"\n                          : \"Incomplete\",\n                    when: whenOf(a),\n                    action: (\n                      <div className=\"flex gap-2\">\n                        <NeonIconButton\n                          as=\"button\"\n                          variant=\"view\"\n                          icon={<FiDownload />}\n                          title=\"View Document\"\n                          onClick={() =>\n                            handleViewDocument({ id: a.id, name: a.name })\n                          }\n                        />\n                        <NeonIconButton\n                          as=\"button\"\n                          variant=\"save\"\n                          icon={<FiCheck />}\n                          title=\"Mark Complete\"\n                          onClick={() => handleComplete(a)}\n                          disabled={completing.has(rowKey(a))}\n                        />\n                      </div>\n                    ),\n                  }))}\n                />\n              )}\n\n              {/* Behaviours */}\n              <h4 className=\"neon-form-title mt-4 mb-2\">Behaviours</h4>\n              {behaviours.length === 0 ? (\n                <p className=\"neon-info mb-4\">No behaviours assigned.</p>\n              ) : (\n                <NeonTable\n                  columns={[\n                    { header: \"Name\", accessor: \"name\" },\n                    { header: \"Status\", accessor: \"status\" },\n                    { header: \"When\", accessor: \"when\" },\n                    { header: \"Action\", accessor: \"action\" },\n                  ]}\n                  data={behaviours.map((a) => ({\n                    name: a.name,\n                    status:\n                      a.status === \"completed\"\n                        ? \"Completed\"\n                        : a.status === \"opened\"\n                          ? \"Opened\"\n                          : \"Incomplete\",\n                    when: whenOf(a),\n                    action: (\n                      <NeonIconButton\n                        as=\"button\"\n                        variant=\"save\"\n                        icon={<FiCheck />}\n                        title=\"Mark Complete\"\n                        onClick={() => handleComplete(a)}\n                        disabled={completing.has(rowKey(a))}\n                      />\n                    ),\n                  }))}\n                />\n              )}\n\n              {/* Completed */}\n              <h4 className=\"neon-form-title mt-8 mb-2 neon-info\">\n                Completed Training\n              </h4>\n              {completed.length === 0 ? (\n                <p className=\"neon-info\">No completed training yet.</p>\n              ) : (\n                <NeonTable\n                  columns={[\n                    { header: \"Name\", accessor: \"name\" },\n                    { header: \"Type\", accessor: \"type\" },\n                    { header: \"Completed At\", accessor: \"completed_at\" },\n                    { header: \"Certificate\", accessor: \"certificate\" },\n                  ]}\n                  data={completed.map((a) => ({\n                    name: a.name,\n                    type: a.type,\n                    completed_at: fmt(a.completed_at),\n                    certificate: (\n                      <NeonIconButton\n                        as=\"button\"\n                        variant=\"download\"\n                        icon={<FiDownload />}\n                        title=\"Certificate\"\n                        onClick={() => handleShowCertificate(a)}\n                        disabled={a.status !== \"completed\" || !a.completed_at}\n                      />\n                    ),\n                  }))}\n                />\n              )}\n            </>\n          )}\n\n          {/* Certificate Modal */}\n          {showCert && (\n            <div className=\"neon-modal-overlay\">\n              <div className=\"neon-modal neon-modal-certificate\">\n                <NeonIconButton\n                  variant=\"delete\"\n                  icon={<FiX />}\n                  title=\"Close\"\n                  onClick={() => setShowCert(null)}\n                  className=\"neon-modal-close-btn\"\n                />\n                <CertificateTemplate\n                  userName={showCert.name}\n                  trainingName={showCert.training}\n                  completionDate={showCert.date}\n                />\n                <NeonIconButton\n                  variant=\"download\"\n                  icon={<FiDownload />}\n                  title=\"Print / Save as PDF\"\n                  onClick={() => window.print()}\n                  className=\"neon-btn neon-btn-print neon-modal-print-btn\"\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Module/document modals */}\n          {viewingModule && (\n            <div className=\"neon-modal-overlay\">\n              <div className=\"neon-modal neon-modal-module\">\n                <NeonIconButton\n                  variant=\"delete\"\n                  icon={<FiX />}\n                  title=\"Close\"\n                  onClick={() => {\n                    setViewingModule(null);\n                    setModuleContent(null);\n                  }}\n                  className=\"neon-modal-close-btn\"\n                />\n                <h2 className=\"neon-modal-title\">\n                  Module: {viewingModule.name}\n                </h2>\n                <div className=\"neon-modal-content\">\n                  {moduleContent || \"Loading...\"}\n                </div>\n              </div>\n            </div>\n          )}\n          {viewingDocument && (\n            <div className=\"neon-modal-overlay\">\n              <div className=\"neon-modal neon-modal-document\">\n                <NeonIconButton\n                  variant=\"delete\"\n                  icon={<FiX />}\n                  title=\"Close\"\n                  onClick={() => {\n                    setViewingDocument(null);\n                    setDocumentContent(null);\n                  }}\n                  className=\"neon-modal-close-btn\"\n                />\n                <h2 className=\"neon-modal-title\">\n                  Document: {viewingDocument.name}\n                </h2>\n                {documentContent ? (\n                  <a\n                    href={documentContent}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"neon-modal-link\"\n                  >\n                    Open Document\n                  </a>\n                ) : (\n                  <div className=\"neon-modal-content\">No file available.</div>\n                )}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </NeonPanel>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/turkus/HealthSafetyManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/turkus/HealthSafetyPolicyManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":34,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":34,"endColumn":21,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1020,1020],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1020,1020],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { FiFileText, FiEdit, FiCheck } from \"react-icons/fi\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport Link from \"next/link\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface Policy {\n  id: string;\n  title: string;\n  description: string;\n}\n\nexport default function HealthSafetyPolicyManager() {\n  const [policies, setPolicies] = useState<Policy[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [form, setForm] = useState({ title: \"\", description: \"\" });\n  const [saving, setSaving] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  useEffect(() => {\n    async function fetchPolicies() {\n      const { data, error } = await supabase\n        .from(\"policies\")\n        .select(\"id, title, description\");\n      if (error) {\n        setPolicies([]);\n      } else {\n        setPolicies(data || []);\n      }\n    }\n    fetchPolicies();\n  }, []);\n\n  const handleEdit = (policy: Policy) => {\n    setEditingId(policy.id);\n    setForm({ title: policy.title, description: policy.description });\n  };\n\n  const handleFormChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaving(true);\n    setTimeout(() => {\n      if (editingId) {\n        setPolicies((policies) =>\n          policies.map((p) => (p.id === editingId ? { ...p, ...form } : p)),\n        );\n      } else {\n        setPolicies((policies) => [\n          ...policies,\n          { id: String(Date.now()), ...form },\n        ]);\n      }\n      setEditingId(null);\n      setForm({ title: \"\", description: \"\" });\n      setSaving(false);\n      setSuccess(true);\n      setTimeout(() => setSuccess(false), 1200);\n    }, 800);\n  };\n\n  return (\n    <div className=\"after-hero\">\n      <div className=\"global-content\">\n        <main className=\"global-content\">\n          <NeonPanel>\n            <h2 className=\"neon-form-title\">\n              <FiFileText /> Health & Safety Policies\n            </h2>\n            <form\n              onSubmit={handleSave}\n              className=\"add-policy-form\"\n              style={{ marginBottom: \"2rem\" }}\n            >\n              <div className=\"add-policy-field\">\n                <label className=\"add-policy-label\">Policy Title</label>\n                <input\n                  name=\"title\"\n                  type=\"text\"\n                  value={form.title}\n                  onChange={handleFormChange}\n                  className=\"add-policy-input\"\n                  required\n                />\n              </div>\n              <div className=\"add-policy-field\">\n                <label className=\"add-policy-label\">Description</label>\n                <textarea\n                  name=\"description\"\n                  value={form.description}\n                  onChange={handleFormChange}\n                  className=\"add-policy-input\"\n                  rows={3}\n                  required\n                />\n              </div>\n              <div className=\"add-policy-actions\">\n                <NeonIconButton\n                  variant=\"submit\"\n                  icon={<FiCheck />}\n                  title={\n                    saving\n                      ? \"Saving...\"\n                      : editingId\n                        ? \"Update Policy\"\n                        : \"Add Policy\"\n                  }\n                  type=\"submit\"\n                  disabled={saving}\n                />\n              </div>\n              {success && (\n                <p className=\"add-policy-success\">\n                  <FiCheck /> Policy saved!\n                </p>\n              )}\n            </form>\n            <ul className=\"neon-policy-list\">\n              {policies.length === 0 ? (\n                <li className=\"neon-muted\">No policies found.</li>\n              ) : (\n                policies.map((policy) => (\n                  <li key={policy.id} className=\"neon-policy-item\">\n                    <Link\n                      href={`/health-safety/policies/${policy.id}`}\n                      className=\"neon-policy-link\"\n                    >\n                      <strong>{policy.title}</strong>\n                    </Link>\n                    <div className=\"neon-policy-desc\">{policy.description}</div>\n                    <NeonIconButton\n                      variant=\"edit\"\n                      icon={<FiEdit />}\n                      title=\"Edit Policy\"\n                      onClick={() => handleEdit(policy)}\n                      className=\"neon-policy-edit-btn\"\n                    />\n                  </li>\n                ))\n              )}\n            </ul>\n          </NeonPanel>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/turkus/RiskAssessmentManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":73,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":73,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2318,2318],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2318,2318],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { FiClipboard, FiEdit2, FiUserPlus } from \"react-icons/fi\";\nimport NeonForm from \"@/components/NeonForm\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonPanel from \"@/components/NeonPanel\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\n\ntype TurkusRisk = {\n  id: string;\n  title: string;\n  description: string;\n  severity: string;\n  created_at: string;\n  review_period_months: number;\n  department_id: string | null;\n  category_id: string | null;\n  created_by: string | null;\n  photo_urls: string[] | null;\n  control_measures?: string;\n  persons_at_risk?: string;\n  injury_risk?: string;\n};\n\ntype Department = {\n  id: string;\n  name: string;\n};\n\ntype User = {\n  id: string;\n  auth_id: string;\n  email: string;\n  department_id: string | null;\n};\n\nexport default function RiskAssessmentManager() {\n  const [mode, setMode] = useState<\"list\" | \"create\" | \"edit\" | \"assign\">(\n    \"list\",\n  );\n  const [selectedId, setSelectedId] = useState<string | null>(null);\n\n  const [riskAssessments, setRiskAssessments] = useState<TurkusRisk[]>([]);\n  const [departments, setDepartments] = useState<Department[]>([]);\n  const [departmentUsers, setDepartmentUsers] = useState<User[]>([]);\n  const [assignUserId, setAssignUserId] = useState<string>(\"\");\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [severity, setSeverity] = useState(\"Medium\");\n  const [reviewPeriod, setReviewPeriod] = useState(12);\n  const [departmentId, setDepartmentId] = useState<string | null>(null);\n  const [photoUrls, setPhotoUrls] = useState<string[]>([]);\n  const [controlMeasures, setControlMeasures] = useState(\"\");\n  const [personsAtRisk, setPersonsAtRisk] = useState(\"\");\n  const [injuryRisk, setInjuryRisk] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [{ data: risks }, { data: depts }] = await Promise.all([\n        supabase\n          .from(\"turkus_risks\")\n          .select(\"*\")\n          .order(\"created_at\", { ascending: false }),\n        supabase.from(\"departments\").select(\"id, name\").order(\"name\"),\n      ]);\n      setRiskAssessments(risks || []);\n      setDepartments(depts || []);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (mode === \"edit\" && selectedId) {\n      const selected = riskAssessments.find((r) => r.id === selectedId);\n      if (selected) {\n        setTitle(selected.title);\n        setDescription(selected.description);\n        setSeverity(selected.severity);\n        setReviewPeriod(selected.review_period_months);\n        setDepartmentId(selected.department_id);\n        setPhotoUrls(selected.photo_urls || []);\n        setControlMeasures(selected.control_measures || \"\");\n        setPersonsAtRisk(selected.persons_at_risk || \"\");\n        setInjuryRisk(selected.injury_risk || \"\");\n      }\n    }\n  }, [mode, selectedId, riskAssessments]);\n\n  useEffect(() => {\n    if (mode === \"assign\" && selectedId) {\n      const selected = riskAssessments.find((r) => r.id === selectedId);\n      if (!selected?.department_id) return;\n\n      supabase\n        .from(\"users\")\n        .select(\"id, auth_id, email, department_id\")\n        .eq(\"department_id\", selected.department_id)\n        .then(({ data }) => setDepartmentUsers(data || []));\n    }\n  }, [mode, selectedId, riskAssessments]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const payload = {\n      title,\n      description,\n      severity,\n      review_period_months: reviewPeriod,\n      department_id: departmentId,\n      photo_urls: photoUrls,\n      control_measures: controlMeasures,\n      persons_at_risk: personsAtRisk,\n      injury_risk: injuryRisk,\n      created_by: null,\n    };\n\n    const query =\n      mode === \"create\"\n        ? supabase.from(\"turkus_risks\").insert(payload)\n        : supabase.from(\"turkus_risks\").update(payload).eq(\"id\", selectedId);\n\n    const { error } = await query;\n    if (!error) {\n      setMode(\"list\");\n      const { data } = await supabase.from(\"turkus_risks\").select(\"*\");\n      setRiskAssessments(data || []);\n    }\n  };\n\n  return (\n    <div className=\"risk-assessment-manager-global\">\n      <div className=\"risk-assessment-header-global\">\n        <h2 className=\"neon-form-title\">\n          <FiClipboard /> Risk Assessments\n        </h2>\n        <NeonIconButton\n          variant=\"add\"\n          title=\"Create New\"\n          icon={<FiEdit2 />}\n          onClick={() => {\n            setMode(\"create\");\n            setSelectedId(null);\n          }}\n        />\n        <NeonIconButton\n          variant=\"view\"\n          title=\"View All\"\n          icon={<FiClipboard />}\n          onClick={() => setMode(\"list\")}\n        />\n      </div>\n\n      {mode === \"list\" && (\n        <NeonTable\n          columns={[\n            { header: \"Title\", accessor: \"title\" },\n            { header: \"Description\", accessor: \"description\" },\n            { header: \"Severity\", accessor: \"severity\" },\n            { header: \"Actions\", accessor: \"actions\" },\n          ]}\n          data={riskAssessments.map((risk) => ({\n            title: risk.title,\n            description: risk.description,\n            severity: risk.severity,\n            actions: (\n              <div key={risk.id} className=\"risk-assessment-actions-global\">\n                <NeonIconButton\n                  variant=\"edit\"\n                  title=\"Amend\"\n                  icon={<FiEdit2 />}\n                  onClick={() => {\n                    setMode(\"edit\");\n                    setSelectedId(risk.id);\n                  }}\n                />\n                <NeonIconButton\n                  variant=\"view\"\n                  title=\"Assign\"\n                  icon={<FiUserPlus />}\n                  onClick={() => {\n                    setMode(\"assign\");\n                    setSelectedId(risk.id);\n                  }}\n                />\n              </div>\n            ),\n          }))}\n        />\n      )}\n\n      {(mode === \"create\" || mode === \"edit\") && (\n        <NeonPanel>\n          <NeonForm\n            title={\n              mode === \"create\"\n                ? \"Create Risk Assessment\"\n                : \"Edit Risk Assessment\"\n            }\n            onSubmit={handleSubmit}\n          >\n            <input\n              className=\"neon-input\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n            />\n            <textarea\n              className=\"neon-input\"\n              placeholder=\"Description\"\n              rows={3}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n            <select\n              className=\"neon-input\"\n              value={severity}\n              onChange={(e) => setSeverity(e.target.value)}\n            >\n              <option value=\"Low\">Low</option>\n              <option value=\"Medium\">Medium</option>\n              <option value=\"High\">High</option>\n              <option value=\"Critical\">Critical</option>\n            </select>\n            <input\n              className=\"neon-input\"\n              type=\"number\"\n              placeholder=\"Review period (months)\"\n              value={reviewPeriod}\n              onChange={(e) => setReviewPeriod(parseInt(e.target.value))}\n            />\n            <select\n              className=\"neon-input\"\n              value={departmentId || \"\"}\n              onChange={(e) => setDepartmentId(e.target.value)}\n            >\n              <option value=\"\">Select department</option>\n              {departments.map((dept) => (\n                <option key={dept.id} value={dept.id}>\n                  {dept.name}\n                </option>\n              ))}\n            </select>\n            <textarea\n              className=\"neon-input\"\n              placeholder=\"Control Measures\"\n              value={controlMeasures}\n              onChange={(e) => setControlMeasures(e.target.value)}\n            />\n            <textarea\n              className=\"neon-input\"\n              placeholder=\"Persons at Risk\"\n              value={personsAtRisk}\n              onChange={(e) => setPersonsAtRisk(e.target.value)}\n            />\n            <textarea\n              className=\"neon-input\"\n              placeholder=\"Injury Risk\"\n              value={injuryRisk}\n              onChange={(e) => setInjuryRisk(e.target.value)}\n            />\n            <input\n              className=\"neon-input\"\n              placeholder=\"Photo URLs (comma separated)\"\n              value={photoUrls.join(\",\")}\n              onChange={(e) =>\n                setPhotoUrls(e.target.value.split(\",\").map((s) => s.trim()))\n              }\n            />\n          </NeonForm>\n        </NeonPanel>\n      )}\n\n      {mode === \"assign\" && (\n        <NeonPanel>\n          <h3 className=\"neon-form-title\">Assign Risk Assessment</h3>\n          <p>\n            Assigning:{\" \"}\n            <strong>\n              {riskAssessments.find((r) => r.id === selectedId)?.title}\n            </strong>\n          </p>\n          <select\n            className=\"neon-input\"\n            value={assignUserId}\n            onChange={(e) => setAssignUserId(e.target.value)}\n          >\n            <option value=\"\">Select user from department</option>\n            {departmentUsers.map((user) => (\n              <option key={user.auth_id} value={user.auth_id}>\n                {user.email}\n              </option>\n            ))}\n          </select>\n          <button\n            className=\"neon-btn neon-btn-assign\"\n            type=\"button\"\n            onClick={async () => {\n              if (!selectedId || !assignUserId) return;\n              const { error } = await supabase\n                .from(\"turkus_risk_assignments\")\n                .insert({\n                  risk_id: selectedId,\n                  auth_id: assignUserId,\n                });\n              if (!error) setMode(\"list\");\n            }}\n          >\n            Confirm Assignment\n          </button>\n        </NeonPanel>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/ConfirmDialogue.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/NeonDualListbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/NeonIconButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/NeonToolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/OrangeAvatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/OverlayDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/ProjectGlobalHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/ThemedTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/MyProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/MyProfileModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/TrainerView.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":296,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":296,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7412,7412],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7412,7412],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":335,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":335,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":336,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":336,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":350,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":350,"endColumn":59},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":594,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":594,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[16903,16903],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[16903,16903],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, {\n  useMemo,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from \"react\";\nimport {\n  FiUsers,\n  FiUserPlus,\n  FiClock,\n  FiArchive,\n  FiAward,\n  FiFilter,\n  FiAlertOctagon,\n} from \"react-icons/fi\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport SignaturePad from \"react-signature-canvas\";\nimport NeonTable from \"../NeonTable\";\nimport NeonForm from \"../NeonForm\";\nimport NeonPanel from \"../NeonPanel\";\nimport Image from \"next/image\";\n\n// ==========================\n// Types\n// ==========================\nexport type Dept = { id: string; name: string };\n\nexport type UserRow = {\n  id: string;\n  auth_id: string;\n  name: string;\n  departmentId: string;\n  departmentName: string;\n  lastTrainingDate?: string; // ISO\n};\n\nexport type LogTrainingPayload = {\n  auth_id: string; // use auth_id, not app user id\n  date: string; // ISO yyyy-mm-dd\n  topic: string; // module_id or human topic\n  duration_hours: number;\n  outcome: \"completed\" | \"needs-followup\";\n  notes?: string | null;\n  signature: string; // base64 PNG dataURL\n  assignment_id?: string | null;\n};\n\nexport type Section = \"log\" | \"history\" | \"assign\" | \"certs\" | \"profile\";\n\nexport interface TrainerRecordingProps {\n  users?: UserRow[];\n  departments?: Dept[];\n  pageSize?: number;\n  onOpenSection?: (userId: string, section: Section) => void;\n}\n\n// ==========================\n// Utils\n// ==========================\nconst formatDate = (iso?: string) =>\n  iso ? new Date(iso).toLocaleDateString() : \"‚Äî\";\n\n// Trim transparent edges from a canvas (local helper)\nfunction trimCanvasLocal(src: HTMLCanvasElement): HTMLCanvasElement {\n  const ctx = src.getContext(\"2d\");\n  if (!ctx) return src;\n\n  const { width, height } = src;\n  const { data } = ctx.getImageData(0, 0, width, height);\n\n  let top = 0,\n    left = 0,\n    right = width - 1,\n    bottom = height - 1;\n  let found = false;\n\n  const rowHasInk = (y: number) => {\n    for (let x = 0; x < width; x++) {\n      if (data[(y * width + x) * 4 + 3] !== 0) return true; // alpha\n    }\n    return false;\n  };\n  const colHasInk = (x: number) => {\n    for (let y = 0; y < height; y++) {\n      if (data[(y * width + x) * 4 + 3] !== 0) return true;\n    }\n    return false;\n  };\n\n  for (let y = 0; y < height; y++) {\n    if (rowHasInk(y)) {\n      top = y;\n      found = true;\n      break;\n    }\n  }\n  if (!found) return src;\n\n  for (let y = height - 1; y >= 0; y--) {\n    if (rowHasInk(y)) {\n      bottom = y;\n      break;\n    }\n  }\n  for (let x = 0; x < width; x++) {\n    if (colHasInk(x)) {\n      left = x;\n      break;\n    }\n  }\n  for (let x = width - 1; x >= 0; x--) {\n    if (colHasInk(x)) {\n      right = x;\n      break;\n    }\n  }\n\n  const w = Math.max(1, right - left + 1);\n  const h = Math.max(1, bottom - top + 1);\n\n  const out = document.createElement(\"canvas\");\n  out.width = w;\n  out.height = h;\n  const outCtx = out.getContext(\"2d\");\n  if (outCtx) outCtx.drawImage(src, left, top, w, h, 0, 0, w, h);\n  return out;\n}\n\n// ==========================\n// Supabase Client\n// ==========================\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\n// ==========================\n// SignatureBox (isolated/memoized)\n// ==========================\ntype SignatureBoxProps = {\n  disabled?: boolean;\n  onChange: (dataUrl: string) => void; // called on pen up\n};\n\nconst SignatureBox = React.memo(function SignatureBox({\n  disabled,\n  onChange,\n}: SignatureBoxProps) {\n  const padRef = useRef<SignaturePad>(null);\n\n  const canvasProps = useMemo(\n    () => ({\n      width: 320,\n      height: 120,\n      className:\n        \"w-[320px] h-[120px] border border-dashed rounded-lg bg-[var(--field,#012b2b)] shrink-0 touch-none block\",\n    }),\n    [],\n  );\n\n  const handleEnd = useCallback(() => {\n    const pad = padRef.current;\n    if (!pad || pad.isEmpty()) {\n      onChange(\"\");\n      return;\n    }\n    const canvas = pad.getCanvas();\n    const trimmed = trimCanvasLocal(canvas);\n    onChange(trimmed.toDataURL(\"image/png\"));\n  }, [onChange]);\n\n  const handleClear = useCallback(() => {\n    padRef.current?.clear();\n    onChange(\"\");\n  }, [onChange]);\n\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"inline-flex items-center gap-2\">\n        <div className=\"font-body opacity-80\">Draw here</div>\n        <button\n          type=\"button\"\n          onClick={handleClear}\n          disabled={disabled}\n          className=\"neon-btn neon-btn-danger\"\n          title=\"Clear signature\"\n        >\n          Clear\n        </button>\n      </div>\n\n      <SignaturePad\n        ref={padRef}\n        penColor=\"#40E0D0\"\n        clearOnResize={false}\n        canvasProps={canvasProps}\n        onEnd={handleEnd}\n      />\n    </div>\n  );\n});\n\n// ==========================\n// Component\n// ==========================\nexport default function TrainerRecordingPage({\n  onOpenSection,\n}: TrainerRecordingProps) {\n  const [rows, setRows] = useState<UserRow[]>([]);\n  const [depts, setDepts] = useState<Dept[]>([]);\n  const [dept, setDept] = useState<string>(\"all\");\n\n  useEffect(() => {\n    async function fetchData() {\n      // 1) Departments\n      const { data: departments, error: deptErr } = await supabase\n        .from(\"departments\")\n        .select(\"id, name\")\n        .order(\"name\", { ascending: true });\n\n      if (deptErr) console.error(\"departments error:\", deptErr);\n      if (departments) setDepts(departments);\n\n      // 2) Users + department join\n      const { data: users, error: usersErr } = await supabase\n        .from(\"users\")\n        .select(\n          `\n          id,\n          auth_id,\n          first_name,\n          last_name,\n          email,\n          department_id,\n          departments ( name )\n        `,\n        )\n        .order(\"first_name\", { ascending: true });\n\n      if (usersErr) {\n        console.error(\"users error:\", usersErr);\n        setRows([]);\n        return;\n      }\n\n      type SupabaseUser = {\n        id: string;\n        auth_id: string | null;\n        first_name?: string | null;\n        last_name?: string | null;\n        name?: string | null;\n        email?: string | null;\n        department_id?: string | null;\n        departments?:\n          | { name?: string | null }[]\n          | { name?: string | null }\n          | null;\n      };\n\n      const mapped: UserRow[] = (users ?? [])\n        .map((u: SupabaseUser) => {\n          const displayName =\n            [u.first_name, u.last_name].filter(Boolean).join(\" \").trim() ||\n            u.name ||\n            u.email ||\n            \"‚Äî\";\n          let departmentName = \"\";\n          if (Array.isArray(u.departments) && u.departments.length > 0) {\n            departmentName = u.departments[0]?.name ?? \"\";\n          } else if (\n            u.departments &&\n            typeof u.departments === \"object\" &&\n            \"name\" in u.departments\n          ) {\n            departmentName =\n              (u.departments as { name?: string | null }).name ?? \"\";\n          }\n          return {\n            id: u.id,\n            auth_id: u.auth_id ?? \"\", // filtered out below if missing\n            name: displayName,\n            departmentId: u.department_id ?? \"\",\n            departmentName,\n            lastTrainingDate: undefined,\n          };\n        })\n        // Only keep users that can be acted on (must have auth_id)\n        .filter((r) => !!r.auth_id);\n\n      setRows(mapped);\n    }\n\n    fetchData();\n  }, []);\n\n  // Modal state for quick log\n  const [openFor, setOpenFor] = useState<UserRow | null>(null);\n  const [form, setForm] = useState({\n    date: new Date().toISOString().slice(0, 10),\n    durationHours: 1,\n    outcome: \"completed\" as LogTrainingPayload[\"outcome\"],\n    notes: \"\",\n    signature: \"\",\n  });\n  const [busy, setBusy] = useState(false);\n\n  // ==========================\n  // Assignment fetch for log modal (from user_assignments)\n  // ==========================\n  type TrainingAssignment = {\n    id: string; // user_assignments.id\n    module_id: string; // user_assignments.item_id\n    module_name?: string | null;\n  };\n\n  const [assignments, setAssignments] = useState<TrainingAssignment[]>([]);\n  const [selectedModuleId, setSelectedModuleId] = useState<string>(\"\");\n\n  const fetchAssignments = async (authId: string) => {\n    try {\n      // Direct assignments that are not completed\n      const { data: ua, error: uaErr } = await supabase\n        .from(\"user_assignments\")\n        .select(\"id, item_id, item_type, completed_at\")\n        .eq(\"auth_id\", authId)\n        .eq(\"item_type\", \"module\")\n        .is(\"completed_at\", null);\n\n      if (uaErr) throw uaErr;\n\n      let list: TrainingAssignment[] = (ua ?? []).map((row) => ({\n        id: row.id,\n        module_id: row.item_id,\n      }));\n\n      // Fetch module names for nicer labels\n      const ids = Array.from(new Set(list.map((a) => a.module_id)));\n      if (ids.length) {\n        const { data: mods, error: mErr } = await supabase\n          .from(\"modules\")\n          .select(\"id, name\")\n          .in(\"id\", ids);\n        if (!mErr && mods?.length) {\n          const nameById = new Map(mods.map((m) => [m.id, m.name]));\n          list = list.map((a) => ({\n            ...a,\n            module_name: nameById.get(a.module_id) ?? null,\n          }));\n        }\n      }\n\n      setAssignments(list);\n      setSelectedModuleId(list[0]?.module_id || \"\");\n    } catch (e) {\n      console.error(\"Failed to fetch assignments:\", e);\n      setAssignments([]);\n      setSelectedModuleId(\"\");\n    }\n  };\n\n  // ==========================\n  // History Modal\n  // ==========================\n  type TrainingLog = {\n    id: string;\n    date: string;\n    topic: string;\n    duration_hours: number;\n    outcome: string;\n    notes: string | null;\n    signature: string | null;\n  };\n\n  const [historyFor, setHistoryFor] = useState<UserRow | null>(null);\n  const [historyLogs, setHistoryLogs] = useState<TrainingLog[]>([]);\n  const [historyBusy, setHistoryBusy] = useState(false);\n\n  const openHistory = async (user: UserRow) => {\n    setHistoryFor(user);\n    setHistoryBusy(true);\n    try {\n      const { data, error } = await supabase\n        .from(\"training_logs\")\n        .select(\"id, date, topic, duration_hours, outcome, notes, signature\")\n        .eq(\"auth_id\", user.auth_id)\n        .order(\"date\", { ascending: false });\n      if (error) throw error;\n      setHistoryLogs(data || []);\n    } catch (e) {\n      console.error(\"Failed to fetch training logs:\", e);\n      setHistoryLogs([]);\n    } finally {\n      setHistoryBusy(false);\n    }\n  };\n\n  // Derived\n  const filtered = useMemo(() => {\n    return rows\n      .filter((r) => (dept === \"all\" ? true : r.departmentId === dept))\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }, [rows, dept]);\n\n  // Handlers\n  const openLog = async (u: UserRow) => {\n    setOpenFor(u);\n    setForm({\n      date: new Date().toISOString().slice(0, 10),\n      durationHours: 1,\n      outcome: \"completed\",\n      notes: \"\",\n      signature: \"\",\n    });\n    await fetchAssignments(u.auth_id);\n  };\n\n  const handleSignatureChange = useCallback((dataUrl: string) => {\n    setForm((f) => ({ ...f, signature: dataUrl }));\n  }, []);\n\n  const submitLog = async () => {\n    if (!openFor) return;\n    if (!selectedModuleId) {\n      alert(\"Please select a module.\");\n      return;\n    }\n    if (!form.signature.trim()) {\n      alert(\"Please provide your e-signature.\");\n      return;\n    }\n\n    setBusy(true);\n    try {\n      const assignment = assignments.find(\n        (a) => a.module_id === selectedModuleId,\n      );\n\n      // 1) Insert into training_logs directly (client-side)\n      const { error: insertErr } = await supabase.from(\"training_logs\").insert([\n        {\n          auth_id: openFor.auth_id, // üëà use auth_id\n          date: form.date,\n          topic: selectedModuleId, // or assignment?.module_name\n          duration_hours: Number(form.durationHours) || 1,\n          outcome: form.outcome,\n          notes: form.notes?.trim() || null,\n          signature: form.signature,\n          // assignment_id: assignment?.id ?? null,               // uncomment if column exists\n        },\n      ]);\n\n      if (insertErr) {\n        console.error(\"Insert training_logs failed:\", insertErr);\n        alert(`Failed to log training: ${insertErr.message}`);\n        setBusy(false);\n        return;\n      }\n\n      // 2) Mark assignment completed (if we have a UA row id)\n      if (assignment?.id) {\n        const { error: updateError } = await supabase\n          .from(\"user_assignments\")\n          .update({ completed_at: new Date().toISOString() })\n          .eq(\"id\", assignment.id);\n\n        if (updateError) {\n          console.error(\"Failed to update assignment status:\", updateError);\n          // Not fatal to the log, so we don't block UX\n        }\n      }\n\n      setOpenFor(null);\n    } catch (e) {\n      console.error(e);\n      alert(\"Failed to log training.\");\n    } finally {\n      setBusy(false);\n    }\n  };\n\n  return (\n    <div className=\"after-hero global-content\">\n      <h2 className=\"flex items-center gap-2 text-2xl font-semibold mb-4\">\n        <FiUsers className=\"text-[var(--neon,#40E0D0)]\" aria-hidden /> Record\n        Training\n      </h2>\n\n      {/* Controls */}\n      <div className=\"grid gap-3 md:grid-cols-2 mb-4\">\n        <label className=\"flex items-center gap-2 rounded-xl border border-[var(--border,#40E0D0)]/30 bg-[var(--field,#012b2b)] px-3 py-2\">\n          <FiFilter aria-hidden />\n          <select\n            aria-label=\"Filter by department\"\n            className=\"w-full bg-transparent outline-none\"\n            value={dept}\n            onChange={(e) => setDept(e.target.value)}\n          >\n            <option value=\"all\">All departments</option>\n            {depts.map((d) => (\n              <option key={d.id} value={d.id}>\n                {d.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n\n      {/* Table */}\n      <NeonTable\n        columns={[\n          { header: \"Name\", accessor: \"name\" },\n          { header: \"Department\", accessor: \"departmentName\" },\n          {\n            header: \"Last training\",\n            accessor: \"lastTrainingDate\",\n            render: (v) => formatDate(v as string),\n          },\n          {\n            header: \"Actions\",\n            accessor: \"actions\",\n            render: (_, row) => (\n              <div className=\"inline-flex items-center gap-4\">\n                <button\n                  className=\"neon-btn neon-btn-utility neon-btn-global\"\n                  onClick={() => openLog(row as UserRow)}\n                  title=\"Log a training session\"\n                  aria-label=\"Log session\"\n                  type=\"button\"\n                >\n                  <FiUserPlus />\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-utility neon-btn-global\"\n                  onClick={() => openHistory(row as UserRow)}\n                  title=\"View training history\"\n                  aria-label=\"History\"\n                  type=\"button\"\n                >\n                  <FiArchive />\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-utility neon-btn-global\"\n                  onClick={() => onOpenSection?.((row as UserRow).id, \"assign\")}\n                  title=\"Assign training\"\n                  aria-label=\"Assign\"\n                  type=\"button\"\n                >\n                  <FiClock />\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-cert neon-btn-utility\"\n                  style={{ background: \"#a259ff\" }}\n                  onClick={() => onOpenSection?.((row as UserRow).id, \"certs\")}\n                  title=\"Certificates & status\"\n                  aria-label=\"Certs\"\n                  type=\"button\"\n                >\n                  <FiAward />\n                </button>\n                <button\n                  className=\"neon-btn neon-btn-danger neon-btn-utility\"\n                  onClick={() => window.open(\"/raise-issue\", \"_blank\")}\n                  title=\"Raise an issue\"\n                  aria-label=\"Raise an issue\"\n                  type=\"button\"\n                >\n                  <FiAlertOctagon />\n                </button>\n              </div>\n            ),\n          },\n        ]}\n        data={filtered}\n      />\n\n      {/* Simple overlay + centered dialog */}\n      {openFor && (\n        <div\n          className=\"ui-dialog-overlay\"\n          onClick={() => !busy && setOpenFor(null)}\n        >\n          <div\n            className=\"ui-dialog-content\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <NeonForm\n              title={`Log training ‚Ä¢ ${openFor.name} ‚Ä¢ ${openFor.departmentName}`}\n              submitLabel={busy ? \"Saving‚Ä¶\" : \"Save log\"}\n              onSubmit={(e) => {\n                e.preventDefault();\n                submitLog();\n              }}\n              onCancel={() => !busy && setOpenFor(null)}\n            >\n              <span className=\"font-body opacity-75 mb-2 block\">\n                Today: {new Date().toLocaleDateString()}\n              </span>\n\n              <label className=\"grid gap-1\">\n                <span className=\"font-body opacity-80\">Date</span>\n                <input\n                  type=\"date\"\n                  className=\"neon-input\"\n                  value={form.date}\n                  onChange={(e) =>\n                    setForm((f) => ({ ...f, date: e.target.value }))\n                  }\n                  disabled={busy}\n                />\n              </label>\n\n              <label className=\"grid gap-1\">\n                <span className=\"font-body opacity-80\">Duration (hours)</span>\n                <input\n                  type=\"number\"\n                  min={0.5}\n                  step={0.5}\n                  className=\"neon-input\"\n                  value={form.durationHours}\n                  onChange={(e) =>\n                    setForm((f) => ({\n                      ...f,\n                      durationHours: Number(e.target.value),\n                    }))\n                  }\n                  disabled={busy}\n                />\n              </label>\n\n              {assignments.length > 0 ? (\n                <label className=\"grid gap-1\">\n                  <span className=\"font-body opacity-80\">Module</span>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedModuleId}\n                    onChange={(e) => setSelectedModuleId(e.target.value)}\n                    disabled={busy}\n                  >\n                    {assignments.map((a) => (\n                      <option key={a.id} value={a.module_id}>\n                        {a.module_name\n                          ? a.module_name\n                          : `Module ID: ${a.module_id}`}\n                      </option>\n                    ))}\n                  </select>\n                </label>\n              ) : (\n                <label className=\"grid gap-1\">\n                  <span className=\"font-body opacity-80\">Module</span>\n                  <span className=\"font-body opacity-60\">\n                    No modules assigned.\n                  </span>\n                </label>\n              )}\n\n              <label className=\"grid gap-1\">\n                <span className=\"font-body opacity-80\">Outcome</span>\n                <select\n                  className=\"neon-input\"\n                  value={form.outcome}\n                  onChange={(e) =>\n                    setForm((f) => ({\n                      ...f,\n                      outcome: e.target.value as LogTrainingPayload[\"outcome\"],\n                    }))\n                  }\n                  disabled={busy}\n                >\n                  <option value=\"completed\">Completed</option>\n                  <option value=\"needs-followup\">Needs follow-up</option>\n                </select>\n              </label>\n\n              <label className=\"grid gap-1\">\n                <span className=\"font-body opacity-80\">Notes</span>\n                <textarea\n                  rows={4}\n                  className=\"neon-input\"\n                  value={form.notes}\n                  onChange={(e) =>\n                    setForm((f) => ({ ...f, notes: e.target.value }))\n                  }\n                  disabled={busy}\n                  placeholder=\"Key points covered, observed competency, follow-up actions‚Ä¶\"\n                />\n              </label>\n\n              {/* E-signature field */}\n              <div className=\"grid gap-2 mt-3\">\n                <span className=\"font-body opacity-80\">\n                  E-signature (draw your signature below)\n                </span>\n                <SignatureBox\n                  disabled={busy}\n                  onChange={handleSignatureChange}\n                />\n                {form.signature && (\n                  <Image\n                    alt=\"Signature preview\"\n                    src={form.signature}\n                    width={320}\n                    height={120}\n                    className=\"mt-1 w-[320px] h-[120px] object-contain bg-black/10 rounded\"\n                    unoptimized\n                  />\n                )}\n              </div>\n            </NeonForm>\n          </div>\n        </div>\n      )}\n\n      {/* History Modal */}\n      {historyFor && (\n        <div className=\"ui-dialog-overlay\" onClick={() => setHistoryFor(null)}>\n          <div\n            className=\"ui-dialog-content\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <NeonPanel>\n              <h3 className=\"text-xl font-semibold mb-2\">\n                Training History ‚Äì {historyFor.name}\n              </h3>\n              {historyBusy ? (\n                <div className=\"text-center py-8 text-neon\">Loading‚Ä¶</div>\n              ) : historyLogs.length === 0 ? (\n                <div className=\"text-center py-8 opacity-70\">\n                  No training logs found.\n                </div>\n              ) : (\n                <NeonTable\n                  columns={[\n                    { header: \"Date\", accessor: \"date\" },\n                    { header: \"Topic\", accessor: \"topic\" },\n                    { header: \"Duration\", accessor: \"duration_hours\" },\n                    { header: \"Outcome\", accessor: \"outcome\" },\n                    { header: \"Notes\", accessor: \"notes\" },\n                    {\n                      header: \"Signature\",\n                      accessor: \"signature\",\n                      render: (value) => {\n                        const sig = value as string | null;\n                        return sig ? (\n                          <Image\n                            src={sig}\n                            alt=\"Signature\"\n                            width={96}\n                            height={48}\n                            className=\"w-24 h-12 object-contain bg-black/10 rounded\"\n                            unoptimized\n                          />\n                        ) : (\n                          <span className=\"opacity-50\">‚Äî</span>\n                        );\n                      },\n                    },\n                  ]}\n                  data={historyLogs}\n                />\n              )}\n              <button\n                className=\"neon-btn neon-btn-secondary mt-4\"\n                style={{ marginTop: \"1rem\" }}\n                onClick={() => setHistoryFor(null)}\n              >\n                Close\n              </button>\n            </NeonPanel>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserDialogPortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserManagementPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":85,"column":57,"nodeType":"ObjectExpression","messageId":"unsafeReturn","endLine":91,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":87,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":87,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .shift_id on an `any` value.","line":87,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .shift_id on an `any` value.","line":88,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":89,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":90,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .role_profile_id on an `any` value.","line":90,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":60},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":102,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":102,"endColumn":12,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3062,3062],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3062,3062],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":129,"column":37,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":129,"endColumn":44}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, useRef } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport NeonTable from \"@/components/NeonTable\";\nimport NeonIconButton from \"@/components/ui/NeonIconButton\";\nimport {\n  FiSave,\n  FiEdit,\n  FiUserPlus,\n  FiDownload,\n  FiUpload,\n  FiCheck,\n  FiX,\n} from \"react-icons/fi\";\nimport { useUser } from \"@/lib/useUser\";\n\ninterface User {\n  id: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n  department_id?: string;\n  role_id?: string;\n  access_level?: string;\n  phone?: string;\n  created_at?: string;\n  department_name?: string;\n  role_title?: string;\n  status?: string;\n  nationality?: string;\n  document_path?: string;\n  role_profile_id?: string;\n  is_archived?: boolean;\n  last_updated_at?: string;\n\n  is_anonymous?: boolean;\n  auth_id?: string;\n  start_date?: string;\n  is_first_aid?: boolean;\n  avatar_url?: string;\n  is_trainer?: boolean;\n  shift_id?: string;\n  shift_name?: string;\n  role_profile_name?: string;\n}\n\nexport default function UserManagementPanel() {\n  useUser();\n  const [users, setUsers] = useState<User[]>([]);\n  const [departments, setDepartments] = useState<\n    { id: string; name: string }[]\n  >([]);\n  const [roles, setRoles] = useState<\n    { id: string; title: string; department_id: string }[]\n  >([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [shiftPatterns, setShiftPatterns] = useState<\n    { id: string; name: string }[]\n  >([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    const load = async () => {\n      try {\n        // Fetch users and join shift_patterns for shift name\n        const [\n          { data: u },\n          { data: d },\n          { data: r },\n          { data: s },\n          { data: rp },\n        ] = await Promise.all([\n          supabase.from(\"users\").select(\"*, shift_id, role_profile_id\"),\n          supabase.from(\"departments\").select(\"id, name\"),\n          supabase.from(\"roles\").select(\"id, title, department_id\"),\n          supabase.from(\"shift_patterns\").select(\"id, name\"),\n          supabase.from(\"role_profiles\").select(\"id, name\"),\n        ]);\n        // Map shift name and role profile name into user object\n        const usersWithNames = (u || []).map((user) => ({\n          ...user,\n          shift_name: s?.find((sp) => sp.id === user.shift_id)?.name || \"\",\n          shift_id: user.shift_id || \"\",\n          role_profile_name:\n            rp?.find((rp) => rp.id === user.role_profile_id)?.name || \"\",\n        }));\n        setUsers(usersWithNames);\n        setDepartments(d || []);\n        setRoles(r || []);\n        setShiftPatterns(s || []);\n      } catch {\n        // Optionally set error state here\n      } finally {\n        setLoading(false);\n      }\n    };\n    load();\n  }, []);\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setSelectedUser(null);\n    setIsAddMode(false);\n  };\n\n  const allowedAccessLevels = [\"User\", \"Manager\", \"Admin\"];\n  const cleanUserFields = (user: User): User => ({\n    ...user,\n    department_id: user.department_id || undefined,\n    role_id: user.role_id || undefined,\n    shift_id: user.shift_id || undefined,\n    role_profile_id: user.role_profile_id || undefined,\n    access_level: allowedAccessLevels.includes((user.access_level || \"\").trim())\n      ? (user.access_level || \"\").trim()\n      : \"User\",\n  });\n\n  const handleSave = async () => {\n    if (!selectedUser) return;\n    setSaving(true);\n    const cleanedUser = cleanUserFields(selectedUser);\n    if (isAddMode) {\n      // Add new user\n      const { error: userErr, data: newUser } = await supabase\n        .from(\"users\")\n        .insert({\n          first_name: cleanedUser.first_name,\n          last_name: cleanedUser.last_name,\n          email: cleanedUser.email,\n          department_id: cleanedUser.department_id,\n          role_id: cleanedUser.role_id,\n          access_level: cleanedUser.access_level,\n          phone: cleanedUser.phone,\n          shift_id: cleanedUser.shift_id,\n          role_profile_id: cleanedUser.role_profile_id,\n        })\n        .select()\n        .single();\n      if (userErr) {\n        console.error(\"Failed to add user:\", userErr);\n        setSaving(false);\n        return;\n      }\n      setUsers([...users, newUser]);\n    } else {\n      // Edit existing user\n      const { error: userErr } = await supabase\n        .from(\"users\")\n        .update({\n          first_name: cleanedUser.first_name,\n          last_name: cleanedUser.last_name,\n          email: cleanedUser.email,\n          department_id: cleanedUser.department_id,\n          role_id: cleanedUser.role_id,\n          access_level: cleanedUser.access_level,\n          phone: cleanedUser.phone,\n          shift_id: cleanedUser.shift_id,\n          role_profile_id: cleanedUser.role_profile_id,\n        })\n        .eq(\"id\", cleanedUser.id);\n      if (userErr) {\n        console.error(\"Failed to update user:\", userErr);\n        setSaving(false);\n        return;\n      }\n      setUsers(\n        users.map((u) =>\n          u.id === cleanedUser.id ? { ...u, ...cleanedUser } : u,\n        ),\n      );\n    }\n    setSaving(false);\n    setShowSuccess(true);\n    setTimeout(() => {\n      setShowSuccess(false);\n      handleCloseDialog();\n    }, 1000);\n  };\n\n  // CSV Export handler\n  const handleExportUsers = () => {\n    if (!users.length) return;\n    const csvRows = users.map((u) => ({\n      id: u.id,\n      email: u.email,\n      first_name: u.first_name || \"\",\n      last_name: u.last_name || \"\",\n      department_id: u.department_id || \"\",\n      role_id: u.role_id || \"\",\n      access_level: u.access_level || \"\",\n      phone: u.phone || \"\",\n    }));\n    const csv = [\n      \"id,email,first_name,last_name,department_id,role_id,access_level,phone\",\n      ...csvRows.map((row) =>\n        Object.values(row)\n          .map((val) => `\"${String(val).replace(/\"/g, '\"\"')}\"`)\n          .join(\",\"),\n      ),\n    ].join(\"\\n\");\n    const blob = new Blob([csv], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"users.csv\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // CSV Upload handler\n  const handleImportUsers = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    const text = await file.text();\n    // Use csv-parse for robust parsing\n    let usersToImport: Record<string, unknown>[] = [];\n    try {\n      const csvParse = (await import(\"csv-parse/sync\")).parse;\n      usersToImport = csvParse(text, { columns: true, skip_empty_lines: true });\n      // Convert booleans and clean up fields\n      usersToImport = usersToImport.map((u) => ({\n        ...u,\n        is_first_aid: u.is_first_aid === \"true\" || u.is_first_aid === true,\n        is_trainer: u.is_trainer === \"true\" || u.is_trainer === true,\n      }));\n    } catch (err) {\n      console.error(\"CSV parse error:\", err);\n      return;\n    }\n    await supabase.from(\"users\").upsert(usersToImport, { onConflict: \"id\" });\n    const { data: u } = await supabase.from(\"users\").select(\"*\");\n    setUsers(u || []);\n  };\n\n  const userTableColumns = [\n    { header: \"Name\", accessor: \"name\" },\n    { header: \"Department\", accessor: \"department_name\" },\n    { header: \"Role\", accessor: \"role_title\" },\n    { header: \"Access\", accessor: \"access_level\" },\n    { header: \"Role Profile\", accessor: \"role_profile_name\" },\n    { header: \"Shift\", accessor: \"shift_name\" },\n    { header: \"Email\", accessor: \"email\" },\n    { header: \"Start Date\", accessor: \"start_date\" },\n    { header: \"First Aid\", accessor: \"is_first_aid\" },\n    { header: \"Trainer\", accessor: \"is_trainer\" },\n  ];\n\n  if (loading) return <p className=\"neon-loading\">Loading users...</p>;\n\n  return (\n    <>\n      <div className=\"neon-table-panel\">\n        <div className=\"neon-table-scroll\">\n          <NeonTable\n            columns={userTableColumns}\n            data={users.map((user) => {\n              const department = departments.find(\n                (d) => d.id === user.department_id,\n              );\n              const role = roles.find((r) => r.id === user.role_id);\n              return {\n                id: user.id,\n                name: (\n                  <button\n                    className=\"neon-link neon-btn-reset\"\n                    style={{\n                      background: \"none\",\n                      border: \"none\",\n                      color: \"var(--neon)\",\n                      cursor: \"pointer\",\n                      padding: 0,\n                      font: \"inherit\",\n                    }}\n                    onClick={() => {\n                      setSelectedUser(user);\n                      setIsAddMode(false);\n                      setDialogOpen(true);\n                    }}\n                  >\n                    {`${user.first_name || \"\"} ${user.last_name || \"\"}`.trim() ||\n                      \"‚Äî\"}\n                  </button>\n                ),\n                department_name: department ? department.name : \"‚Äî\",\n                role_title: role ? role.title : \"‚Äî\",\n                status: user.status || \"‚Äî\",\n                access_level: user.access_level,\n                role_profile_name: user.role_profile_name || \"‚Äî\",\n                shift_name: user.shift_name || \"‚Äî\",\n                email: user.email,\n                start_date: user.start_date || \"‚Äî\",\n                is_first_aid: user.is_first_aid ? (\n                  <FiCheck color=\"#39ff14\" />\n                ) : (\n                  <FiX color=\"#ea1c1c\" />\n                ),\n                is_trainer: user.is_trainer ? (\n                  <FiCheck color=\"#39ff14\" />\n                ) : (\n                  <FiX color=\"#ea1c1c\" />\n                ),\n                actions: (\n                  <NeonIconButton\n                    icon={<FiEdit />}\n                    title=\"Edit User\"\n                    variant=\"edit\"\n                    onClick={() => {\n                      setSelectedUser(user);\n                      setIsAddMode(false);\n                      setDialogOpen(true);\n                    }}\n                  />\n                ),\n              };\n            })}\n            toolbar={\n              <>\n                <NeonIconButton\n                  icon={<FiUserPlus />}\n                  title=\"Add User\"\n                  variant=\"add\"\n                  onClick={() => {\n                    setSelectedUser({\n                      id: \"\",\n                      email: \"\",\n                      first_name: \"\",\n                      last_name: \"\",\n                      department_id: \"\",\n                      role_id: \"\",\n                      access_level: \"User\",\n                      phone: \"\",\n                    });\n                    setIsAddMode(true);\n                    setDialogOpen(true);\n                  }}\n                />\n                <NeonIconButton\n                  icon={<FiDownload />}\n                  title=\"Download Users CSV\"\n                  variant=\"download\"\n                  onClick={handleExportUsers}\n                />\n                <label style={{ display: \"inline-block\" }}>\n                  <NeonIconButton\n                    icon={<FiUpload />}\n                    title=\"Upload Users CSV\"\n                    variant=\"upload\"\n                    as=\"button\"\n                    onClick={() => fileInputRef.current?.click()}\n                  />\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".csv\"\n                    style={{ display: \"none\" }}\n                    onChange={handleImportUsers}\n                  />\n                </label>\n              </>\n            }\n          />\n        </div>\n      </div>\n      {/* Dialog overlays on top of all content by rendering directly in the tree */}\n      {dialogOpen && (\n        <div className=\"ui-dialog-overlay\">\n          <div className=\"ui-dialog-content max-w-4xl\">\n            <div\n              className=\"neon-form-title\"\n              style={{ marginBottom: \"1.25rem\" }}\n            >\n              {isAddMode ? \"Add User\" : \"Edit User\"}\n            </div>\n            {selectedUser && (\n              <div\n                className=\"neon-form-grid neon-form-padding\"\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: \"repeat(3, minmax(0, 1fr))\",\n                  gap: \"1.5rem\",\n                  rowGap: \"2rem\",\n                  alignItems: \"start\",\n                }}\n              >\n                {/* first_name */}\n                <div>\n                  <label className=\"neon-label\">First Name</label>\n                  <input\n                    className=\"neon-input\"\n                    value={selectedUser.first_name || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        first_name: e.target.value,\n                      })\n                    }\n                    placeholder=\"First Name\"\n                  />\n                </div>\n                {/* last_name */}\n                <div>\n                  <label className=\"neon-label\">Last Name</label>\n                  <input\n                    className=\"neon-input\"\n                    value={selectedUser.last_name || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        last_name: e.target.value,\n                      })\n                    }\n                    placeholder=\"Last Name\"\n                  />\n                </div>\n                {/* email */}\n                <div>\n                  <label className=\"neon-label\">Email</label>\n                  <input\n                    className=\"neon-input\"\n                    value={selectedUser.email || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        email: e.target.value,\n                      })\n                    }\n                    placeholder=\"Email\"\n                  />\n                </div>\n                {/* department_id */}\n                <div>\n                  <label className=\"neon-label\">Department</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.department_id || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        department_id: e.target.value,\n                        role_id: \"\",\n                      })\n                    }\n                  >\n                    <option value=\"\">Select Department</option>\n                    {departments.map((d) => (\n                      <option key={d.id} value={d.id}>\n                        {d.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                {/* role_id */}\n                <div>\n                  <label className=\"neon-label\">Role</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.role_id || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        role_id: e.target.value,\n                      })\n                    }\n                  >\n                    <option value=\"\">Select Role</option>\n                    {roles\n                      .filter(\n                        (r) => r.department_id === selectedUser.department_id,\n                      )\n                      .map((r) => (\n                        <option key={r.id} value={r.id}>\n                          {r.title}\n                        </option>\n                      ))}\n                  </select>\n                </div>\n                {/* access_level */}\n                <div>\n                  <label className=\"neon-label\">Access Level</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.access_level || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        access_level: e.target.value,\n                      })\n                    }\n                  >\n                    <option value=\"User\">User</option>\n                    <option value=\"Manager\">Manager</option>\n                    <option value=\"Admin\">Admin</option>\n                  </select>\n                </div>\n                {/* phone */}\n                <div>\n                  <label className=\"neon-label\">Phone</label>\n                  <input\n                    className=\"neon-input\"\n                    value={selectedUser.phone || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        phone: e.target.value,\n                      })\n                    }\n                    placeholder=\"Phone\"\n                  />\n                </div>\n                {/* nationality */}\n                <div>\n                  <label className=\"neon-label\">Nationality</label>\n                  <input\n                    className=\"neon-input\"\n                    value={selectedUser.nationality || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        nationality: e.target.value,\n                      })\n                    }\n                    placeholder=\"Nationality\"\n                  />\n                </div>\n                {/* is_first_aid */}\n                <div>\n                  <label className=\"neon-label\">First Aid</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.is_first_aid ? \"true\" : \"false\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        is_first_aid: e.target.value === \"true\",\n                      })\n                    }\n                  >\n                    <option value=\"false\">No</option>\n                    <option value=\"true\">Yes</option>\n                  </select>\n                </div>\n                {/* is_trainer */}\n                <div>\n                  <label className=\"neon-label\">Trainer</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.is_trainer ? \"true\" : \"false\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        is_trainer: e.target.value === \"true\",\n                      })\n                    }\n                  >\n                    <option value=\"false\">No</option>\n                    <option value=\"true\">Yes</option>\n                  </select>\n                </div>\n                {/* shift_id */}\n                <div>\n                  <label className=\"neon-label\">Shift</label>\n                  <select\n                    className=\"neon-input\"\n                    value={selectedUser.shift_id || \"\"}\n                    onChange={(e) => {\n                      const selectedPattern = shiftPatterns?.find(\n                        (s) => s.id === e.target.value,\n                      );\n                      setSelectedUser({\n                        ...selectedUser,\n                        shift_id: e.target.value,\n                        shift_name: selectedPattern ? selectedPattern.name : \"\",\n                      });\n                    }}\n                  >\n                    <option value=\"\">Select Shift</option>\n                    {shiftPatterns?.map((s) => (\n                      <option key={s.id} value={s.id}>\n                        {s.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                {/* start_date */}\n                <div>\n                  <label className=\"neon-label\">Start Date</label>\n                  <input\n                    className=\"neon-input\"\n                    type=\"date\"\n                    value={selectedUser.start_date || \"\"}\n                    onChange={(e) =>\n                      setSelectedUser({\n                        ...selectedUser,\n                        start_date: e.target.value,\n                      })\n                    }\n                    placeholder=\"Start Date\"\n                  />\n                </div>\n                {showSuccess && (\n                  <div\n                    className=\"md:col-span-3 lg:col-span-3\"\n                    style={{ gridColumn: \"span 3\", marginTop: \"0.5rem\" }}\n                  >\n                    <p className=\"neon-success\">‚úÖ User saved successfully!</p>\n                  </div>\n                )}\n              </div>\n            )}\n            <div\n              className=\"neon-panel-actions\"\n              style={{\n                display: \"flex\",\n                gap: \"1rem\",\n                justifyContent: \"flex-end\",\n                marginTop: \"2rem\",\n              }}\n            >\n              <NeonIconButton\n                variant=\"save\"\n                icon={<FiSave />}\n                title={saving ? \"Saving...\" : \"Save Changes\"}\n                onClick={handleSave}\n                disabled={saving}\n              />\n              <button\n                className=\"neon-btn neon-btn-danger\"\n                onClick={handleCloseDialog}\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserPermissionsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":75,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2440,2440],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2440,2440],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// components/user/UserPermissionsPanel.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface Permission {\n  id: string;\n  code: string;\n  label: string;\n  description: string;\n}\n\ninterface Props {\n  authId: string; // Supabase auth.users.id of the user being edited\n  currentUserPermissions?: string[]; // Optional: permissions of the editor (for access check)\n}\n\n// The related row shape that comes back from: permission:permissions(code)\ntype PermissionCodeOnly = { code: string } | null;\ntype UserPermissionRow = {\n  permission_id: string;\n  // Depending on the relationship config, Supabase can return a single object or an array\n  permission: PermissionCodeOnly | PermissionCodeOnly[] | null;\n};\n\nfunction toCodes(\n  input: PermissionCodeOnly | PermissionCodeOnly[] | null | undefined,\n): string[] {\n  const arr = Array.isArray(input) ? input : [input];\n  return arr\n    .filter(\n      (x): x is { code: string } =>\n        !!x && typeof x === \"object\" && typeof x.code === \"string\",\n    )\n    .map((x) => x.code);\n}\n\nexport default function UserPermissionsPanel({\n  authId,\n  currentUserPermissions = [],\n}: Props) {\n  const [permissions, setPermissions] = useState<Permission[]>([]);\n  const [userPermissionCodes, setUserPermissionCodes] = useState<string[]>([]);\n  const [saving, setSaving] = useState(false);\n\n  const canEdit =\n    currentUserPermissions.includes(\"grant_permissions\") ||\n    currentUserPermissions.includes(\"manage_users\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: allPerms, error: allPermsError } = await supabase\n        .from(\"permissions\")\n        .select<\"id,code,label,description\">(\"id,code,label,description\")\n        .order(\"label\");\n\n      const { data: userPerms, error: userPermsError } = await supabase\n        .from(\"user_permissions\")\n        .select(\"permission_id, permission:permissions(code)\")\n        .eq(\"auth_id\", authId)\n        .returns<UserPermissionRow[]>();\n\n      // (Optional) You can surface these errors in your UI if you like\n      if (allPermsError) console.error(allPermsError);\n      if (userPermsError) console.error(userPermsError);\n\n      // FIXED: robust permission code extraction\n      const codes = (userPerms ?? []).flatMap((up) => toCodes(up.permission));\n\n      setPermissions((allPerms as Permission[]) || []);\n      setUserPermissionCodes(codes);\n    };\n\n    fetchData();\n  }, [authId]);\n\n  const handleToggle = async (code: string, checked: boolean) => {\n    if (!canEdit) return;\n    setSaving(true);\n\n    try {\n      const perm = permissions.find((p) => p.code === code);\n      if (!perm) return;\n\n      if (checked) {\n        await supabase\n          .from(\"user_permissions\")\n          .upsert({ auth_id: authId, permission_id: perm.id });\n      } else {\n        await supabase\n          .from(\"user_permissions\")\n          .delete()\n          .eq(\"auth_id\", authId)\n          .eq(\"permission_id\", perm.id);\n      }\n\n      setUserPermissionCodes((prev) =>\n        checked ? [...prev, code] : prev.filter((c) => c !== code),\n      );\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"mt-8\">\n      <h3 className=\"text-lg font-semibold mb-4 text-orange-600\">\n        Additional Permissions\n      </h3>\n\n      <div className=\"space-y-3\">\n        {permissions.map((perm) => (\n          <label key={perm.code} className=\"flex items-start gap-2 text-sm\">\n            <input\n              type=\"checkbox\"\n              className=\"mt-1\"\n              checked={userPermissionCodes.includes(perm.code)}\n              disabled={!canEdit || saving}\n              onChange={(e) => handleToggle(perm.code, e.target.checked)}\n            />\n            <span>\n              <span className=\"font-medium text-teal-800\">{perm.label}</span>\n              <br />\n              <span className=\"text-gray-600\">{perm.description}</span>\n            </span>\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserProfileCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":38,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":60,"endColumn":10,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[860,860],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[860,860],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":59,"column":21,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":59,"endColumn":48}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Link from \"next/link\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport {\n  FiUser,\n  FiPhone,\n  FiMail,\n  FiShield,\n  FiBell,\n  FiLogIn,\n  FiClock,\n} from \"react-icons/fi\";\n\ninterface UserProfileCardProps {\n  authId: string;\n}\n\ntype Access = \"Admin\" | \"Manager\" | \"User\";\n\ntype UserRow = {\n  first_name: string | null;\n  last_name: string | null;\n  phone: string | null;\n  email: string | null;\n  access_level: Access | null;\n};\n\nexport default function UserProfileCard({ authId }: UserProfileCardProps) {\n  const [user, setUser] = useState<UserRow | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [err, setErr] = useState<string | null>(null);\n  const [shift, setShift] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    (async () => {\n      setLoading(true);\n      setErr(null);\n      const { data, error } = await supabase\n        .from(\"users\")\n        .select(\"first_name, last_name, phone, email, access_level\")\n        .eq(\"auth_id\", authId)\n        .maybeSingle();\n\n      if (!isMounted) return;\n      if (error) setErr(error.message);\n      setUser(data ?? null);\n      setLoading(false);\n\n      // Fetch assigned shift\n      const { data: shiftData, error: shiftError } = await supabase\n        .from(\"user_shifts\")\n        .select(\"shift_id\")\n        .eq(\"auth_id\", authId)\n        .maybeSingle();\n      if (shiftError) setShift(null);\n      else setShift(shiftData?.shift_id ?? null);\n    })();\n    return () => {\n      isMounted = false;\n    };\n  }, [authId]);\n\n  if (loading) {\n    return (\n      <div className=\"user-profile-card\">\n        <p>Loading profile‚Ä¶</p>\n      </div>\n    );\n  }\n\n  if (err || !user) {\n    return (\n      <div className=\"user-profile-card\">\n        <p>{err ? `Error: ${err}` : \"User not found.\"}</p>\n        <div className=\"actions\">\n          <Link href=\"/login\" className=\"neon-btn-sm\" aria-label=\"Log in\">\n            <FiLogIn className=\"neon-icon\" />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const fullName =\n    [user.first_name, user.last_name].filter(Boolean).join(\" \") || \"‚Äî\";\n  const phone = user.phone || \"‚Äî\";\n  const email = user.email || \"‚Äî\";\n  const level = (user.access_level as Access) || \"User\";\n\n  const dashHref =\n    level === \"Admin\"\n      ? \"/admin/dashboard\"\n      : level === \"Manager\"\n        ? \"/manager/dashboard\"\n        : \"/user/dashboard\";\n\n  return (\n    <div className=\"user-profile-card\">\n      <div\n        className=\"row\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"2rem\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <span\n          className=\"pair\"\n          style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\n        >\n          <FiUser className=\"neon-icon\" />\n          <span className=\"label\">Name:</span> {fullName}\n        </span>\n        <span\n          className=\"pair\"\n          style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\n        >\n          <FiPhone className=\"neon-icon\" />\n          <span className=\"label\">Phone:</span> {phone}\n        </span>\n        <span\n          className=\"pair\"\n          style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\n        >\n          <FiMail className=\"neon-icon\" />\n          <span className=\"label\">Email:</span> {email}\n        </span>\n        <span\n          className=\"pair\"\n          style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\n        >\n          <FiShield className=\"neon-icon\" />\n          <span className=\"label\">Access Level:</span> {level}\n        </span>\n        <span\n          className=\"pair\"\n          style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}\n        >\n          <FiClock className=\"neon-icon\" />\n          <span className=\"label\">Shift:</span> {shift || \"‚Äî\"}\n        </span>\n        <div\n          className=\"actions\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"1rem\",\n            marginLeft: \"auto\",\n          }}\n        >\n          {/* Raise an Issue */}\n          <Link\n            href=\"/turkus/issues/add\"\n            className=\"neon-btn-sm neon-btn-orange\"\n            aria-label=\"Raise an Issue\"\n          >\n            <FiBell className=\"neon-icon\" />\n          </Link>\n\n          {/* Dashboard */}\n          <Link\n            href={dashHref}\n            className=\"neon-btn-sm\"\n            aria-label=\"Return to dashboard\"\n          >\n            <FiUser className=\"neon-icon\" />\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserTrainingRequest.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":37,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":37,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1124,1124],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1124,1124],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'selectedModule' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":23}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedModule' is assigned a value but never used.","line":62,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useState, useEffect } from \"react\";\nimport NeonForm from \"@/components/NeonForm\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ninterface UserTrainingRequestProps {\n  userId: string;\n}\n\ninterface ModuleOption {\n  id: string;\n  name: string;\n}\n\nexport default function UserTrainingRequest({\n  userId,\n}: UserTrainingRequestProps) {\n  const [module, setModule] = useState(\"\");\n  const [reason, setReason] = useState(\"\");\n  const [other, setOther] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [modules, setModules] = useState<ModuleOption[]>([]);\n  const [loadingModules, setLoadingModules] = useState(true);\n\n  useEffect(() => {\n    const fetchModules = async () => {\n      setLoadingModules(true);\n      const { data, error } = await supabase\n        .from(\"modules\")\n        .select(\"id, name\")\n        .order(\"name\");\n      if (!error && data) setModules(data);\n      setLoadingModules(false);\n    };\n    fetchModules();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setError(null);\n    setSuccess(false);\n\n    const { error } = await supabase\n      .from(\"training_requests\")\n      .insert([{ user_id: userId, module, reason, other }]);\n\n    setSubmitting(false);\n    if (error) {\n      setError(error.message);\n    } else {\n      setSuccess(true);\n      setModule(\"\");\n      setReason(\"\");\n      setOther(\"\");\n    }\n  };\n\n  // Find the selected module's name for display in the search box (if needed)\n  const selectedModule = modules.find((m) => m.id === module);\n\n  return (\n    <NeonForm\n      title=\"Request Training\"\n      onSubmit={handleSubmit}\n      submitLabel={submitting ? \"Submitting...\" : \"Submit Request\"}\n    >\n      {/* Module Name */}\n      <label className=\"neon-form-title\">\n        Module Name\n        <select\n          className=\"neon-input\"\n          value={module}\n          onChange={(e) => setModule(e.target.value)}\n          required\n          disabled={loadingModules}\n        >\n          <option value=\"\">Select a module...</option>\n          {modules.map((m) => (\n            <option key={m.id} value={m.id}>\n              {m.name}\n            </option>\n          ))}\n        </select>\n      </label>\n      {/* Reason */}\n      <label className=\"neon-form-title\">\n        Reason\n        <textarea\n          className=\"neon-input\"\n          value={reason}\n          onChange={(e) => setReason(e.target.value)}\n          required\n        />\n      </label>\n      {/* Other Course/Training */}\n      <label className=\"neon-form-title\">\n        Other Course/Training (if not listed above)\n        <textarea\n          className=\"neon-input\"\n          value={other}\n          onChange={(e) => setOther(e.target.value)}\n          placeholder=\"Describe any other course or training you wish to request...\"\n        />\n      </label>\n      {/* Feedback Messages */}\n      {success && (\n        <div className=\"neon-success text-base\">Request submitted!</div>\n      )}\n      {error && <div className=\"neon-error text-base\">{error}</div>}\n    </NeonForm>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/components/user/UserView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/context/UserContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":75,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":75,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1853,1853],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1853,1853],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":79,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":79,"endColumn":18,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1989,1989],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1989,1989],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n  ReactNode,\n} from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\n\ntype AppUser = {\n  id: string;\n  email: string | null;\n  department_id?: string | null;\n  first_name?: string | null;\n  last_name?: string | null;\n  avatar_url?: string | null;\n  access_level?: string | null;\n  auth_id?: string; // <-- add auth_id for compatibility\n};\n\ntype Ctx = { user: AppUser | null; loading: boolean; error?: string | null };\n\nconst UserContext = createContext<Ctx>({ user: null, loading: true });\n\nexport function UserProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AppUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  async function loadUser() {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const {\n        data: { user: authUser },\n        error: authErr,\n      } = await supabase.auth.getUser();\n      if (authErr) throw authErr;\n\n      if (!authUser) {\n        setUser(null);\n        return;\n      }\n\n      const { data, error: profileErr } = await supabase\n        .from(\"users\")\n        .select(\n          \"id,email,department_id,first_name,last_name,avatar_url,access_level\",\n        ) // select only what you need\n        .eq(\"auth_id\", authUser.id)\n        .single();\n\n      if (profileErr) throw profileErr;\n\n      // Fallback: at least return auth email if row missing\n      setUser(data ?? { id: authUser.id, email: authUser.email ?? null });\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        setError(e.message);\n      } else {\n        setError(\"Failed to load user\");\n      }\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    // initial load\n    loadUser();\n\n    // keep in sync with sign-in/out/token refresh\n    const { data: sub } = supabase.auth.onAuthStateChange(() => {\n      loadUser();\n    });\n\n    return () => {\n      sub.subscription.unsubscribe();\n    };\n  }, []);\n\n  const value = useMemo(\n    () => ({ user, loading, error }),\n    [user, loading, error],\n  );\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n}\n\nexport const useUser = () => useContext(UserContext);\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/getCategories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/getChildDepartments.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":23,"column":39,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":23,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe spread of an `any[]` array type.","line":24,"column":22,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":24,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":27,"column":27,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":27,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/getChildDepartments.ts\nimport { supabase } from \"./supabase-client\";\n\n/**\n * Recursively fetches all child department IDs under a given department ID.\n */\nexport async function getChildDepartments(\n  departmentId: string,\n): Promise<string[]> {\n  const allChildren: string[] = [];\n\n  async function fetchChildren(id: string) {\n    const { data, error } = await supabase\n      .from(\"departments\")\n      .select(\"id\")\n      .eq(\"parent_id\", id);\n\n    if (error) {\n      console.error(\"Failed to fetch child departments:\", error);\n      return;\n    }\n\n    const children = data?.map((d) => d.id) || [];\n    allChildren.push(...children);\n\n    for (const childId of children) {\n      await fetchChildren(childId);\n    }\n  }\n\n  await fetchChildren(departmentId);\n  return [departmentId, ...allChildren]; // include the root too\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/getPolicies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/getWorkInstructions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/middleware.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async function 'updateSession' has no 'await' expression.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":3,"endColumn":36,"suggestions":[{"messageId":"removeAsync","fix":{"range":[52,58],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\n\nexport async function updateSession() {\n  const supabaseResponse = NextResponse.next();\n\n  // If session/cookie management is needed, use standard fetch API or Next.js middleware utilities instead.\n\n  return supabaseResponse;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/resend.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/sqlTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/supabase-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/supabase-server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/supabase/modules.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":35,"column":11,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":35,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":47,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":57,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .prerequisites on an `any` value.","line":49,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":50,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .tags on an `any` value.","line":50,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":50,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":51,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":51,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .group_id on an `any` value.","line":51,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":51,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .learning_objectives on an `any` value.","line":52,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":53,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":53,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .estimated_duration on an `any` value.","line":53,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":54,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":54,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .delivery_format on an `any` value.","line":54,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":54,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":55,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":55,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .target_audience on an `any` value.","line":55,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":56,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":56,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .thumbnail_url on an `any` value.","line":56,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":56,"endColumn":38}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/lib/supabase-client\";\n\nexport type Module = {\n  id: string;\n  name: string;\n  description: string;\n  version: number;\n  group_id: string;\n  learning_objectives: string;\n  estimated_duration: string;\n  delivery_format: string;\n  target_audience: string;\n  prerequisites: string[];\n  thumbnail_url: string;\n  tags: string[];\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport async function fetchModules(): Promise<Pick<Module, \"id\" | \"name\">[]> {\n  const { data, error } = await supabase\n    .from(\"modules\")\n    .select(\"id, name\")\n    .order(\"name\", { ascending: true });\n\n  if (error) {\n    console.error(\"Error fetching modules:\", error);\n    return [];\n  }\n\n  return data || [];\n}\n\nexport async function fetchModuleById(id: string): Promise<Module | null> {\n  const { data, error } = await supabase\n    .from(\"modules\")\n    .select(\"*\")\n    .eq(\"id\", id)\n    .single();\n\n  if (error) {\n    console.error(\"Error fetching module:\", error);\n    return null;\n  }\n\n  // Defensive fallback to avoid nulls crashing form\n  return {\n    ...data,\n    prerequisites: data.prerequisites ?? [],\n    tags: data.tags ?? [],\n    group_id: data.group_id ?? \"\",\n    learning_objectives: data.learning_objectives ?? \"\",\n    estimated_duration: data.estimated_duration ?? \"\",\n    delivery_format: data.delivery_format ?? \"\",\n    target_audience: data.target_audience ?? \"\",\n    thumbnail_url: data.thumbnail_url ?? \"\",\n  };\n}\n\nexport async function updateModule(\n  id: string,\n  moduleData: Module,\n): Promise<{ error: unknown }> {\n  const { error } = await supabase\n    .from(\"modules\")\n    .update({\n      name: moduleData.name,\n      description: moduleData.description,\n      version: moduleData.version,\n      group_id: moduleData.group_id,\n      learning_objectives: moduleData.learning_objectives,\n      estimated_duration: moduleData.estimated_duration,\n      delivery_format: moduleData.delivery_format,\n      target_audience: moduleData.target_audience,\n      prerequisites: moduleData.prerequisites,\n      thumbnail_url: moduleData.thumbnail_url,\n      tags: moduleData.tags,\n    })\n    .eq(\"id\", id);\n\n  if (error) {\n    console.error(\"Error updating module:\", error);\n  }\n\n  return { error };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/syncRoleProfileAssignments.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":12,"column":15,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":12,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":12,"column":24,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":12,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":12,"column":33,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":25,"column":17,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":25,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":56,"column":45,"nodeType":"Property","messageId":"anyAssignment","endLine":56,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":47,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":62,"column":48,"nodeType":"Property","messageId":"anyAssignment","endLine":62,"endColumn":76}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/lib/supabase-client\";\n\nexport async function syncRoleProfileAssignments(auth_id: string) {\n  const { data: user, error: userErr } = await supabase\n    .from(\"users\")\n    .select(\"id, role_id, department_id\")\n    .eq(\"auth_id\", auth_id)\n    .single();\n\n  if (userErr || !user) throw new Error(\"User not found.\");\n\n  const { id: user_id, role_id, department_id } = user;\n\n  const { data: assignments } = await supabase\n    .from(\"role_profile_assignments\")\n    .select(\"role_profile_id, user_id, role_id, department_id\");\n\n  const profileIds = (assignments || [])\n    .filter(\n      (a) =>\n        a.user_id === user_id ||\n        a.role_id === role_id ||\n        a.department_id === department_id,\n    )\n    .map((a) => a.role_profile_id);\n\n  if (profileIds.length === 0) return { inserted: 0 };\n\n  const [{ data: modules }, { data: documents }, { data: behaviours }] =\n    await Promise.all([\n      supabase\n        .from(\"role_profile_modules\")\n        .select(\"module_id\")\n        .in(\"role_profile_id\", profileIds),\n      supabase\n        .from(\"role_profile_documents\")\n        .select(\"document_id\")\n        .in(\"role_profile_id\", profileIds),\n      supabase\n        .from(\"role_profile_behaviours\")\n        .select(\"behaviour_id\")\n        .in(\"role_profile_id\", profileIds),\n    ]);\n\n  type AssignmentRow = {\n    auth_id: string;\n    type: \"module\" | \"document\" | \"behaviour\";\n    module_id?: string;\n    document_id?: string;\n    behaviour_id?: string;\n  };\n\n  const allRows: AssignmentRow[] = [];\n\n  for (const m of modules || []) {\n    allRows.push({ auth_id, type: \"module\", module_id: m.module_id });\n  }\n  for (const d of documents || []) {\n    allRows.push({ auth_id, type: \"document\", document_id: d.document_id });\n  }\n  for (const b of behaviours || []) {\n    allRows.push({ auth_id, type: \"behaviour\", behaviour_id: b.behaviour_id });\n  }\n\n  const { data: existing } = await supabase\n    .from(\"user_training_assignments\")\n    .select(\"type, module_id, document_id, behaviour_id\")\n    .eq(\"auth_id\", auth_id);\n\n  const key = (r: AssignmentRow) =>\n    `${r.type}:${r.module_id || r.document_id || r.behaviour_id}`;\n  const existingKeys = new Set(\n    (existing || []).map((r) => key(r as AssignmentRow)),\n  );\n  const toInsert = allRows.filter((r) => !existingKeys.has(key(r)));\n\n  if (toInsert.length > 0) {\n    await supabase.from(\"user_training_assignments\").insert(toInsert);\n  }\n\n  return { inserted: toInsert.length };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/useUser.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":49,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":49,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1174,1174],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1174,1174],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// lib/useUser.ts\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"./supabase-client\";\n\nexport function useUser() {\n  const [user, setUser] = useState<{\n    id?: string;\n    auth_id: string;\n    access_level: string; // changed from number to string\n    department_id: string;\n    first_name?: string;\n    last_name?: string;\n  } | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data: { user: authUser },\n        error: sessionError,\n      } = await supabase.auth.getUser();\n\n      if (sessionError || !authUser) {\n        setUser(null);\n        setLoading(false);\n        return;\n      }\n\n      const { data, error } = await supabase\n        .from(\"users\")\n        .select(\n          \"id, auth_id, access_level, department_id, first_name, last_name\",\n        )\n        .eq(\"auth_id\", authUser.id)\n        .single();\n\n      if (error || !data) {\n        setUser(null);\n      } else {\n        // Ensure access_level is a string\n        setUser({ ...data, access_level: String(data.access_level) });\n      }\n\n      setLoading(false);\n    };\n\n    fetchUser();\n  }, []);\n\n  return { user, loading };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/utils/assignDepartmentTraining.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":16,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":16,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":42,"column":65,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":42,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":64,"column":59,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":64,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":69,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":69,"endColumn":33}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/lib/supabase-client\";\n\nexport async function assignDepartmentTrainingForUser(auth_id: string) {\n  // 1. Get user's department\n  const { data: user, error: userErr } = await supabase\n    .from(\"users\")\n    .select(\"id, department_id\")\n    .eq(\"id\", auth_id)\n    .single();\n\n  if (!user?.department_id || userErr) {\n    console.error(\"User fetch or missing department error:\", userErr);\n    return;\n  }\n\n  const departmentId = user.department_id;\n\n  // 2. Get modules + documents for department\n  const [{ data: modules, error: modErr }, { data: documents, error: docErr }] =\n    await Promise.all([\n      supabase\n        .from(\"department_modules\")\n        .select(\"module_id\")\n        .eq(\"department_id\", departmentId),\n      supabase\n        .from(\"department_documents\")\n        .select(\"document_id\")\n        .eq(\"department_id\", departmentId),\n    ]);\n\n  if (modErr || docErr) {\n    console.error(\"Error fetching department training:\", modErr || docErr);\n    return;\n  }\n\n  // 3. Get already completed modules\n  const { data: existingModules } = await supabase\n    .from(\"module_completions\")\n    .select(\"module_id\")\n    .eq(\"auth_id\", auth_id);\n\n  const existingModuleIds = new Set(existingModules?.map((m) => m.module_id));\n  const newModuleAssignments = modules\n    ?.filter((m) => !existingModuleIds.has(m.module_id))\n    .map((m) => ({\n      auth_id,\n      module_id: m.module_id,\n      status: \"not_started\",\n    }));\n\n  if (newModuleAssignments?.length > 0) {\n    const { error: insertModErr } = await supabase\n      .from(\"module_completions\")\n      .insert(newModuleAssignments);\n    if (insertModErr) console.error(\"Module assignment error:\", insertModErr);\n  }\n\n  // 4. Get already completed documents\n  const { data: existingDocs } = await supabase\n    .from(\"document_completions\")\n    .select(\"document_id\")\n    .eq(\"auth_id\", auth_id);\n\n  const existingDocIds = new Set(existingDocs?.map((d) => d.document_id));\n  const newDocAssignments = documents\n    ?.filter((d) => !existingDocIds.has(d.document_id))\n    .map((d) => ({\n      auth_id,\n      document_id: d.document_id,\n      status: \"not_started\",\n    }));\n\n  if (newDocAssignments?.length > 0) {\n    const { error: insertDocErr } = await supabase\n      .from(\"document_completions\")\n      .insert(newDocAssignments);\n    if (insertDocErr) console.error(\"Document assignment error:\", insertDocErr);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/src/utils/assignTraining.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":28,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":54,"column":65,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":54,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":76,"column":59,"nodeType":"MemberExpression","messageId":"unsafeReturn","endLine":76,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":81,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":81,"endColumn":33}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/lib/supabase-client\";\n\nexport async function assignTrainingForUser(auth_id: string) {\n  // 1. Get user and their role\n  const { data: user, error: userErr } = await supabase\n    .from(\"users\")\n    .select(\"id, role_id\")\n    .eq(\"id\", auth_id)\n    .single();\n\n  if (!user || userErr) {\n    console.error(\"User fetch error:\", userErr);\n    return;\n  }\n\n  // 2. Get role ‚Üí profile\n  const { data: role } = await supabase\n    .from(\"roles\")\n    .select(\"role_profile_id\")\n    .eq(\"id\", user.role_id)\n    .single();\n\n  if (!role?.role_profile_id) {\n    console.warn(\"No role profile found for role:\", user.role_id);\n    return;\n  }\n\n  const profileId = role.role_profile_id;\n\n  // 3. Get modules + documents from the role profile\n  const [{ data: modules, error: modErr }, { data: documents, error: docErr }] =\n    await Promise.all([\n      supabase\n        .from(\"role_profile_modules\")\n        .select(\"module_id\")\n        .eq(\"role_profile_id\", profileId),\n      supabase\n        .from(\"role_profile_documents\")\n        .select(\"document_id\")\n        .eq(\"role_profile_id\", profileId),\n    ]);\n\n  if (modErr || docErr) {\n    console.error(\"Error fetching modules/documents:\", modErr || docErr);\n    return;\n  }\n\n  // 4. Assign modules if not already assigned\n  const { data: existingModules } = await supabase\n    .from(\"module_completions\")\n    .select(\"module_id\")\n    .eq(\"auth_id\", auth_id);\n\n  const existingModuleIds = new Set(existingModules?.map((m) => m.module_id));\n  const newModuleAssignments = modules\n    ?.filter((m) => !existingModuleIds.has(m.module_id))\n    .map((m) => ({\n      auth_id,\n      module_id: m.module_id,\n      status: \"not_started\",\n    }));\n\n  if (newModuleAssignments?.length > 0) {\n    const { error: modInsertErr } = await supabase\n      .from(\"module_completions\")\n      .insert(newModuleAssignments);\n    if (modInsertErr) console.error(\"Module assignment error:\", modInsertErr);\n  }\n\n  // 5. Assign documents if not already assigned\n  const { data: existingDocs } = await supabase\n    .from(\"document_completions\")\n    .select(\"document_id\")\n    .eq(\"auth_id\", auth_id);\n\n  const existingDocIds = new Set(existingDocs?.map((d) => d.document_id));\n  const newDocAssignments = documents\n    ?.filter((d) => !existingDocIds.has(d.document_id))\n    .map((d) => ({\n      auth_id,\n      document_id: d.document_id,\n      status: \"not_started\",\n    }));\n\n  if (newDocAssignments?.length > 0) {\n    const { error: docInsertErr } = await supabase\n      .from(\"document_completions\")\n      .insert(newDocAssignments);\n    if (docInsertErr) console.error(\"Document assignment error:\", docInsertErr);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/supabase/functions/auto-scheduler/index.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): supabase/functions/auto-scheduler/index.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\n\nserve(async () => {\n  const supabase = createClient(\n    Deno.env.get(\"SUPABASE_URL\")!,\n    Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!,\n  );\n\n  const today = new Date().toISOString().split(\"T\")[0];\n  const day = new Date().getDay();\n  const isWeekday = day >= 1 && day <= 5;\n  const shifts = [\"teal\", \"Green\"];\n  if (isWeekday) shifts.push(\"Mon‚ÄìFri\");\n\n  const { data: templates, error: templateErr } = await supabase\n    .from(\"citracheck_templates\")\n    .select(\"id, name, frequency, shifts\");\n\n  if (templateErr) {\n    return new Response(`Template fetch error: ${templateErr.message}`, {\n      status: 500,\n    });\n  }\n\n  const createdLogs: string[] = [];\n\n  for (const template of templates || []) {\n    if (template.frequency !== \"daily\") continue;\n\n    const activeShifts = (template.shifts || []).filter((s: string) =>\n      shifts.includes(s),\n    );\n    if (activeShifts.length === 0) continue;\n\n    const { data: items, error: itemErr } = await supabase\n      .from(\"citracheck_template_items\")\n      .select(\"id\")\n      .eq(\"template_id\", template.id);\n\n    if (itemErr || !items || items.length === 0) {\n      createdLogs.push(`‚ö†Ô∏è No items found for template ${template.name}`);\n      continue;\n    }\n\n    const { data: templateRecord, error: templateRecordErr } = await supabase\n      .from(\"citracheck_templates\")\n      .select(\"department_id\")\n      .eq(\"id\", template.id)\n      .single();\n\n    if (templateRecordErr || !templateRecord?.department_id) {\n      createdLogs.push(`‚ö†Ô∏è No department found for template ${template.name}`);\n      continue;\n    }\n\n    for (const shift of activeShifts) {\n      const { data: existing } = await supabase\n        .from(\"citracheck_checks\")\n        .select(\"id\")\n        .match({\n          template_id: template.id,\n          department_id: templateRecord.department_id,\n          shift,\n          scheduled_date: today,\n        });\n\n      if (!existing || existing.length === 0) {\n        const { data: newCheckData, error: insertErr } = await supabase\n          .from(\"citracheck_checks\")\n          .insert({\n            template_id: template.id,\n            department_id: templateRecord.department_id,\n            shift,\n            scheduled_date: today,\n            status: \"not_started\",\n          })\n          .select()\n          .single();\n\n        if (insertErr || !newCheckData) {\n          createdLogs.push(\n            `‚ùå Failed to insert check for ${template.name} ‚Äì ${shift}`,\n          );\n          continue;\n        }\n\n        const checkItems = (items as { id: string }[]).map((i) => ({\n          check_id: newCheckData.id,\n          template_item_id: i.id,\n        }));\n\n        const { error: itemInsertErr } = await supabase\n          .from(\"citracheck_check_items\")\n          .insert(checkItems);\n\n        if (itemInsertErr) {\n          createdLogs.push(\n            `‚ö†Ô∏è Check created but items failed: ${template.name} ‚Äì ${shift}`,\n          );\n        } else {\n          createdLogs.push(`‚úÖ Created: ${template.name} ‚Äì ${shift}`);\n        }\n      }\n    }\n  }\n\n  return new Response(createdLogs.join(\"\\n\") || \"No checks created today.\", {\n    status: 200,\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/test-storage.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): test-storage.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { createClient } = require(\"@supabase/supabase-js\");\n\nconst supabase = createClient(\n  \"https://igzucjhzvghlhpqmgolb.supabase.co\",\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlnenVjamh6dmdobGhwcW1nb2xiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjE3MzIxNiwiZXhwIjoyMDY3NzQ5MjE2fQ.jn2RpiNtAvqjsx-sNFFisynpRkfocqfoE6fR_43BI4Q\", // üëà REPLACE with your real service key\n);\n\nasync function run() {\n  const { data, error } = await supabase.storage.from(\"ssow.wi\").list(\"\", {\n    limit: 1000,\n  });\n\n  if (error) {\n    console.error(\"‚ùå Error listing files:\", error);\n    return;\n  }\n\n  console.log(`üìÇ Found ${data.length} files:`);\n  for (const file of data) {\n    console.log(\"‚Äî\", file.name);\n  }\n}\n\nrun();\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/users/[id]/change-password/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":28,"column":19,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":28,"endColumn":31},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":34,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":34,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[972,972],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[972,972],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<string | null>`.","line":55,"column":16,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":55,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":55,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":28}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { supabase } from \"@/lib/supabase-client\";\n\nexport default function ChangePasswordPage() {\n  const router = useRouter();\n  const { id } = useParams();\n  const [authId, setAuthId] = useState<string | null>(null);\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data, error } = await supabase\n        .from(\"users\")\n        .select(\"auth_id\")\n        .eq(\"id\", id)\n        .single();\n\n      if (error || !data?.auth_id) {\n        setError(\"Could not load user or auth ID.\");\n      } else {\n        setAuthId(data.auth_id);\n      }\n\n      setLoading(false);\n    };\n\n    fetchUser();\n  }, [id]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!authId) return setError(\"Missing auth ID.\");\n\n    setSubmitting(true);\n\n    const res = await fetch(\"/api/update-password\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ auth_id: authId, new_password: password }),\n    });\n\n    const result = await res.json();\n\n    if (res.ok) {\n      setSuccess(true);\n      setTimeout(() => router.push(\"/admin/users\"), 1500);\n    } else {\n      setError(result.error || \"Failed to update password\");\n    }\n\n    setSubmitting(false);\n  };\n\n  if (loading) return <p className=\"change-password-loading-msg\">Loading...</p>;\n  if (error) return <p className=\"change-password-error-msg\">{error}</p>;\n\n  return (\n    <main className=\"change-password-main\">\n      <form onSubmit={handleSubmit} className=\"change-password-form\">\n        <h1 className=\"change-password-title\">\n          <span\n            className=\"change-password-title-icon\"\n            aria-label=\"Change Password\"\n            role=\"img\"\n          >\n            üîí\n          </span>{\" \"}\n          Change Password\n        </h1>\n\n        {success && (\n          <p className=\"change-password-success-msg\" aria-live=\"polite\">\n            <span\n              className=\"change-password-success-icon\"\n              aria-label=\"Success\"\n              role=\"img\"\n            >\n              ‚úÖ\n            </span>{\" \"}\n            Password updated successfully!\n          </p>\n        )}\n\n        <label className=\"change-password-label\">New Password</label>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"change-password-input\"\n          required\n        />\n\n        <button\n          type=\"submit\"\n          disabled={submitting}\n          className=\"change-password-submit-btn\"\n        >\n          {submitting ? \"Updating...\" : \"Update Password\"}\n        </button>\n      </form>\n    </main>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/users/add/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":39,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":39,"endColumn":12,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1143,1143],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1143,1143],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe object destructuring of a property with an `any` value.","line":45,"column":13,"nodeType":"Identifier","messageId":"unsafeObjectPattern","endLine":45,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":59,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":25}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { supabase } from \"@/lib/supabase-client\";\nimport { useRouter } from \"next/navigation\";\nimport BehaviourSelector from \"@/components/BehaviourSelector\";\n\nexport default function AddUserPage() {\n  const router = useRouter();\n  const [departments, setDepartments] = useState<\n    { id: string; name: string }[]\n  >([]);\n  const [roles, setRoles] = useState<\n    { id: string; title: string; department_id: string }[]\n  >([]);\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [behaviours, setBehaviours] = useState<string[]>([]);\n\n  const [user, setUser] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    phone: \"\",\n    department_id: \"\",\n    role_id: \"\",\n    access_level: \"User\",\n  });\n\n  useEffect(() => {\n    const load = async () => {\n      const [{ data: d }, { data: r }] = await Promise.all([\n        supabase.from(\"departments\").select(\"id, name\"),\n        supabase.from(\"roles\").select(\"id, title, department_id\"),\n      ]);\n      setDepartments(d || []);\n      setRoles(r || []);\n    };\n    load();\n  }, []);\n\n  const handleSave = async () => {\n    setLoading(true);\n\n    const { data, error } = await supabase\n      .from(\"users\")\n      .insert(user)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(\"Error adding user:\", error);\n      setLoading(false);\n      return;\n    }\n\n    if (data && behaviours.length > 0) {\n      const inserts = behaviours.map((b) => ({\n        auth_id: data.id,\n        behaviour_id: b,\n      }));\n      await supabase.from(\"user_behaviours\").insert(inserts);\n    }\n\n    setSuccess(true);\n    setTimeout(() => {\n      router.push(\"/admin/users\");\n    }, 1000);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 bg-orange-50 rounded shadow\">\n      <h1 className=\"text-2xl font-bold text-orange-700 mb-6\">Add New User</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <input\n          className=\"w-full border p-2 rounded\"\n          value={user.first_name}\n          onChange={(e) => setUser({ ...user, first_name: e.target.value })}\n          placeholder=\"First Name\"\n        />\n        <input\n          className=\"w-full border p-2 rounded\"\n          value={user.last_name}\n          onChange={(e) => setUser({ ...user, last_name: e.target.value })}\n          placeholder=\"Last Name\"\n        />\n        <input\n          className=\"w-full border p-2 rounded\"\n          value={user.email}\n          onChange={(e) => setUser({ ...user, email: e.target.value })}\n          placeholder=\"Email\"\n        />\n        <input\n          className=\"w-full border p-2 rounded\"\n          value={user.phone}\n          onChange={(e) => setUser({ ...user, phone: e.target.value })}\n          placeholder=\"Phone\"\n        />\n        <select\n          className=\"w-full border p-2 rounded\"\n          value={user.department_id}\n          onChange={(e) =>\n            setUser({ ...user, department_id: e.target.value, role_id: \"\" })\n          }\n        >\n          <option value=\"\">Select Department</option>\n          {departments.map((d) => (\n            <option key={d.id} value={d.id}>\n              {d.name}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"w-full border p-2 rounded\"\n          value={user.role_id}\n          onChange={(e) => setUser({ ...user, role_id: e.target.value })}\n        >\n          <option value=\"\">Select Role</option>\n          {roles\n            .filter((r) => r.department_id === user.department_id)\n            .map((r) => (\n              <option key={r.id} value={r.id}>\n                {r.title}\n              </option>\n            ))}\n        </select>\n        <select\n          className=\"w-full border p-2 rounded\"\n          value={user.access_level}\n          onChange={(e) => setUser({ ...user, access_level: e.target.value })}\n        >\n          <option value=\"User\">User</option>\n          <option value=\"Manager\">Manager</option>\n          <option value=\"Admin\">Admin</option>\n        </select>\n\n        <div className=\"md:col-span-2 lg:col-span-3\">\n          <BehaviourSelector\n            selected={behaviours}\n            onChange={setBehaviours}\n            max={5}\n          />\n        </div>\n\n        {success && (\n          <p className=\"text-green-700 md:col-span-2 lg:col-span-3\">\n            ‚úÖ User added successfully!\n          </p>\n        )}\n      </div>\n\n      <div className=\"mt-6\">\n        <button\n          onClick={handleSave}\n          disabled={loading}\n          className=\"add-user-submit-btn\"\n        >\n          {loading ? \"Saving...\" : \"Add User\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/users/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bigmak/Documents/Naranja 4.3 copy/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]